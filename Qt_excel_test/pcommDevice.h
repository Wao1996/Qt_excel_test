/****************************************************************************
**
** Namespace PCOMMSERVERLib generated by dumpcpp v5.12.2 using
** dumpcpp {50ECCF67-B73C-431B-A53D-9EDDAF3CE611}
** from the type library C:\Windows\SysWOW64\PcommServer.exe
**
****************************************************************************/

#ifndef QAX_DUMPCPP_PCOMMSERVERLIB_H
#define QAX_DUMPCPP_PCOMMSERVERLIB_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef PCOMMSERVERLIB_EXPORT
#define PCOMMSERVERLIB_EXPORT
#endif

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace

namespace PCOMMSERVERLib {

    enum DEVASCIIMODE {
        DEV_BUS                 = 0,
        DEV_DPR                 = 1
    };

    enum DEVDPRBINROTSTATUS {
        DEV_DPRERROR            = -1,
        DEV_DPROK               = 0,
        DEV_DPRBUFBSY           = 1,
        DEV_DPREOF              = 2
    };

    enum DEVFEEDBACKTYPE {
        DEVFB_RESOLVER          = 0,
        DEVFB_ABSOLUTE          = 1,
        DEVFB_UVW               = 2,
        DEVFB_INCREMENTAL       = 3,
        DEVFB_MLDT              = 4,
        DEVFB_ANALOG            = 5
    };

    enum DEVGATMODE {
        DEVGAT_RAM_NOWRAP       = 0,
        DEVGAT_RAM_WRAP         = 1,
        DEVGAT_DPR_NOWRAP       = 2,
        DEVGAT_DPR_WRAP         = 3
    };

    enum DEVLOCATIONTYPE {
        DEV_LT_UNKNOWN          = 0,
        DEV_LT_ISA              = 1,
        DEV_LT_SER              = 2,
        DEV_LT_ETH              = 3,
        DEV_LT_PCI              = 4,
        DEV_LT_USB              = 5,
        DEV_LT_LAST             = 6
    };

    enum DEVMOTION {
        DEV_MOTION_INPOS        = 0,
        DEV_MOTION_JOG          = 1,
        DEV_MOTION_RUNNING      = 2,
        DEV_MOTION_HOMING       = 3,
        DEV_MOTION_HANDLE       = 4,
        DEV_MOTION_OPENLOOP     = 5,
        DEV_MOTION_DISABLED     = 6
    };

    enum DEVMOTIONMODE {
        DEV_MOTIONMODE_LINEAR   = 0,
        DEV_MOTIONMODE_RAPID    = 1,
        DEV_MOTIONMODE_CIRCW    = 2,
        DEV_MOTIONMODE_CIRCCW   = 3,
        DEV_MOTIONMODE_SPLINE   = 4,
        DEV_MOTIONMODE_PVT      = 5
    };

    enum DEVPMACFIRMWARETYPE {
        DEV_PID                 = 1,
        DEV_ESA                 = 2,
        DEV_LHB                 = 3
    };

    enum DEVPMACTYPE {
        DEV_PT_PMAC1            = 1,
        DEV_PT_PMAC2            = 2,
        DEV_PT_PMACUL           = 3,
        DEV_PT_GEOPMAC          = 4,
        DEV_PT_PMAC             = 5,
        DEV_PT_PMAC1T           = 6,
        DEV_PT_PMAC2T           = 7,
        DEV_PT_PMACUT           = 8,
        DEV_PT_UMAC             = 9,
        DEV_PT_QMAC             = 10,
        DEV_PT_PMAC1TSM         = 11,
        DEV_PT_PMAC2TSM         = 12,
        DEV_PT_TURBOBRICK       = 13,
        DEV_PT_GEOBRICK         = 14
    };

    enum DEVPROGRAMMODE {
        DEV_PRG_STOP            = 0,
        DEV_PRG_RUN             = 1,
        DEV_PRG_STEP            = 2,
        DEV_PRG_HOLD            = 3,
        DEV_PRG_JOGHOLD         = 4,
        DEV_PRG_JOGSTOP         = 5
    };

    enum NCADDRESS {
        NC_ADR_A                = 0,
        NC_ADR_B                = 1,
        NC_ADR_C                = 2,
        NC_ADR_X                = 3,
        NC_ADR_Y                = 4,
        NC_ADR_Z                = 5,
        NC_ADR_U                = 6,
        NC_ADR_V                = 7,
        NC_ADR_W                = 8,
        NC_ADR_E                = 9,
        NC_ADR_F                = 10,
        NC_ADR_G                = 11,
        NC_ADR_H                = 12,
        NC_ADR_D                = 13,
        NC_ADR_I                = 14,
        NC_ADR_J                = 15,
        NC_ADR_K                = 16,
        NC_ADR_L                = 17,
        NC_ADR_P                = 18,
        NC_ADR_Q                = 19,
        NC_ADR_M                = 20,
        NC_ADR_N                = 21,
        NC_ADR_O                = 22,
        NC_ADR_R                = 23,
        NC_ADR_S                = 24,
        NC_ADR_T                = 25,
        NC_ADR_UNKNOWN          = 26
    };

    enum NCAXISSELECT {
        NC_SELECT_UNKNOWN       = 0,
        NC_SELECTX              = 1,
        NC_SELECTY              = 2,
        NC_SELECTZ              = 3,
        NC_SELECTA              = 4,
        NC_SELECTB              = 5,
        NC_SELECTC              = 6,
        NC_SELECTU              = 7,
        NC_SELECTV              = 8,
        NC_SELECTW              = 9,
        NC_SELECTLAST           = 10
    };

    enum NCBUFFERMODE {
        NC_PARSEDTOBINARY       = 0,
        NC_FILETOBINARY         = 1,
        NC_RESETBUFFER          = 2
    };

    enum NCCLNTSELECT {
        NC_COOLANT_UNKNOWN      = 0,
        NC_COOLANT_AUTO         = 1,
        NC_COOLANT_FLOOD        = 2,
        NC_COOLANT_MIST         = 3,
        NC_COOLANT_BOTH         = 4,
        NC_COOLANT_LAST         = 5
    };

    enum NCCOORDTYPE {
        NC_COORDTYPE_G54        = 0,
        NC_COORDTYPE_G55        = 1,
        NC_COORDTYPE_G56        = 2,
        NC_COORDTYPE_G57        = 3,
        NC_COORDTYPE_G58        = 4,
        NC_COORDTYPE_G59        = 5,
        NC_COORDTYPE_G92        = 6,
        NC_COORDTYPE_COMMON     = 7,
        NC_COORDTYPE_TOOL       = 8,
        NC_COORDTYPE_INTERM     = 9,
        NC_COORDTYPE_SCALE      = 10,
        NC_COORDTYPE_MIRROR     = 11,
        NC_COORDTYPE_ROTATION   = 12,
        NC_COORDTYPE_CENTER_ROT = 13,
        NC_COORDTYPE_G54_LOCAL  = 14,
        NC_COORDTYPE_G55_LOCAL  = 15,
        NC_COORDTYPE_G56_LOCAL  = 16,
        NC_COORDTYPE_G57_LOCAL  = 17,
        NC_COORDTYPE_G58_LOCAL  = 18,
        NC_COORDTYPE_G59_LOCAL  = 19,
        NC_COORDTYPE_PRODUCT    = 20,
        NC_COORDTYPE_OFFSET_REL = 21,
        NC_COORDTYPE_OFFSET_ABS = 22,
        NC_COORDTYPE_CENTER_SCALE= 23,
        NC_COORDTYPE_G53P1      = 24,
        NC_COORDTYPE_G54P1      = 25
    };

    enum NCERRORMODE {
        NC_ERR_MESSAGE          = 0,
        NC_ERR_WARN             = 1,
        NC_ERR_STOP             = 2,
        NC_ERR_FATAL            = 3
    };

    enum NCERRORTYPE {
        NC_ERR_SYSTEM           = 0,
        NC_ERR_MOTOR            = 1,
        NC_ERR_CODE             = 2,
        NC_ERR_COMMON           = 3,
        NC_ERR_PLC              = 4,
        NC_ERR_OPERMSG          = 5
    };

    enum NCFEEDRATEMODE {
        NC_FEEDRATE_FPM         = 0,
        NC_FEEDRATE_INVERSE     = 1,
        NC_FEEDRATE_LAST        = 2
    };

    enum NCFIVEAXISMODE {
        NC_FIVEAXIS_DISABLED    = 0,
        NC_FIVEAXIS_AC          = 1,
        NC_FIVEAXIS_BC          = 2,
        NC_FIVEAXIS_AB          = 3,
        NC_FIVEAXIS_A           = 4,
        NC_FIVEAXIS_B           = 5,
        NC_FIVEAXIS_C           = 6
    };

    enum NCJOGSELECT {
        NC_JOG_UNKNOWN          = 0,
        NC_JOG_HANDWHEEL        = 1,
        NC_JOG_INCREMENTAL      = 2,
        NC_JOG_CONTINUOUS       = 3,
        NC_JOG_HOME             = 4,
        NC_JOG_LAST             = 5
    };

    enum NCMACHINETYPE {
        NC_UNKNOWN              = 0,
        NC_MILL                 = 1,
        NC_LATHE                = 2,
        NC_GRINDER              = 3,
        NC_LASER                = 4,
        NC_EDM                  = 5
    };

    enum NCMACH_STATE_TYPE {
        NC_MCH_STATE_MANUAL     = 0,
        NC_MCH_STATE_MDI        = 1,
        NC_MCH_STATE_AUTO       = 2
    };

    enum NCMATERIALTYPE {
        NC_MATERIAL_UNKNOWN     = 0,
        NC_MATERIAL_HSS         = 1,
        NC_MATERIAL_CARBIDE     = 2,
        NC_MATERIAL_LAST_MATERIAL_TYPE= 3
    };

    enum NCMODE {
        NC_MODE_UNKNOWN         = 0,
        NC_MODE_AUTO            = 1,
        NC_MODE_MANUAL          = 2,
        NC_MODE_MDI             = 3,
        NC_MODE_LAST            = 4
    };

    enum NCPOSTYPE {
        NC_ABSOLUTE             = 0,
        NC_RELATIVE             = 1,
        NC_MACHINE              = 2,
        NC_COMMANDED            = 3,
        NC_DISTTOGO             = 4,
        NC_FERR                 = 5
    };

    enum NCSPEEDSELECT {
        NC_SPEED_UNKNOWN        = 0,
        NC_SPEED_LOW            = 1,
        NC_SPEED_MEDL           = 2,
        NC_SPEED_MEDIUM         = 3,
        NC_SPEED_MEDH           = 4,
        NC_SPEED_HIGH           = 5,
        NC_SPEED_LAST           = 6
    };

    enum NCSPINDLESELECT {
        NC_SPINDLE_UNKNOWN      = 0,
        NC_SPINDLE_CCW          = 1,
        NC_SPINDLE_OFF          = 2,
        NC_SPINDLE_CW           = 3,
        NC_SPINDLE_ORIENT1      = 4,
        NC_SPINDLE_ORIENT2      = 5,
        NC_SPINDLE_LAST         = 6
    };

    enum NCTIMEBASEMODE {
        NC_TIMEBASE_CUT         = 0,
        NC_TIMEBASE_RAPID       = 1,
        NC_TIMEBASE_THREAD      = 2,
        NC_TIMEBASE_FPR         = 3,
        NC_TIMEBASE_LAST        = 4
    };

    enum NCTOOLDIRECTION {
        NC_TOOLDIRECTION_NEUTRAL= 0,
        NC_TOOLDIRECTION_45     = 1,
        NC_TOOLDIRECTION_135    = 2,
        NC_TOOLDIRECTION_225    = 3,
        NC_TOOLDIRECTION_315    = 4,
        NC_TOOLDIRECTION_0      = 5,
        NC_TOOLDIRECTION_90     = 6,
        NC_TOOLDIRECTION_180    = 7,
        NC_TOOLDIRECTION_270    = 8,
        NC_TOOLDIRECTION_END    = 9
    };

    enum NCTOOLHAND {
        NC_TOOLHAND_Neutral     = 0,
        NC_TOOLHAND_Left        = 1,
        NC_TOOLHAND_Right       = 2
    };

    enum NCTOOLMODE {
        NC_TOOL_UNKNOWN         = 0,
        NC_TOOL_CHANGE          = 1,
        NC_TOOL_CAROUSELINC     = 2,
        NC_TOOL_CAROUSELDEC     = 3,
        NC_TOOL_RELEASE         = 4,
        NC_TOOL_ENGAGE          = 5,
        NC_TOOL_LAST            = 6
    };

    enum NCTOOLOFSTYPE {
        NC_TOOLOFSTYPE_GEOMETRY = 0,
        NC_TOOLOFSTYPE_WEAR     = 1,
        NC_TOOLOFSTYPE_LENGTH   = 2,
        NC_TOOLOFSTYPE_DIAMETER = 3,
        NC_TOOLOFSTYPE_ORIENTATION= 4,
        NC_TOOLOFSTYPE_CUTTERCOMPENSATION= 5,
        NC_TOOLOFSTYPE_POCKET   = 6,
        NC_TOOLOFSTYPE_PIVOTLENGTH= 7,
        NC_TOOLOFSTYPE_CUTTERCOMPWEAR= 8,
        NC_TOOLOFSTYPE_GROUPFAMILY= 9,
        NC_TOOLOFSTYPE_LIFECOUNT= 10,
        NC_TOOLOFSTYPE_LIFETIME = 11
    };

    enum NCTOOLTYPE {
        NC_TOOLTYPE_UNKNOWN     = 0,
        NC_TOOLTYPE_ENDMILL     = 1,
        NC_TOOLTYPE_BALLMILL    = 2,
        NC_TOOLTYPE_DRILL       = 3,
        NC_TOOLTYPE_CSINK       = 4,
        NC_TOOLTYPE_CDRILL      = 5,
        NC_TOOLTYPE_INSERTMILL  = 6,
        NC_TOOLTYPE_LATHEINSERT = 7,
        NC_TOOLTYPE_LAST_TOOL_TYPE= 8
    };

// forward declarations
    enum DEVPMACTYPE;
    enum DEVPMACFIRMWARETYPE;
    enum DEVLOCATIONTYPE;
    enum DEVASCIIMODE;
    struct DEVVBGWFORMAT;
    struct DEVBGVREADSTATUS;
    struct DEVPLC_STATUS_STRUCT;
    struct DEVPLCC_STATUS_STRUCT;
    struct DEVTOTAL_PLC_STATUS_STRUCT;
    enum DEVGATMODE;
    struct DEVWTG_EX;
    struct DEVGATHER_INFO;
    struct DEVGATHER_HEADER;
    enum DEVFEEDBACKTYPE;
    struct DEVULTRALIGHT_INFO;
    enum DEVPROGRAMMODE;
    enum DEVMOTION;
    enum DEVMOTIONMODE;
    enum DEVDPRBINROTSTATUS;
    struct DEVFGMOTORTURBO;
    struct DEVFGMOTOR;
    struct DEVBGCOORD;
    struct DEVBGCOORDTURBO;
    struct DEVPOSDATASTRUCT;
    struct DEVDATA;
    struct DEVPOSDATA;
    struct pmacStripPlotDATA;
    struct DEVMSTURBO;
    struct DEVMSNONTURBO;
    struct DEVGSTURBO;
    struct DEVGSNONTURBO;
    struct DEVCSTURBO;
    struct DEVCSNONTURBO;
    struct DEVUPLOAD;
    enum NCPOSTYPE;
    enum NCMODE;
    enum NCAXISSELECT;
    enum NCJOGSELECT;
    enum NCSPEEDSELECT;
    enum NCSPINDLESELECT;
    enum NCCLNTSELECT;
    enum NCBUFFERMODE;
    enum NCTOOLMODE;
    enum NCERRORMODE;
    enum NCERRORTYPE;
    enum NCTIMEBASEMODE;
    enum NCFEEDRATEMODE;
    enum NCFIVEAXISMODE;
    enum NCMACH_STATE_TYPE;
    enum NCMACHINETYPE;
    enum NCADDRESS;
    enum NCTOOLTYPE;
    enum NCMATERIALTYPE;
    enum NCTOOLHAND;
    enum NCTOOLDIRECTION;
    enum NCTOOLOFSTYPE;
    enum NCCOORDTYPE;
    struct NCTOOL;
    struct NCTOOLLIFE;
    struct NCDATA;
    enum DEVPMACTYPE;
    enum DEVPMACFIRMWARETYPE;
    enum DEVLOCATIONTYPE;
    enum DEVASCIIMODE;
    struct DEVVBGWFORMAT;
    struct DEVBGVREADSTATUS;
    struct DEVPLC_STATUS_STRUCT;
    struct DEVPLCC_STATUS_STRUCT;
    struct DEVTOTAL_PLC_STATUS_STRUCT;
    enum DEVGATMODE;
    struct DEVWTG_EX;
    struct DEVGATHER_INFO;
    struct DEVGATHER_HEADER;
    enum DEVFEEDBACKTYPE;
    struct DEVULTRALIGHT_INFO;
    enum DEVPROGRAMMODE;
    enum DEVMOTION;
    enum DEVMOTIONMODE;
    enum DEVDPRBINROTSTATUS;
    struct DEVFGMOTORTURBO;
    struct DEVFGMOTOR;
    struct DEVBGCOORD;
    struct DEVBGCOORDTURBO;
    struct DEVPOSDATASTRUCT;
    struct DEVDATA;
    struct DEVPOSDATA;
    struct pmacStripPlotDATA;
    struct DEVMSTURBO;
    struct DEVMSNONTURBO;
    struct DEVGSTURBO;
    struct DEVGSNONTURBO;
    struct DEVCSTURBO;
    struct DEVCSNONTURBO;
    struct DEVUPLOAD;
    enum NCPOSTYPE;
    enum NCMODE;
    enum NCAXISSELECT;
    enum NCJOGSELECT;
    enum NCSPEEDSELECT;
    enum NCSPINDLESELECT;
    enum NCCLNTSELECT;
    enum NCBUFFERMODE;
    enum NCTOOLMODE;
    enum NCERRORMODE;
    enum NCERRORTYPE;
    enum NCTIMEBASEMODE;
    enum NCFEEDRATEMODE;
    enum NCFIVEAXISMODE;
    enum NCMACH_STATE_TYPE;
    enum NCMACHINETYPE;
    enum NCADDRESS;
    enum NCTOOLTYPE;
    enum NCMATERIALTYPE;
    enum NCTOOLHAND;
    enum NCTOOLDIRECTION;
    enum NCTOOLOFSTYPE;
    enum NCCOORDTYPE;
    struct NCTOOL;
    struct NCTOOLLIFE;
    struct NCDATA;

class PCOMMSERVERLIB_EXPORT IPmacDevice : public QAxObject
{
public:
    IPmacDevice(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property MaxDownloadErrors

    property MaxDownloadErrors

    */
    inline int MaxDownloadErrors() const; //Returns the value of MaxDownloadErrors
    inline void SetMaxDownloadErrors(int value); //Sets the value of the MaxDownloadErrors property

    /*
    Method Abort

    method Abort

    */
    inline void Abort(int dwDevice);

    /*
    Method AbortDownload

    method AbortDownload

    */
    inline void AbortDownload(int dwDevice);

    /*
    Method AbortTest

    method AbortTest

    */
    inline void AbortTest(int dwDevice);

    /*
    Method AddDownloadFile

    method AddDownloadFile

    */
    inline void AddDownloadFile(int dwDevice, const QString& iniFile, const QString& userID, const QString& dlFile, bool& pbSuccess);

    /*
    Method BackupLinkList

    method BackupLinkList

    */
    inline void BackupLinkList(int dwDevice, bool& pbSuccess);

    /*
    Method BufferOpen

    property BufferOpen

    */
    inline bool BufferOpen(int dwDevice);

    /*
    Method CalculateStepStatistics

    method CalculateStepStatistics

    */
    inline void CalculateStepStatistics(QVariant& pvData, int stepSize, int I10, int I19, QString& pbsRiseTime, QString& pbsPeakTime, QString& pbsNatFreq, QString& pbsOvershoot, QString& pbsDamping, QString& pbsSettleTime);

    /*
    Method ClearGather

    method ClearGather

    */
    inline void ClearGather(int dwDevice);

    /*
    Method ClearGatherData

    method ClearGatherData

    */
    inline void ClearGatherData(int dwDevice);

    /*
    Method Close

    method Close

    */
    inline void Close(int dwDevice);

    /*
    Method CollectGatherData

    method CollectGatherData

    */
    inline void CollectGatherData(int dwDevice, int& pSources, int& pSamples, bool& pbSuccess);

    /*
    Method CommandLog

    method CommandLog

    */
    inline void CommandLog(int dwDevice, const QString& bStr, bool& pbSuccess);

    /*
    Method CompilePLCC

    method CompilePLCC

    */
    inline void CompilePLCC(int dwDevice, const QString& inFilePath, const QString& outFilePath, bool& pbSuccess);

    /*
    Method ConvertWordToLong

    method ConvertWordToLong

    */
    inline void ConvertWordToLong(const QString& word, int& pVal);

    /*
    Method ConvertWordToShort

    method ConvertWordToShort

    */
    inline void ConvertWordToShort(const QString& word, int offset, int& pVal);

    /*
    Method ConvertWordToStringFloat

    method ConvertWordToStringFloat

    */
    inline void ConvertWordToStringFloat(const QString& word, QString& pVal);

    /*
    Method CreateIncrementalFinePhasePLC

    method CreateIncrementalFinePhasePLC

    */
    inline void CreateIncrementalFinePhasePLC(int dwDevice, const QString& filePath, int PLCNumber, int motor, bool& pbSuccess);

    /*
    Method DPRAddressRange

    method DPRAddressRange

    */
    inline void DPRAddressRange(int dwDevice, bool bUpper, bool bPC, int& pVal);

    /*
    Method DPRAsciiStrToRot

    method DPRAsciiStrToRot

    */
    inline void DPRAsciiStrToRot(int dwDevice, const QString& inpstr, int bufnum, int& pstatus);

    /*
    Method DPRAsciiStrToRotEx

    method DPRAsciiStrToRotEx

    */
    inline void DPRAsciiStrToRotEx(int dwDevice, const QString& inpstr, int bufnum, bool bSendRemaining, int& pstatus);

    /*
    Method DPRAvailable

    property DPRAvailable

    */
    inline bool DPRAvailable(int dwDevice);

    /*
    Method DPRBackGroundVar

    method DPRBackGroundVar

    */
    inline void DPRBackGroundVar(int dwDevice, bool bOn);

    /*
    Method DPRBackground

    method DPRBackground

    */
    inline void DPRBackground(int dwDevice, int on, int period, int coord, bool& pbSuccess);

    /*
    Method DPRCoordRptEnabled

    property DPRCoordRptEnabled

    */
    inline bool DPRCoordRptEnabled(int dwDevice);

    /*
    Method DPRCoordRptMSec

    property DPRCoordRptMSec

    */
    inline int DPRCoordRptMSec(int dwDevice);

    /*
    Method DPRCoordRptMax

    property DPRCoordRptMax

    */
    inline int DPRCoordRptMax(int dwDevice);

    /*
    Method DPRDWordBitSet

    method DPRDWordBitSet

    */
    inline void DPRDWordBitSet(int dwDevice, int offset, int bit, bool& pVal, bool& pbSuccess);

    /*
    Method DPRFloat

    method DPRFloat

    */
    inline void DPRFloat(qlonglong d, double scale, double& pVal);

    /*
    Method DPRGetCoordRpt

    method DPRGetCoordRpt

    */
    inline void DPRGetCoordRpt(int dwDevice, int coord, DEVBGCOORD*& pStruct, int& pServo, bool& pbSuccess);

    /*
    Method DPRGetCoordRptTurbo

    method DPRGetCoordRptTurbo

    */
    inline void DPRGetCoordRptTurbo(int dwDevice, int coord, DEVBGCOORDTURBO*& pStruct, int& pServo, bool& pbSuccess);

    /*
    Method DPRGetDWordMask

    method DPRGetDWordMask

    */
    inline void DPRGetDWordMask(int dwDevice, int offset, int mask, int& pVal);

    /*
    Method DPRGetFixedDouble

    method DPRGetFixedDouble

    */
    inline void DPRGetFixedDouble(int dwDevice, int address, double& pVal, bool& pbSuccess);

    /*
    Method DPRGetFloat

    method DPRGetFloat

    */
    inline void DPRGetFloat(int dwDevice, int offset, double& pVal, bool& pbSuccess);

    /*
    Method DPRGetLong

    method DPRGetLong

    */
    inline void DPRGetLong(int dwDevice, int offset, int& pVal, bool& pbSuccess);

    /*
    Method DPRGetLongDouble

    method DPRGetLongDouble

    */
    inline void DPRGetLongDouble(int dwDevice, int address, double& pVal, bool& pbSuccess);

    /*
    Method DPRGetMem

    method DPRGetMem

    */
    inline void DPRGetMem(int dwDevice, int offset, int bytes, QVariant& pVal, bool& pbSuccess);

    /*
    Method DPRGetMotorRpt

    method DPRGetMotorRpt

    */
    inline void DPRGetMotorRpt(int dwDevice, int motor, DEVFGMOTOR*& pStruct, int& pServo, bool& pbSuccess);

    /*
    Method DPRGetMotorRptTurbo

    method DPRGetMotorRptTurbo

    */
    inline void DPRGetMotorRptTurbo(int dwDevice, int motor, DEVFGMOTORTURBO*& pStruct, int& pServo, bool& pbSuccess);

    /*
    Method DPRGetShort

    method DPRGetShort

    */
    inline void DPRGetShort(int dwDevice, int address, int& pVal, bool& pbSuccess);

    /*
    Method DPRMotorRptEnabled

    property DPRMotorRptEnabled

    */
    inline bool DPRMotorRptEnabled(int dwDevice);

    /*
    Method DPRMotorRptMSec

    property DPRMotorRptMSec

    */
    inline int DPRMotorRptMSec(int dwDevice);

    /*
    Method DPRMotorRptMask

    property DPRMotorRptMask

    */
    inline int DPRMotorRptMask(int dwDevice);

    /*
    Method DPRResetDWordBit

    method DPRResetDWordBit

    */
    inline void DPRResetDWordBit(int dwDevice, int offset, int bit, bool& pbSuccess);

    /*
    Method DPRRotBufClr

    method DPRRotBufClr

    */
    inline void DPRRotBufClr(int dwDevice, int bufnum);

    /*
    Method DPRRotBufInit

    method DPRRotBufInit

    */
    inline void DPRRotBufInit(int dwDevice, bool& pbSuccess);

    /*
    Method DPRRotBufRemove

    method DPRRotBufRemove

    */
    inline void DPRRotBufRemove(int dwDevice, int bufnum);

    /*
    Method DPRSetDWordBit

    method DPRSetDWordBit

    */
    inline void DPRSetDWordBit(int dwDevice, int offset, int bit, bool& pbSuccess);

    /*
    Method DPRSetDWordMask

    method DPRSetDWordMask

    */
    inline void DPRSetDWordMask(int dwDevice, int offset, int mask, int Val);

    /*
    Method DPRSetFloat

    method DPRSetFloat

    */
    inline void DPRSetFloat(int dwDevice, int offset, double newVal, bool& pbSuccess);

    /*
    Method DPRSetLong

    method DPRSetLong

    */
    inline void DPRSetLong(int dwDevice, int offset, int newVal, bool& pbSuccess);

    /*
    Method DPRSetMem

    method DPRSetMem

    */
    inline void DPRSetMem(int dwDevice, int offset, int bytes, const QVariant& Val, bool& pbSuccess);

    /*
    Method DPRSetRotBuf

    method DPRSetRotBuf

    */
    inline void DPRSetRotBuf(int dwDevice, bool on);

    /*
    Method DPRSetShort

    method DPRSetShort

    */
    inline void DPRSetShort(int dwDevice, int address, int newVal, bool& pbSuccess);

    /*
    Method DPRSetupBuffers

    method DPRSetupBuffers

    */
    inline void DPRSetupBuffers(uint dwDevice, bool& pbSuccess);

    /*
    Method DPRSize

    property DPRSize

    */
    inline int DPRSize(int dwDevice);

    /*
    Method DPRTest

    method DPRTest

    */
    inline void DPRTest(int dwDevice, bool& pbSuccess);

    /*
    Method DPRVarBufInit

    method DPRVarBufInit

    */
    inline void DPRVarBufInit(int dwDevice, const QVariant& vAddressArray, const QVariant& vTypeArray, int& pHandle, bool& pbSuccess);

    /*
    Method DPRVarBufRead

    method DPRVarBufRead

    */
    inline void DPRVarBufRead(int dwDevice, int h, int entryNum, QVariant& pVal, bool& pbSuccess);

    /*
    Method DPRVarBufReadAll

    method DPRVarBufReadAll

    */
    inline void DPRVarBufReadAll(int dwDevice, int h, QVariant& pVal, bool& pbSuccess);

    /*
    Method DPRVarBufRemove

    method DPRVarBufRemove

    */
    inline void DPRVarBufRemove(int dwDevice, int index, bool& pbSuccess);

    /*
    Method DPRVarBufWrite

    method DPRVarBufWrite

    */
    inline void DPRVarBufWrite(int dwDevice, const QVariant& vData, const QVariant& vAddresses, const QVariant& vTypes, int& pWritten);

    /*
    Method DPRVarBufWriteEx

    method DPRVarBufWriteEx

    */
    inline void DPRVarBufWriteEx(int dwDevice, const QVariant& vData, int& pWritten);

    /*
    Method DataCollect

    method DataCollect

    */
    inline void DataCollect(int dwDevice, QVariant& pvArray, bool& pbSuccess);

    /*
    Method DataCollectionEnabled

    property DataCollectionEnabled

    */
    inline bool DataCollectionEnabled(int dwDevice);

    /*
    Method DataCollectionResolution

    property DataResolution

    */
    inline int DataCollectionResolution(int dwDevice);

    /*
    Method DataGather

    method DataGather

    */
    inline void DataGather(int dwDevice, QList<DEVDATA>*& pvArray, bool& pbSuccess);

    /*
    Method DataStart

    method DataStart

    */
    inline void DataStart(int dwDevice, int resolution, int period);

    /*
    Method DataStop

    method DataStop

    */
    inline void DataStop(int dwDevice);

    /*
    Method DifferentiateTheData

    method DifferentiateTheData

    */
    inline void DifferentiateTheData(QVariant& pvData, int I10, int I19, int& pMinVal, int& pMaxVal);

    /*
    Method DoACurrentLoopStep

    method DoACurrentLoopStep

    */
    inline void DoACurrentLoopStep(int dwDevice, int motor, int dwellTime, int magnitude, bool bAutoTune, QString& pbsCTSCurrent, double pwmDutyCycle, int divisor, bool bUltra);

    /*
    Method DoACurrentLoopStepBrush

    method DoACurrentLoopStepBrush

    */
    inline void DoACurrentLoopStepBrush(int dwDevice, int motor, int dwellTime, int magnitude, bool bAutoTune, QString& pbsCTSCurrent, double pwmDutyCycle, int divisor, bool bUltra);

    /*
    Method DoAGantryParabolic

    method DoAGantryParabolic

    */
    inline void DoAGantryParabolic(int dwDevice, int motor, int motor2, bool& pbSuccess);

    /*
    Method DoAGantryParabolicMove

    method DoAGantryParabolicMove

    */
    inline void DoAGantryParabolicMove(int dwDevice, int motor, int motor2, int stepSize, int stepTime, bool bBiDirectional, bool& pbSuccess);

    /*
    Method DoAGantryPositionLoopStep

    method DoAGantryPositionLoopStep

    */
    inline void DoAGantryPositionLoopStep(int dwDevice, int motor, int motor2, int stepSize, int stepTime, bool bBiDirectional, bool& pbSuccess);

    /*
    Method DoAParabolicMove

    method DoAParabolicMove

    */
    inline void DoAParabolicMove(int dwDevice, int motor, int stepSize, int stepTime, bool bBiDirectional, bool& pbSuccess);

    /*
    Method DoAPositionLoopStep

    method DoAPositionLoopStep

    */
    inline void DoAPositionLoopStep(int dwDevice, int motor, int stepSize, int stepTime, bool bBiDirectional, bool& pbSuccess);

    /*
    Method DoChecksums

    property DoChecksums

    */
    inline bool DoChecksums(int dwDevice);

    /*
    Method Download

    method Download

    */
    inline void Download(int dwDevice, const QString& filePath, bool bMacro, bool bMap, bool bLog, bool bDnld, bool& pbSuccess);

    /*
    Method DownloadAndRunRoughPhasePLC

    method DownloadAndRunRoughPhasePLC

    */
    inline void DownloadAndRunRoughPhasePLC(int dwDevice, int motor, bool& pbSuccess);

    /*
    Method DownloadAutoTuningPLC

    method DownloadAutoTuningPLC

    */
    inline void DownloadAutoTuningPLC(int dwDevice, int motor, bool bCurrentLoop, bool bBypassJog, bool& pbSuccess);

    /*
    Method DownloadCurrentFeedbackTest

    method DownloadCurrentFeedbackTest

    */
    inline void DownloadCurrentFeedbackTest(int dwDevice, int mtr, double pwmDutyCycle, int pwmFreq, bool bMacro, bool bUltra, bool& pbSuccess);

    /*
    Method DownloadCurrentSixStepTest

    method DownloadCurrentSixStepTest

    */
    inline void DownloadCurrentSixStepTest(int dwDevice, int motor, double pwmDutyCycle, bool bMacro, bool bUltra, bool& pbSuccess);

    /*
    Method DownloadFile

    method DownloadFile

    */
    inline void DownloadFile(int dwDevice, const QString& filePath);

    /*
    Method DownloadFirmwareFile

    method DownloadFirmwareFile

    */
    inline void DownloadFirmwareFile(int dwDevice, const QString& filePath, bool& pbSuccess);

    /*
    Method DownloadGantryAutoTuningPLC

    method DownloadGantryAutoTuningPLC

    */
    inline void DownloadGantryAutoTuningPLC(int dwDevice, int motor, int motor2, bool bCurrentLoop, bool bBypassJog, double MaxTravel, int time, bool& pbSuccess);

    /*
    Method DownloadGantryAutoTuningPLCP1

    method DownloadGantryAutoTuningPLCP1

    */
    inline void DownloadGantryAutoTuningPLCP1(int dwDevice, int motor, int motor2, bool bCurrentLoop, bool bBypassJog, bool& pbSuccess);

    /*
    Method DownloadOpenLoopTest

    method DownloadOpenLoopTest

    */
    inline void DownloadOpenLoopTest(int dwDevice, int motor, int magnitude, int time, int reps, bool bGatherCurrents, bool bMacro, bool& pbSuccess);

    /*
    Method DownloadOpenLoopTest1

    method DownloadOpenLoopTest1

    */
    inline void DownloadOpenLoopTest1(int dwDevice, int motor, int magnitude, int time, int reps, bool bGatherCurrents, bool bMacro, bool& pbSuccess);

    /*
    Method DownloadOpenLoopTestForPMAC1

    method DownloadOpenLoopTestForPMAC1

    */
    inline void DownloadOpenLoopTestForPMAC1(int dwDevice, int motor, int magnitude, int time, int reps, bool bGatherCurrents, bool bMacro, bool& pbSuccess);

    /*
    Method DownloadPosLimitPLC

    method DownloadPosLimitPLC

    */
    inline void DownloadPosLimitPLC(int dwDevice, int motor, bool& pbSuccess);

    /*
    Method DownloadUVWSixStepTest

    method DownloadUVWSixStepTest

    */
    inline void DownloadUVWSixStepTest(int dwDevice, int motor, double pwmDutyCycle, bool& pbSuccess);

    /*
    Method DownloadVelLimitPLC

    method DownloadVelLimitPLC

    */
    inline void DownloadVelLimitPLC(int dwDevice, int motor, int maxspd, bool& pbSuccess);

    /*
    Method DownloadVoltageSixStepTest

    method DownloadVoltageSixStepTest

    */
    inline void DownloadVoltageSixStepTest(int dwDevice, int mtr, double pwmDutyCycle, bool bMacro, bool bUltra, bool& pbSuccess);

    /*
    Method Downloading

    property Downloading

    */
    inline bool Downloading(int dwDevice);

    /*
    Method GatherEnabled

    property GatherEnabled

    */
    inline bool GatherEnabled(int dwDevice, int num);

    /*
    Method GatherMode

    property GatherMode

    */
    inline DEVGATMODE GatherMode(int dwDevice);

    /*
    Method GatherPeriod

    property GatherPeriod

    */
    inline int GatherPeriod(int dwDevice);

    /*
    Method GatherSampleTime

    property GatherSampleTime

    */
    inline double GatherSampleTime(int dwDevice);

    /*
    Method GetAsciiComm

    method GetAsciiComm

    */
    inline void GetAsciiComm(int dwDevice, DEVASCIIMODE& pVal);

    /*
    Method GetBiasPos

    method GetBiasPos

    */
    inline void GetBiasPos(int dwDevice, int mtr, double scale, double& pVal);

    /*
    Method GetBitValue

    method GetBitValue

    */
    inline void GetBitValue(const QString& hexStr, int bit, bool& pVal);

    /*
    Method GetCommandLogging

    method GetCommandLogging

    */
    inline void GetCommandLogging(int dwDevice, bool& pbON);

    /*
    Method GetCommandedPos

    method GetCommandedPos

    */
    inline void GetCommandedPos(int dwDevice, int mtr, double scale, double& pVal);

    /*
    Method GetCompensationPos

    method GetCompensationPos

    */
    inline void GetCompensationPos(int dwDevice, int mtr, double scale, double& pVal);

    /*
    Method GetControlResponse

    method GetControlResponse

    */
    inline void GetControlResponse(int dwDevice, int question, QString& pAnswer);

    /*
    Method GetControlResponseEx

    method GetControlResponseEx

    */
    inline void GetControlResponseEx(int dwDevice, int question, QString& pAnswer, int& pstatus);

    /*
    Method GetControlValues

    method GetControlValues

    */
    inline void GetControlValues(int dwDevice, int ctrlCh, QVariant& pVariant, bool& pbSuccess);

    /*
    Method GetCoordStatus

    method GetCoordStatus

    */
    inline void GetCoordStatus(int dwDevice, int dwCoord, int& pStatusX, int& pStatusY, bool& pbSuccess);

    /*
    Method GetEnumeration

    method GetEnumeration

    */
    inline void GetEnumeration(int dwDevice, int& pVal);

    /*
    Method GetFeedRateAndMode

    method GetFeedRateAndMode

    */
    inline void GetFeedRateAndMode(int dwDevice, int dwCoord, double& pRate, bool& pMode);

    /*
    Method GetFirmwareType

    method GetFirmwareType

    */
    inline void GetFirmwareType(int dwDevice, DEVPMACFIRMWARETYPE& pVal);

    /*
    Method GetFirstPlc

    method GetFirstPlc

    */
    inline void GetFirstPlc(int dwDevice, bool& pbEnabled, int& pStartAdr, int& pLastAdr, int& pSize, bool& pbMore);

    /*
    Method GetFirstPlcc

    method GetFirstPlcc

    */
    inline void GetFirstPlcc(int dwDevice, bool& pbLoaded, bool& pbEnabled, int& pStartAdr, int& pLastAdr, int& pSize, bool& pbMore);

    /*
    Method GetFollowError

    method GetFollowError

    */
    inline void GetFollowError(int dwDevice, int mtr, double scale, double& pVal);

    /*
    Method GetGather

    method GetGather

    */
    inline void GetGather(int dwDevice, int num, QString& pStr, bool& pbSuccess);

    /*
    Method GetGatherPoint

    method GetGatherPoint

    */
    inline void GetGatherPoint(int dwDevice, int sourceNum, int sampleNum, double& pVal, bool& pbSuccess);

    /*
    Method GetGatherSamples

    method GetGatherSamples

    */
    inline void GetGatherSamples(int dwDevice, int sourceNum, QVariant& pVariant, bool& pbSuccess);

    /*
    Method GetGlobalStatus

    method GetGlobalStatus

    */
    inline void GetGlobalStatus(int dwDevice, int& pStatusX, int& pStatusY, bool& pbSuccess);

    /*
    Method GetIVariableDouble

    method GetIVariableDouble

    */
    inline void GetIVariableDouble(int dwDevice, int num, double def, double& pVal);

    /*
    Method GetIVariableLong

    method GetIVariableLong

    */
    inline void GetIVariableLong(int dwDevice, int num, int def, int& pVal);

    /*
    Method GetLastCommErrorStr

    method GetLastCommErrorStr

    */
    inline void GetLastCommErrorStr(int dwDevice, QString& pVal);

    /*
    Method GetLocAndEnum

    method GetLocAndEnum

    */
    inline void GetLocAndEnum(int dwDevice, int& pLoc, int& pEnum, bool& pbSuccess);

    /*
    Method GetMacroIVariableLong

    method GetMacroIVariableLong

    */
    inline void GetMacroIVariableLong(int dwDevice, int node, int num, int def, int& pVal);

    /*
    Method GetMacroIVariableString

    method GetMacroIVariableString

    */
    inline void GetMacroIVariableString(int dwDevice, int node, int num, const QString& bsDefault, QString& pbsVal);

    /*
    Method GetMacroNodeInfo

    method GetMacroNodeInfo

    */
    inline void GetMacroNodeInfo(int dwDevice, int modeNum, bool& pbEnabled, bool& pbIsIONode, int& pID);

    /*
    Method GetMacroNodes

    method GetMacroNodes

    */
    inline void GetMacroNodes(int dwDevice, int& pNumMacroStations, int& pNumActiveNodes);

    /*
    Method GetMasterPos

    method GetMasterPos

    */
    inline void GetMasterPos(int dwDevice, int mtr, double scale, double& pVal);

    /*
    Method GetMotorMotionMode

    method GetMotorMotionMode

    */
    inline void GetMotorMotionMode(int dwDevice, int dwMotor, DEVMOTION& pVal);

    /*
    Method GetMotorStatus

    method GetMotorStatus

    */
    inline void GetMotorStatus(int dwDevice, int lMotor, int& pStatusX, int& pStatusY, bool& pbSuccess);

    /*
    Method GetNTCoordinateStatusEx

    method GetNTCoordinateStatusEx

    */
    inline void GetNTCoordinateStatusEx(int dwDevice, int dwCoord, DEVCSNONTURBO*& pstatus, bool& pbSuccess);

    /*
    Method GetNTGlobalStatusEx

    method GetNTGlobalStatusEx

    */
    inline void GetNTGlobalStatusEx(int dwDevice, DEVGSNONTURBO*& pstatus, bool& pbSuccess);

    /*
    Method GetNTMotorStatusEx

    method GetNTMotorStatusEx

    */
    inline void GetNTMotorStatusEx(int dwDevice, int lMotor, DEVMSNONTURBO*& pstatus, bool& pbSuccess);

    /*
    Method GetNetActualPosition

    method GetNetActualPosition

    */
    inline void GetNetActualPosition(int dwDevice, int mtr, double scale, double& pVal);

    /*
    Method GetNextPlc

    method GetNextPlc

    */
    inline void GetNextPlc(int dwDevice, bool& pbEnabled, int& pStartAdr, int& pLastAdr, int& pSize, bool& pbMore);

    /*
    Method GetNextPlcc

    method GetNextPlcc

    */
    inline void GetNextPlcc(int dwDevice, bool& pbLoaded, bool& pbEnabled, int& pStartAdr, int& pLastAdr, int& pSize, bool& pbMore);

    /*
    Method GetNumDeviceKeys

    method GetNumDeviceKeys

    */
    inline void GetNumDeviceKeys(int& pVal);

    /*
    Method GetNumGatherSamples

    method GetNumGatherSamples

    */
    inline void GetNumGatherSamples(int dwDevice, int& pVal);

    /*
    Method GetNumGatherSources

    method GetNumGatherSources

    */
    inline void GetNumGatherSources(int dwDevice, int& pVal);

    /*
    Method GetPlcStatus

    method GetPlcStatus

    */
    inline void GetPlcStatus(int dwDevice, int& pNumPlc, int& pNumPlcc, int& pI5);

    /*
    Method GetPlcStatusStruct

    method GetPlcStatusStruct

    */
    inline void GetPlcStatusStruct(int dwDevice, DEVTOTAL_PLC_STATUS_STRUCT*& pStruct, int& pPrograms);

    /*
    Method GetPlcStatusStructure

    method GetPlcStatusStructure

    */
    inline void GetPlcStatusStructure(int dwDevice, QVariant& pVal, int& pPrograms);

    /*
    Method GetPmacLocation

    method GetPmacLocation

    */
    inline void GetPmacLocation(int dwDevice, DEVLOCATIONTYPE& pVal);

    /*
    Method GetPmacType

    method GetPmacType

    */
    inline void GetPmacType(int dwDevice, DEVPMACTYPE& pVal);

    /*
    Method GetPosition

    method GetPosition

    */
    inline void GetPosition(int dwDevice, int mtr, double scale, double& pVal);

    /*
    Method GetProgExecPoint

    method GetProgExecPoint

    */
    inline void GetProgExecPoint(int dwDevice, int dwCoord, int& pVal);

    /*
    Method GetProgramInfo

    method GetProgramInfo

    */
    inline void GetProgramInfo(int dwDevice, bool bPlc, int num, int& pSAdr, int& pFAdr);

    /*
    Method GetProgramMode

    method GetProgramMode

    */
    inline void GetProgramMode(int dwDevice, int dwCoord, DEVPROGRAMMODE& pVal);

    /*
    Method GetProgramMotionMode

    method GetProgramMotionMode

    */
    inline void GetProgramMotionMode(int dwDevice, int dwCoord, DEVMOTIONMODE& pVal);

    /*
    Method GetResponse

    method GetResponse

    */
    inline void GetResponse(int dwDevice, const QString& question, QString& pAnswer);

    /*
    Method GetResponseEx

    method GetResponseEx

    */
    inline void GetResponseEx(int dwDevice, const QString& question, bool bAddLF, QString& pAnswer, int& pstatus);

    /*
    Method GetResponseProgress

    method GetResponseProgress

    */
    inline void GetResponseProgress(int dwDevice, const QString& question, bool bAddLF, QString& pAnswer, int& pstatus);

    /*
    Method GetRomDate

    method GetRomDate

    */
    inline void GetRomDate(int dwDevice, QString& pVal);

    /*
    Method GetRomVersion

    method GetRomVersion

    */
    inline void GetRomVersion(int dwDevice, QString& pVal);

    /*
    Method GetRotBufFull

    method GetRotBufFull

    */
    inline void GetRotBufFull(int dwDevice, int dwCoord, bool& pVal);

    /*
    Method GetTargetPos

    method GetTargetPos

    */
    inline void GetTargetPos(int dwDevice, int mtr, double scale, double& pVal);

    /*
    Method GetTurboCoordinateStatusEx

    method GetTurboCoordinateStatusEx

    */
    inline void GetTurboCoordinateStatusEx(int dwDevice, int dwCoord, DEVCSTURBO*& pstatus, bool& pbSuccess);

    /*
    Method GetTurboGlobalStatusEx

    method GetTurboGlobalStatusEx

    */
    inline void GetTurboGlobalStatusEx(int dwDevice, DEVGSTURBO*& pstatus, bool& pbSuccess);

    /*
    Method GetTurboMotorStatusEx

    method GetTurboMotorStatusEx

    */
    inline void GetTurboMotorStatusEx(int dwDevice, int lMotor, DEVMSTURBO*& pstatus, bool& pbSuccess);

    /*
    Method GetVariableDouble

    method GetVariableDouble

    */
    inline void GetVariableDouble(int dwDevice, int ch, int num, double def, double& pVal, bool& pbSuccess);

    /*
    Method GetVariableLong

    method GetVariableLong

    */
    inline void GetVariableLong(int dwDevice, int ch, int num, int def, int& pVal, bool& pbSuccess);

    /*
    Method GetVariableStr

    method GetVariableStr

    */
    inline void GetVariableStr(int dwDevice, int ch, int num, QString& pVal, bool& pbSuccess);

    /*
    Method GetVelocity

    method GetVelocity

    */
    inline void GetVelocity(int dwDevice, int mtr, double scale, double& pVal);

    /*
    Method GetWhyCSNotMoving

    method GetWhyCSNotMoving

    */
    inline void GetWhyCSNotMoving(int dwDevice, int cs, int& pVal);

    /*
    Method GetWhyCSNotMovingStr

    method GetWhyCSNotMovingStr

    */
    inline void GetWhyCSNotMovingStr(int err, QString& pVal);

    /*
    Method GetWhyMotorNotMoving

    method GetWhyMotorNotMoving

    */
    inline void GetWhyMotorNotMoving(int dwDevice, int motor, int& pVal);

    /*
    Method GetWhyMotorNotMovingStr

    method GetWhyMotorNotMovingStr

    */
    inline void GetWhyMotorNotMovingStr(int err, QString& pVal);

    /*
    Method InBootStrapMode

    property InBootStrapMode

    */
    inline bool InBootStrapMode(int dwDevice);

    /*
    Method InitGather

    method InitGather

    */
    inline void InitGather(int dwDevice, int size, double msec, bool& pbSuccess);

    /*
    Method InitPlotGather

    method InitPlotGather

    */
    inline void InitPlotGather(int dwDevice, int size, int period, bool& pbSuccess);

    /*
    Method InterruptMask

    property InterruptMask

    */
    inline int InterruptMask(int dwDevice);

    /*
    Method InterruptsEnabled

    property InterruptsEnabled

    */
    inline bool InterruptsEnabled(int dwDevice);

    /*
    Method IsAnyPlcRunning

    property IsAnyPlcRunning

    */
    inline bool IsAnyPlcRunning(int dwDevice);

    /*
    Method IsTurbo

    property IsTurbo

    */
    inline bool IsTurbo(int dwDevice);

    /*
    Method LastCommError

    property LastCommError

    */
    inline int LastCommError(int dwDevice);

    /*
    Method LowPassFilterTheData

    method LowPassFilterTheData

    */
    inline void LowPassFilterTheData(QVariant& pvData, const QString& bsCurrent);

    /*
    Method MagEstimation

    method MagEstimation

    */
    inline void MagEstimation(int dwDevice, const QString& filePath, bool& pbSuccess);

    /*
    Method MapDeviceNumToEnum

    method MapDeviceNumToEnum

    */
    inline void MapDeviceNumToEnum(int location, int enumeration, int& pDeviceNumber);

    /*
    Method MapLocAndEnumFromDeviceNum

    method MapLocAndEnumFromDeviceNum

    */
    inline void MapLocAndEnumFromDeviceNum(int dwDevice, int& pLocation, int& pEnumeration);

    /*
    Method ModBusCommand

    method ModBusCommand

    */
    inline void ModBusCommand(int dwDevice, uint command, QVariant& counters, bool& pbSuccess);

    /*
    Method ModbusActive

    method ModbusActive

    */
    inline void ModbusActive(int dwDevice, bool& pbSuccess);

    /*
    Method ModbusAvailable

    method ModbusAvailable

    */
    inline void ModbusAvailable(int dwDevice, uint command, bool& pbSuccess);

    /*
    Method MotionBufOpen

    property MotionBufOpen

    */
    inline bool MotionBufOpen(int dwDevice);

    /*
    Method MotionBufferOpen

    property MotionBufferOpen

    */
    inline bool MotionBufferOpen(int dwDevice);

    /*
    Method MotorAmpEnabled

    property MotorAmpEnabled

    */
    inline bool MotorAmpEnabled(int dwDevice, int mtr);

    /*
    Method MotorAmpFault

    property MotorAmpFault

    */
    inline bool MotorAmpFault(int dwDevice, int mtr);

    /*
    Method MotorDataBlockError

    property MotorDataBlockError

    */
    inline bool MotorDataBlockError(int dwDevice, int mtr);

    /*
    Method MotorEnabled

    property MotorEnabled

    */
    inline bool MotorEnabled(int dwDevice, int mtr);

    /*
    Method MotorFatalFError

    property MotorFatalFError

    */
    inline bool MotorFatalFError(int dwDevice, int mtr);

    /*
    Method MotorHandwheelEnabled

    property MotorHandwheelEnabled

    */
    inline bool MotorHandwheelEnabled(int dwDevice, int mtr);

    /*
    Method MotorHomeComplete

    property MotorHomeComplete

    */
    inline bool MotorHomeComplete(int dwDevice, int mtr);

    /*
    Method MotorInPosition

    property MotorInPosition

    */
    inline bool MotorInPosition(int dwDevice, int mtr);

    /*
    Method MotorOnNegLimit

    property MotorOnNegLimit

    */
    inline bool MotorOnNegLimit(int dwDevice, int mtr);

    /*
    Method MotorOnPosLimit

    property MotorOnPosLimit

    */
    inline bool MotorOnPosLimit(int dwDevice, int mtr);

    /*
    Method MotorOnPositionLimit

    property MotorOnPositionLimit

    */
    inline bool MotorOnPositionLimit(int dwDevice, int mtr);

    /*
    Method MotorOpenLoop

    property MotorOpenLoop

    */
    inline bool MotorOpenLoop(int dwDevice, int mtr);

    /*
    Method MotorPhased

    property MotorPhased

    */
    inline bool MotorPhased(int dwDevice, int mtr);

    /*
    Method MotorWarnFError

    property MotorWarnFError

    */
    inline bool MotorWarnFError(int dwDevice, int mtr);

    /*
    Method MultiDownload

    method MultiDownload

    */
    inline void MultiDownload(int dwDevice, const QString& outFile, const QString& iniFile, const QString& userID, bool bMacro, bool bMap, bool bLog, bool bDnld, bool& pbSuccess);

    /*
    Method Open

    method Open

    */
    inline void Open(int dwDevice, bool& pbSuccess);

    /*
    Method PhaseMotor

    method PhaseMotor

    */
    inline void PhaseMotor(int dwDevice, const QString& question, int& pStatuss);

    /*
    Method PmacReset

    method PmacReset, Issues a $$$ command to the PMAC

    */
    inline void PmacReset(int dwDevice, const QString& question, bool bAsciiRingComm, int& pstatus);

    /*
    Method PmacSave

    method PmacSave, Issues a SAVE command to the PMAC

    */
    inline void PmacSave(int dwDevice, const QString& question, int& pstatus);

    /*
    Method ProgramContMotion

    property ProgramContMotion

    */
    inline bool ProgramContMotion(int dwDevice, int dwCoord);

    /*
    Method ProgramContRequest

    property ProgramContRequest

    */
    inline bool ProgramContRequest(int dwDevice, int dwCoord);

    /*
    Method ProgramFeedMode

    property ProgramFeedMode

    */
    inline bool ProgramFeedMode(int dwDevice, int dwCoord);

    /*
    Method ProgramRemaining

    property ProgramRemaining

    */
    inline int ProgramRemaining(int dwDevice, int dwCoord);

    /*
    Method ProgramRunning

    property ProgramRunning

    */
    inline bool ProgramRunning(int dwDevice, int dwCoord);

    /*
    Method ProgramStepping

    property ProgramStepping

    */
    inline bool ProgramStepping(int dwDevice, int dwCoord);

    /*
    Method RawGetControlResponseEx

    method RawGetControlResponseEx

    */
    inline void RawGetControlResponseEx(int dwDevice, int question, QString& pAnswer, int& pstatus);

    /*
    Method RawGetResponseEx

    method RawGetResponseEx

    */
    inline void RawGetResponseEx(int dwDevice, const QString& question, bool bAddLF, QString& pAnswer, int& pstatus);

    /*
    Method ReadGatherFile

    method ReadGatherFile

    */
    inline void ReadGatherFile(int dwDevice, const QString& bsFilePath, bool& pbSuccess);

    /*
    Method ReadResultsFromCurrentFeedbackTest

    method ReadResultsFromCurrentFeedbackTest

    */
    inline void ReadResultsFromCurrentFeedbackTest(int dwDevice, int mtr, int& pVal);

    /*
    Method ReadResultsFromSixStepTest

    method ReadResultsFromSixStepTest

    */
    inline void ReadResultsFromSixStepTest(int dwDevice, bool bSipFirstStep, QVariant& pvStepArray, int& pResult);

    /*
    Method ReadResultsFromUVWSixStepTest

    method ReadResultsFromUVWSixStepTest

    */
    inline void ReadResultsFromUVWSixStepTest(int dwDevice, QVariant& pvArray, int& pResult);

    /*
    Method RemoveDownloadFile

    method RemoveDownloadFile

    */
    inline void RemoveDownloadFile(int dwDevice, const QString& iniFile, const QString& userID, const QString& dlFile, bool& pbSuccess);

    /*
    Method RenumberFiles

    method RenumberFiles

    */
    inline void RenumberFiles(int dwDevice, int fileNumber, const QString& iniFile);

    /*
    Method RestoreLinkList

    method RestoreLinkList

    */
    inline void RestoreLinkList(const QString& firmwareVersion, bool& pbSuccess);

    /*
    Method RestoreModifiedIVars

    method RestoreModifiedIVars

    */
    inline void RestoreModifiedIVars(int dwDevice, int motor);

    /*
    Method RotaryBufferOpen

    property RotaryBufferOpen

    */
    inline bool RotaryBufferOpen(int dwDevice);

    /*
    Method SelectDevice

    method SelectDevice

    */
    inline void SelectDevice(int hWindow, int& pDeviceNumber, bool& pbSuccess);

    /*
    Method SendCommand

    method SendCommand

    */
    inline void SendCommand(int dwDevice, const QString& cmd, int& pstatus);

    /*
    Method SetAsciiComm

    method SetAsciiComm

    */
    inline void SetAsciiComm(int dwDevice, PCOMMSERVERLib::DEVASCIIMODE newVal);

    /*
    Method SetChecksums

    method SetChecksums

    */
    inline void SetChecksums(int dwDevice, bool bActive);

    /*
    Method SetCommandLogging

    method SetCommandLogging

    */
    inline void SetCommandLogging(int dwDevice, bool bOn, const QString& bsFilePath, bool& pbSuccess);

    /*
    Method SetCriticalIVars

    method SetCriticalIVars

    */
    inline void SetCriticalIVars(int dwDevice, bool& pbSuccess);

    /*
    Method SetCurrentGather

    method SetCurrentGather

    */
    inline void SetCurrentGather(int dwDevice, int mask, bool bEnable, bool& pbSuccess);

    /*
    Method SetDPRCoordRptEnabled
    */
    inline void SetDPRCoordRptEnabled(int dwDevice, bool rhs);

    /*
    Method SetDPRCoordRptMSec
    */
    inline void SetDPRCoordRptMSec(int dwDevice, int rhs);

    /*
    Method SetDPRCoordRptMax
    */
    inline void SetDPRCoordRptMax(int dwDevice, int rhs);

    /*
    Method SetDPRMotorRptEnabled
    */
    inline void SetDPRMotorRptEnabled(int dwDevice, bool rhs);

    /*
    Method SetDPRMotorRptMSec
    */
    inline void SetDPRMotorRptMSec(int dwDevice, int rhs);

    /*
    Method SetDPRMotorRptMask
    */
    inline void SetDPRMotorRptMask(int dwDevice, int rhs);

    /*
    Method SetDoChecksums
    */
    inline void SetDoChecksums(int dwDevice, bool rhs);

    /*
    Method SetGather

    method SetGather

    */
    inline void SetGather(int dwDevice, int num, const QString& str, bool bEnable, bool& pbSuccess);

    /*
    Method SetGatherEnabled
    */
    inline void SetGatherEnabled(int dwDevice, int num, bool rhs);

    /*
    Method SetGatherMode
    */
    inline void SetGatherMode(int dwDevice, PCOMMSERVERLib::DEVGATMODE rhs);

    /*
    Method SetGatherPeriod
    */
    inline void SetGatherPeriod(int dwDevice, int rhs);

    /*
    Method SetGatherSampleTime
    */
    inline void SetGatherSampleTime(int dwDevice, double rhs);

    /*
    Method SetIVarForFeedback

    method SetIVarForFeedback

    */
    inline void SetIVarForFeedback(int dwDevice, int ivar, int address, PCOMMSERVERLib::DEVFEEDBACKTYPE fbType, bool& pbSuccess);

    /*
    Method SetIVariableDouble

    method SetIVariableDouble

    */
    inline void SetIVariableDouble(int dwDevice, int num, double newVal);

    /*
    Method SetIVariableLong

    method SetIVariableLong

    */
    inline void SetIVariableLong(int dwDevice, int num, int newVal);

    /*
    Method SetInterruptMask
    */
    inline void SetInterruptMask(int dwDevice, int rhs);

    /*
    Method SetInterruptsEnabled
    */
    inline void SetInterruptsEnabled(int dwDevice, bool rhs);

    /*
    Method SetJogReturn

    method SetJogReturn

    */
    inline void SetJogReturn(int dwDevice, int mtr);

    /*
    Method SetMacroIVariableString

    method SetMacroIVariableString

    */
    inline void SetMacroIVariableString(int dwDevice, int node, int num, const QString& bsMIVarValue, bool& pbSuccess);

    /*
    Method SetQuickGather

    method SetQuickGather

    */
    inline void SetQuickGather(int dwDevice, int lComMask, int lEncMask, int lDacMask, int lCurMask, bool bEnable, bool& pbSuccess);

    /*
    Method SetQuickGatherWithDirectCurrent

    method SetQuickGatherWithDirectCurrent

    */
    inline void SetQuickGatherWithDirectCurrent(int dwDevice, int lComMask, int lEncMask, int lDacMask, int lCurMask, bool bEnable, bool& pbSuccess);

    /*
    Method SetUSMonitoringEnabled
    */
    inline void SetUSMonitoringEnabled(int dwDevice, bool rhs);

    /*
    Method SetUSMonitoringPeriod
    */
    inline void SetUSMonitoringPeriod(int dwDevice, int rhs);

    /*
    Method SetVariableDouble

    method SetVariableDouble

    */
    inline void SetVariableDouble(int dwDevice, int ch, int num, double newVal, bool& pbSuccess);

    /*
    Method SetVariableLong

    method SetVariableLong

    */
    inline void SetVariableLong(int dwDevice, int ch, int num, int newVal, bool& pbSuccess);

    /*
    Method SlopeEstimation

    method SlopeEstimation

    */
    inline void SlopeEstimation(int dwDevice, const QString& filePath, bool& pbSuccess);

    /*
    Method StartGather

    method StartGather

    */
    inline void StartGather(int dwDevice, bool& pbSuccess);

    /*
    Method StopGather

    method StopGather

    */
    inline void StopGather(int dwDevice);

    /*
    Method SysAmpFaultError

    property SysAmpFaultError

    */
    inline bool SysAmpFaultError(int dwDevice, int dwCoord);

    /*
    Method SysCircleRadError

    property SysCircleRadError

    */
    inline bool SysCircleRadError(int dwDevice, int dwCoord);

    /*
    Method SysFatalFError

    property SysFatalFError

    */
    inline bool SysFatalFError(int dwDevice, int dwCoord);

    /*
    Method SysInposition

    property SysInposition

    */
    inline bool SysInposition(int dwDevice, int dwCoord);

    /*
    Method SysMemChecksumError

    property SysMemChecksumError

    */
    inline bool SysMemChecksumError(int dwDevice);

    /*
    Method SysPromChecksumError

    property SysPromChecksumError

    */
    inline bool SysPromChecksumError(int dwDevice);

    /*
    Method SysReEntryError

    property SysReEntryError

    */
    inline bool SysReEntryError(int dwDevice);

    /*
    Method SysRuntimeError

    property SysRuntimeError

    */
    inline bool SysRuntimeError(int dwDevice, int dwCoord);

    /*
    Method SysServoError

    property SysServoError

    */
    inline bool SysServoError(int dwDevice);

    /*
    Method SysWarnFError

    property SysWarnFError

    */
    inline bool SysWarnFError(int dwDevice, int dwCoord);

    /*
    Method TimRemInMove

    property TimRemInMove

    */
    inline int TimRemInMove(int dwDevice, int dwCoord);

    /*
    Method TimeRemInTATS

    property TimeRemInTATS

    */
    inline int TimeRemInTATS(int dwDevice, int dwCoord);

    /*
    Method USMonitoringEnabled

    property USMonitoringEnabled

    */
    inline bool USMonitoringEnabled(int dwDevice);

    /*
    Method USMonitoringPeriod

    property USMonitoringPeriod

    */
    inline int USMonitoringPeriod(int dwDevice);

    /*
    Method UltraLightAnalyze

    method UltraLightAnalyze

    */
    inline void UltraLightAnalyze(int dwDevice, QVariant& pVal, int& pActiveNodes);

    /*
    Method UltraLightAnalyzeStruct

    method UltraLightAnalyzeStruct

    */
    inline void UltraLightAnalyzeStruct(int dwDevice, DEVULTRALIGHT_INFO*& pStruct, int& pActiveNodes);

    /*
    Method Upload

    method Upload

    */
    inline void Upload(int dwDevice, PCOMMSERVERLib::DEVUPLOAD pUpload, QString& pData, int& pstatus);

    /*
    Method UploadMacroConfig

    method UploadMacroConfig

    */
    inline void UploadMacroConfig(int dwDevice, const QString& bsFilePath, bool& pbSuccess);

    /*
    Method WriteGatherFile

    method WriteGatherFile

    */
    inline void WriteGatherFile(int dwDevice, const QString& bsFilePath, bool& pbSuccess);

    /*
    Method get_DPRTesting

    method get_DPRTesting

    */
    inline bool get_DPRTesting(int dwDevice);

    /*
    Method strto32f

    Converts a PMAC IEEE 32-bit floating point (F:) to a double

    */
    inline void strto32f(const QString& str, double& pVal);

    /*
    Method strtod24

    Converts a PMAC 24 bit integer. ('X:','Y:') to a double

    */
    inline void strtod24(const QString& str, double& pVal);

    /*
    Method strtod32dp

    Converts a PMACIEEE 32-bit integer (2's compliment) ('DP:') to a double

    */
    inline void strtod32dp(const QString& str, double& pVal);

    /*
    Method strtod48f

    Converts a PMAC 48 bit L: string to a double

    */
    inline void strtod48f(const QString& str, double& pVal);

    /*
    Method strtod48l

    Converts a PMAC 48-bit D: string to a double

    */
    inline void strtod48l(const QString& str, double& pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// skipping event interface _IPmacDeviceEvents

class PCOMMSERVERLIB_EXPORT IPmacNC : public QAxObject
{
public:
    IPmacNC(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Method AddErrorRecord

    method AddErrRecord

    */
    inline void AddErrorRecord(int Control, int errnum, PCOMMSERVERLib::NCERRORMODE em, PCOMMSERVERLib::NCERRORTYPE et, int Line, int ax, const QString& Msg);

    /*
    Method AutoSetToolOffset

    method AutoSetToolOffset

    */
    inline void AutoSetToolOffset(int Control, int coord, int tool, int axis);

    /*
    Method AutoSetWorkOffset

    method AutoSetWorkOffset

    */
    inline void AutoSetWorkOffset(int Control, int coord, int axis, PCOMMSERVERLib::NCCOORDTYPE t, bool& pbSuccess);

    /*
    Method AxisSelect

    property AxisSelect

    */
    inline NCAXISSELECT AxisSelect(int Control, int coord);

    /*
    Method BlockDelete

    property BlockDelete

    */
    inline bool BlockDelete(int Control);

    /*
    Method BlocksPerSecond

    property BlocksPerSecond

    */
    inline int BlocksPerSecond(int Control, int coord);

    /*
    Method BufferMode

    property BufferMode

    */
    inline NCBUFFERMODE BufferMode(int Control, int coord);

    /*
    Method ClearOffsetValue

    method ClearOffsetValue

    */
    inline void ClearOffsetValue(int Control, int coord, int axis, PCOMMSERVERLib::NCCOORDTYPE t, bool bMetric, double newVal, bool& pbSuccess);

    /*
    Method ClearTextBuffer

    method ClearTextBuffer

    */
    inline void ClearTextBuffer(int Control, int coord);

    /*
    Method Close

    method Close

    */
    inline void Close(int Control);

    /*
    Method CloseFile

    method CloseFile

    */
    inline void CloseFile(int Control, int dwCoord, bool& pbSuccess);

    /*
    Method CoolantSelect

    property CoolantSelect

    */
    inline NCCLNTSELECT CoolantSelect(int Control);

    /*
    Method CoordSystem

    property CoordSystem

    */
    inline int CoordSystem(int Control);

    /*
    Method CurrentErrorCount

    property CurrentErrorCount

    */
    inline int CurrentErrorCount(int Control);

    /*
    Method CurrentErrorLevel

    property CurrentErrorLevel

    */
    inline NCERRORMODE CurrentErrorLevel(int Control);

    /*
    Method CurrentToolHolderNumber

    property CurrentToolHolderNumber

    */
    inline int CurrentToolHolderNumber(int Control, int coord);

    /*
    Method CurrentToolNumber

    property CurrentToolNumber

    */
    inline int CurrentToolNumber(int Control, int coord);

    /*
    Method DataCollect

    method DataCollect

    */
    inline void DataCollect(int Control, int coord, QList<NCDATA>*& pvArray, bool& pbSuccess);

    /*
    Method DataCollectionEnabled

    property DataCollectionEnabled

    */
    inline bool DataCollectionEnabled(int Control);

    /*
    Method DataCollectionResolution

    property DataResolution

    */
    inline int DataCollectionResolution(int Control);

    /*
    Method DeviceNumber

    property DeviceNumber

    */
    inline int DeviceNumber(int Control);

    /*
    Method DistanceSelect

    property DistanceSelect

    */
    inline NCSPEEDSELECT DistanceSelect(int Control);

    /*
    Method DryRun

    property DryRun

    */
    inline bool DryRun(int Control, int coord);

    /*
    Method FeedrateOverride

    property FeedrateOverride

    */
    inline double FeedrateOverride(int Control, int coord);

    /*
    Method GetActiveGCode

    method GetActiveGCode

    */
    inline void GetActiveGCode(int Control, int coord, int group, double& pVal);

    /*
    Method GetActiveGCodeStr

    method GetActiveGCodeStr

    */
    inline void GetActiveGCodeStr(int Control, int coord, int group, QString& pVal);

    /*
    Method GetAllAxisPos

    method GetAllAxisPos

    */
    inline void GetAllAxisPos(int Control, int coord, PCOMMSERVERLib::NCPOSTYPE t, QStringList& pvAdrArray, QVariantList*& pvPosArray, bool& pbSuccess);

    /*
    Method GetAllAxisPosStr

    method GetAllAxisPosStr

    */
    inline void GetAllAxisPosStr(int Control, int coord, PCOMMSERVERLib::NCPOSTYPE t, bool bCoord, QStringList& pvArray, bool& pbSuccess);

    /*
    Method GetAxisEnabled

    method GetAxisEnabled

    */
    inline void GetAxisEnabled(int Control, int coord, int axis, bool& pVal);

    /*
    Method GetAxisFormat

    method GetAxisFormat

    */
    inline void GetAxisFormat(int Control, int coord, int ax, bool bMetric, int& pLen, int& pDecPlaces);

    /*
    Method GetAxisFormatStr

    method GetAxisFormatStr

    */
    inline void GetAxisFormatStr(int Control, int coord, int ax, bool bMetric, QString& pVal);

    /*
    Method GetAxisMotor

    method GetAxisMotor

    */
    inline void GetAxisMotor(int Control, int coord, int axis, int& pMotor, bool& pbSuccess);

    /*
    Method GetBufferOpen

    method GetBufferOpen

    */
    inline void GetBufferOpen(int Control, bool& pVal);

    /*
    Method GetBufferRemaining

    method GetBufferRemaining

    */
    inline void GetBufferRemaining(int Control, int coord, int& pRemain, int& pParsed);

    /*
    Method GetBufferText

    method GetMDIBufferText

    */
    inline void GetBufferText(int Control, int coord, bool bMDI, QString& pVal);

    /*
    Method GetCommandLong

    method GetCommandLong

    */
    inline void GetCommandLong(int Control, int num, int& pVal);

    /*
    Method GetCompOffset

    method GetCompOffset

    */
    inline void GetCompOffset(int Control, int coord, int& pVal);

    /*
    Method GetCurrentGValue

    method GetCurrentGValue

    */
    inline void GetCurrentGValue(int Control, int coord, int group, int& pVal);

    /*
    Method GetCurrentLabel

    method GetCurrentLabel

    */
    inline void GetCurrentLabel(int Control, int coord, int& pVal);

    /*
    Method GetCycleCuttingTime

    method GetCycleCuttingTime

    */
    inline void GetCycleCuttingTime(int Control, int& pHours, int& pMinutes, int& pSeconds);

    /*
    Method GetCycleTime

    method GetCycleTime

    */
    inline void GetCycleTime(int Control, int& pHours, int& pMinutes, int& Seconds);

    /*
    Method GetFeedrate

    method GetFeedrate

    */
    inline void GetFeedrate(int Control, int coord, NCFEEDRATEMODE& pMode, double& pVal);

    /*
    Method GetFirstError

    method GetFirstError

    */
    inline void GetFirstError(int Control, QString& pHeader, QString& pMessage, QString& pCode, QString& pFilename, int& pCount, int& pChanged);

    /*
    Method GetHandleStep

    method GetHandleStep

    */
    inline void GetHandleStep(int Control, int coord, double& pVal);

    /*
    Method GetInposition

    method GetInposition

    */
    inline void GetInposition(int Control, int coord, bool& pVal);

    /*
    Method GetInputLong

    method GetInputLong

    */
    inline void GetInputLong(int Control, int num, int& pVal);

    /*
    Method GetJogStep

    method GetJogStep

    */
    inline void GetJogStep(int Control, int coord, double& pVal);

    /*
    Method GetLatheSetXDiameter

    method GetLatheSetXDiameter

    */
    inline void GetLatheSetXDiameter(int Control, int coord, bool bMetric, double& pVal);

    /*
    Method GetMachineMode

    method GetMachineMode

    */
    inline void GetMachineMode(int Control, NCMODE& pMode);

    /*
    Method GetMaxFeedrates

    method GetMaxFeedrates

    */
    inline void GetMaxFeedrates(int Control, int coord, double& pMaxPerRev, double& pMaxPerMinute);

    /*
    Method GetMetricInput

    method GetMetricInput

    */
    inline void GetMetricInput(int Control, int coord, bool& pVal);

    /*
    Method GetMotorAxis

    method GetMotorAxis

    */
    inline void GetMotorAxis(int Control, int coord, int motor, int& pAxis, bool& pbSuccess);

    /*
    Method GetMotorPos

    method GetMotorPos

    */
    inline void GetMotorPos(int Control, int coord, int motor, PCOMMSERVERLib::NCPOSTYPE t, QString& pAdr, double& pPos, bool& pbSuccess);

    /*
    Method GetMotorPosStr

    method GetMotorPosStr

    */
    inline void GetMotorPosStr(int Control, int coord, int motor, PCOMMSERVERLib::NCPOSTYPE t, bool bCombined, QString& pAdr, QString& pPos, bool& pbSuccess);

    /*
    Method GetMotorUnitsStr

    method GetMotorUnitsStr

    */
    inline void GetMotorUnitsStr(int Control, int coord, int motor, QString& pVal, bool& pbSuccess);

    /*
    Method GetNextError

    method GetNextError

    */
    inline void GetNextError(int Control, QString& pHeader, QString& pMessage, QString& pCode, QString& pFilename, bool& pbMore);

    /*
    Method GetNumDisplayAxisTotal

    method GetNumDisplayAxisTotal

    */
    inline void GetNumDisplayAxisTotal(int Control, int& pVal);

    /*
    Method GetNumDisplayedAxis

    method GetNumDisplayedAxis

    */
    inline void GetNumDisplayedAxis(int Control, int coord, int& pVal);

    /*
    Method GetNumOfTools

    method GetNumOfTools

    */
    inline void GetNumOfTools(int Control, int coord, int& pVal);

    /*
    Method GetOffsetValue

    method GetOffsetValue

    */
    inline void GetOffsetValue(int Control, int coord, int axis, PCOMMSERVERLib::NCCOORDTYPE t, bool bMetric, double& pVal);

    /*
    Method GetOperatingTime

    method GetOperatingTime

    */
    inline void GetOperatingTime(int Control, int& pDays, int& pHours, int& pMinutes, int& pSeconds);

    /*
    Method GetOutputLong

    method GetOutputLong

    */
    inline void GetOutputLong(int Control, int num, int& pVal);

    /*
    Method GetParametricDouble

    method GetParametricDouble

    */
    inline void GetParametricDouble(int Control, int coord, const QString& region, int index, double& pVal, bool& pbSuccess);

    /*
    Method GetPartTime

    method GetPartTime

    */
    inline void GetPartTime(int Control, int& pHours, int& pMinutes, int& pSeconds);

    /*
    Method GetProcessorClocks

    method GetProcessorClocks

    */
    inline void GetProcessorClocks(double& pIO, double& pLA, double& pParse, double& pFormat, double& pWrite);

    /*
    Method GetProgramLine

    method GetProgramLine

    */
    inline void GetProgramLine(int Control, int coord, int lineNumber, QString& pVal, bool& pbSuccess);

    /*
    Method GetProgramLines

    method GetProgramLines

    */
    inline void GetProgramLines(int Control, int coord, int start, int count, QVariant& pVal, bool& pbSuccess);

    /*
    Method GetProgramMode

    method GetProgramMode

    */
    inline void GetProgramMode(int Control, int coord, DEVPROGRAMMODE& pVal);

    /*
    Method GetProgramMotionMode

    method GetProgramMotionMode

    */
    inline void GetProgramMotionMode(int Control, int coord, DEVMOTIONMODE& pVal);

    /*
    Method GetProgramName

    method GetProgramName

    */
    inline void GetProgramName(int Control, int coord, bool bMain, QString& pVal);

    /*
    Method GetProgramNumber

    method GetProgramNumber

    */
    inline void GetProgramNumber(int Control, int coord, int& pVal);

    /*
    Method GetProgramPath

    method GetProgramPath

    */
    inline void GetProgramPath(int Control, int coord, bool bMain, QString& pVal);

    /*
    Method GetProgramStatus

    method GetProgramStatus

    */
    inline void GetProgramStatus(int Control, int coord, int& pProgID, int& pNumLines, int& pLine, int& pParseLine, int& pRepeat, int& pCount, bool& pbSuccess);

    /*
    Method GetRegistryBool

    method GetRegistryBool

    */
    inline void GetRegistryBool(int Control, const QString& section, const QString& name, bool def, bool& pVal, bool& pbSuccess);

    /*
    Method GetRegistryDouble

    method GetRegistryDouble

    */
    inline void GetRegistryDouble(int Control, const QString& section, const QString& name, double def, double& pVal, bool& pbSuccess);

    /*
    Method GetRegistryLong

    method GetRegistryDword

    */
    inline void GetRegistryLong(int Control, const QString& section, const QString& name, int def, int& pVal, bool& pbSuccess);

    /*
    Method GetRegistryString

    method GetRegistryString

    */
    inline void GetRegistryString(int Control, const QString& section, const QString& name, const QString& def, QString& pVal, bool& pbSuccess);

    /*
    Method GetRunningTime

    method GetRunningTime

    */
    inline void GetRunningTime(int Control, int& pDays, int& pHours, int& pMinutes, int& pSeconds);

    /*
    Method GetSelectedAxisChar

    method GetSelectedAxisChar

    */
    inline void GetSelectedAxisChar(int Control, int& pAxChar);

    /*
    Method GetSelectedAxisMotionMode

    method GetSelectedAxisMotionMode

    */
    inline void GetSelectedAxisMotionMode(int Control, DEVMOTIONMODE& pVal);

    /*
    Method GetSelectedBufferMode

    method GetSelectedBufferMode

    */
    inline void GetSelectedBufferMode(int Control, NCBUFFERMODE& pVal);

    /*
    Method GetSpindleActRPM

    method GetSpindleActRPM

    */
    inline void GetSpindleActRPM(int Control, int& pVal);

    /*
    Method GetStatusLong

    method GetStatusLong

    */
    inline void GetStatusLong(int Control, int num, int& pVal);

    /*
    Method GetToolData

    method GetToolData

    */
    inline void GetToolData(int Control, int coord, int tool, QVariant& pVal);

    /*
    Method GetToolDataStruct

    method GetToolDataStruct

    */
    inline void GetToolDataStruct(int Control, int coord, int tool, NCTOOL*& pStruct);

    /*
    Method GetToolGuageOffset

    method GetToolGuageOffset

    */
    inline void GetToolGuageOffset(int Control, int coord, int tool, bool bMulti, int ax, bool bMetric, double& pVal);

    /*
    Method GetToolHolderNumber

    method GetToolHolderNumber

    */
    inline void GetToolHolderNumber(int Control, int coord, int tool, int& pVal);

    /*
    Method GetToolInfo

    method GetToolInfo

    */
    inline void GetToolInfo(int Control, int coord, int& pCurrentTool, int& pNextTool, int& pHolder, int& pHolderTool);

    /*
    Method GetToolOffset

    method GetToolOffset

    */
    inline void GetToolOffset(int Control, int coord, int& pVal);

    /*
    Method GetTotalCuttingTime

    method GetTotalCuttingTime

    */
    inline void GetTotalCuttingTime(int Control, int& pDays, int& pHours, int& pMinutes, int& pSeconds);

    /*
    Method GetTypeToolOffset

    method GetTypeToolOffset

    */
    inline void GetTypeToolOffset(int Control, int coord, int tool, const QString& chAxis, PCOMMSERVERLib::NCTOOLOFSTYPE type, bool bMetric, double& pVal);

    /*
    Method GetVectorVelocity

    method GetVectorVelocity

    */
    inline void GetVectorVelocity(int Control, int coord, double& pVal);

    /*
    Method GetWorkOffset

    method GetWorkOffset

    */
    inline void GetWorkOffset(int Control, int coord, NCCOORDTYPE& t, int& pExtendedVal);

    /*
    Method HomeInProgress

    property HomeInProgress

    */
    inline bool HomeInProgress(int Control);

    /*
    Method HomeInit

    property HomeInit

    */
    inline bool HomeInit(int Control);

    /*
    Method HomeMotorMask

    property HomeMotorMask

    */
    inline int HomeMotorMask(int Control);

    /*
    Method IsDisplayed

    property IsDisplayed

    */
    inline bool IsDisplayed(int Control, int coord, int motor);

    /*
    Method IsOpen

    property IsOpen

    */
    inline bool IsOpen(int Control);

    /*
    Method IsSpindle

    property IsSpindle

    */
    inline bool IsSpindle(int Control, int coord, int motor);

    /*
    Method JogSelect

    property JogSelect

    */
    inline NCJOGSELECT JogSelect(int Control);

    /*
    Method LoadMdiBuffer

    method LoadMdiBuffer

    */
    inline void LoadMdiBuffer(int Control, int coord, int& hDlg, int idControl, int nRepeat);

    /*
    Method LoadParametricVars

    method LoadParametricVars

    */
    inline void LoadParametricVars(int Control);

    /*
    Method MachineLock

    property MachineLock

    */
    inline bool MachineLock(int Control);

    /*
    Method MachineType

    property MachineType

    */
    inline NCMACHINETYPE MachineType(int Control);

    /*
    Method NextToolNumber

    property NextToolNumber

    */
    inline int NextToolNumber(int Control, int coord);

    /*
    Method NumCoordSystems

    property NumCoordSystems

    */
    inline int NumCoordSystems(int Control);

    /*
    Method OffsetsUpdate

    method OffsetsUpdate

    */
    inline void OffsetsUpdate(int Control, int& pVal);

    /*
    Method OffsetsUpdateClear

    method OffsetsUpdateClear

    */
    inline void OffsetsUpdateClear(int Control, int clearMask);

    /*
    Method Open

    method Open

    */
    inline void Open(int Device, int Control, bool& pbSuccess);

    /*
    Method OpenFile

    method OpenFile

    */
    inline void OpenFile(int Control, int dwCoord, const QString& szFilePath, bool& pbSuccess);

    /*
    Method OptionalStop

    property OptionalStop

    */
    inline bool OptionalStop(int Control);

    /*
    Method PartsCount

    property PartsCount

    */
    inline int PartsCount(int Control);

    /*
    Method PartsRequired

    property PartsRequired

    */
    inline int PartsRequired(int Control);

    /*
    Method PartsTotal

    property PartsTotal

    */
    inline int PartsTotal(int Control);

    /*
    Method ProgramLoaded

    property ProgramLoaded

    */
    inline bool ProgramLoaded(int Control, int coord);

    /*
    Method RapidOverride

    property RapidOverride

    */
    inline double RapidOverride(int Control, int coord);

    /*
    Method ReadErrorMsgBoxText

    method ReadErrorMsgBoxText

    */
    inline void ReadErrorMsgBoxText(int Control, int index, int& pCount, QString& pText, QString& pTitle);

    /*
    Method ReadMdiBuffer

    method ReadMdiBuffer

    */
    inline void ReadMdiBuffer(int Control, int coord, int& hDlg, int idControl);

    /*
    Method ResetCycleTime

    method ResetCycleTime

    */
    inline void ResetCycleTime(int Control);

    /*
    Method ResetMsgBoxError

    method ResetMsgBoxError

    */
    inline void ResetMsgBoxError(int Control, int errRetVal);

    /*
    Method ResetPartsCount

    method ResetPartsCount

    */
    inline void ResetPartsCount(int Control);

    /*
    Method ResetPartsTotal

    method ResetPartsTotal

    */
    inline void ResetPartsTotal(int Control);

    /*
    Method SaveParametricVars

    method SaveParametricVars

    */
    inline void SaveParametricVars(int Control);

    /*
    Method SearchLine

    method SearchLine

    */
    inline void SearchLine(int Control, int coord, int Line, bool& pbSuccess);

    /*
    Method SearchText

    method SearchText

    */
    inline void SearchText(int Control, int coord, const QString& text, bool bMatchCase, bool& pbSuccess);

    /*
    Method SearchTextNext

    method SearchTextNext

    */
    inline void SearchTextNext(int Control, int coord, const QString& text, bool bMatchCase, bool& pbSuccess);

    /*
    Method Semaphore

    property Semaphore

    */
    inline int Semaphore(int Control, int coord);

    /*
    Method SetAxisFormat

    method SetAxisFormat

    */
    inline void SetAxisFormat(int Control, int coord, int ax, bool bMetric, int len, int decPlaces);

    /*
    Method SetAxisSelect
    */
    inline void SetAxisSelect(int Control, int coord, PCOMMSERVERLib::NCAXISSELECT rhs);

    /*
    Method SetBlockDelete
    */
    inline void SetBlockDelete(int Control, bool rhs);

    /*
    Method SetBufferMode
    */
    inline void SetBufferMode(int Control, int coord, PCOMMSERVERLib::NCBUFFERMODE rhs);

    /*
    Method SetBufferText

    method SetMDIBufferText

    */
    inline void SetBufferText(int Control, int coord, int repeat, bool bMDI, const QString& newVal);

    /*
    Method SetCoolantSelect
    */
    inline void SetCoolantSelect(int Control, PCOMMSERVERLib::NCCLNTSELECT rhs);

    /*
    Method SetCoordSystem
    */
    inline void SetCoordSystem(int Control, int rhs);

    /*
    Method SetCurrentErrorLevel
    */
    inline void SetCurrentErrorLevel(int Control, PCOMMSERVERLib::NCERRORMODE rhs);

    /*
    Method SetCurrentToolHolderNumber
    */
    inline void SetCurrentToolHolderNumber(int Control, int coord, int rhs);

    /*
    Method SetCurrentToolNumber
    */
    inline void SetCurrentToolNumber(int Control, int coord, int rhs);

    /*
    Method SetDistanceSelect
    */
    inline void SetDistanceSelect(int Control, PCOMMSERVERLib::NCSPEEDSELECT rhs);

    /*
    Method SetDryRun
    */
    inline void SetDryRun(int Control, int coord, bool rhs);

    /*
    Method SetFeedrate

    method SetFeedrate

    */
    inline void SetFeedrate(int Control, int coord, PCOMMSERVERLib::NCFEEDRATEMODE mode, double newVal);

    /*
    Method SetFeedrateOverride
    */
    inline void SetFeedrateOverride(int Control, int coord, double rhs);

    /*
    Method SetHomeInit
    */
    inline void SetHomeInit(int Control, bool rhs);

    /*
    Method SetHomeMotorMask
    */
    inline void SetHomeMotorMask(int Control, int rhs);

    /*
    Method SetIsDisplayed
    */
    inline void SetIsDisplayed(int Control, int coord, int motor, bool rhs);

    /*
    Method SetIsSpindle
    */
    inline void SetIsSpindle(int Control, int coord, int motor, bool rhs);

    /*
    Method SetJogSelect
    */
    inline void SetJogSelect(int Control, PCOMMSERVERLib::NCJOGSELECT rhs);

    /*
    Method SetLatheSetXDiameter

    method SetLatheSetXDiameter

    */
    inline void SetLatheSetXDiameter(int Control, int coord, bool bMetric, double newVal);

    /*
    Method SetMachineLock
    */
    inline void SetMachineLock(int Control, bool rhs);

    /*
    Method SetMachineMode

    method SetMachineMode

    */
    inline void SetMachineMode(int Control, PCOMMSERVERLib::NCMODE mode);

    /*
    Method SetMaxFeedrates

    method SetMaxFeedrates

    */
    inline void SetMaxFeedrates(int Control, int coord, double MaxPerRev, double MaxPerMinute);

    /*
    Method SetNextToolNumber
    */
    inline void SetNextToolNumber(int Control, int coord, int rhs);

    /*
    Method SetOffsetValue

    method SetOffsetValue

    */
    inline void SetOffsetValue(int Control, int coord, int axis, PCOMMSERVERLib::NCCOORDTYPE t, bool bMetric, bool bConfirm, double newVal, bool& pbSuccess);

    /*
    Method SetOptionalStop
    */
    inline void SetOptionalStop(int Control, bool rhs);

    /*
    Method SetOrigin

    method SetOrigin

    */
    inline void SetOrigin(int Control, int coord, bool bOrginAll, PCOMMSERVERLib::NCADDRESS adr, bool bClear, double Val, bool metric);

    /*
    Method SetParametricDouble

    method SetParametricDouble

    */
    inline void SetParametricDouble(int Control, int coord, const QString& region, int index, double newVal, bool& pbSuccess);

    /*
    Method SetPartsCount
    */
    inline void SetPartsCount(int Control, int rhs);

    /*
    Method SetPartsRequired
    */
    inline void SetPartsRequired(int Control, int rhs);

    /*
    Method SetPartsTotal
    */
    inline void SetPartsTotal(int Control, int rhs);

    /*
    Method SetRapidOverride
    */
    inline void SetRapidOverride(int Control, int coord, double rhs);

    /*
    Method SetRegistryBool

    method SetRegistryBool

    */
    inline void SetRegistryBool(int Control, const QString& section, const QString& name, bool bVal, bool& pbSuccess);

    /*
    Method SetRegistryDouble

    method SetRegistryDouble

    */
    inline void SetRegistryDouble(int Control, const QString& section, const QString& name, double Val, bool& pbSuccess);

    /*
    Method SetRegistryLong

    method SetRegistryDword

    */
    inline void SetRegistryLong(int Control, const QString& section, const QString& name, int lVal, bool& pbSuccess);

    /*
    Method SetRegistryString

    method SetRegistryString

    */
    inline void SetRegistryString(int Control, const QString& section, const QString& name, const QString& Val, bool& pbSuccess);

    /*
    Method SetSemaphore
    */
    inline void SetSemaphore(int Control, int coord, int rhs);

    /*
    Method SetSingleBlock
    */
    inline void SetSingleBlock(int Control, bool rhs);

    /*
    Method SetSpeedSelect
    */
    inline void SetSpeedSelect(int Control, PCOMMSERVERLib::NCSPEEDSELECT rhs);

    /*
    Method SetSpindleAtSpeed
    */
    inline void SetSpindleAtSpeed(int Control, bool rhs);

    /*
    Method SetSpindleAtZero
    */
    inline void SetSpindleAtZero(int Control, bool rhs);

    /*
    Method SetSpindleCSS
    */
    inline void SetSpindleCSS(int Control, double rhs);

    /*
    Method SetSpindleCSSMode
    */
    inline void SetSpindleCSSMode(int Control, bool rhs);

    /*
    Method SetSpindleCSSUnits
    */
    inline void SetSpindleCSSUnits(int Control, double rhs);

    /*
    Method SetSpindleCountsPerRev
    */
    inline void SetSpindleCountsPerRev(int Control, double rhs);

    /*
    Method SetSpindleDetect
    */
    inline void SetSpindleDetect(int Control, bool rhs);

    /*
    Method SetSpindleFPR
    */
    inline void SetSpindleFPR(int Control, bool rhs);

    /*
    Method SetSpindleGearRatio
    */
    inline void SetSpindleGearRatio(int Control, double rhs);

    /*
    Method SetSpindleMaxRPM
    */
    inline void SetSpindleMaxRPM(int Control, int rhs);

    /*
    Method SetSpindleOverride
    */
    inline void SetSpindleOverride(int Control, int coord, int rhs);

    /*
    Method SetSpindleRPM
    */
    inline void SetSpindleRPM(int Control, int rhs);

    /*
    Method SetSpindleSelect
    */
    inline void SetSpindleSelect(int Control, PCOMMSERVERLib::NCSPINDLESELECT rhs);

    /*
    Method SetThreadLead
    */
    inline void SetThreadLead(int Control, int coord, double rhs);

    /*
    Method SetTimebaseMode
    */
    inline void SetTimebaseMode(int Control, int coord, PCOMMSERVERLib::NCTIMEBASEMODE rhs);

    /*
    Method SetTitle
    */
    inline void SetTitle(int Control, const QString& rhs);

    /*
    Method SetToolDirection
    */
    inline void SetToolDirection(int Control, int coord, int tool, PCOMMSERVERLib::NCTOOLDIRECTION rhs);

    /*
    Method SetToolGuageOffset

    method SetToolGuageOffset

    */
    inline void SetToolGuageOffset(int Control, int coord, int tool, bool bMulti, int ax, bool bMetric, double newVal);

    /*
    Method SetToolHolderNumber

    method SetToolHolderNumber

    */
    inline void SetToolHolderNumber(int Control, int coord, int tool, int holder);

    /*
    Method SetToolInSpindle
    */
    inline void SetToolInSpindle(int Control, int coord, int rhs);

    /*
    Method SetTypeToolOffset

    method SetTypeToolOffset

    */
    inline void SetTypeToolOffset(int Control, int coord, int tool, const QString& chAxis, PCOMMSERVERLib::NCTOOLOFSTYPE type, bool bMetric, bool bConfirm, double newVal, bool& pbSuccess);

    /*
    Method SingleBlock

    property SingleBlock

    */
    inline bool SingleBlock(int Control);

    /*
    Method SpeedSelect

    property SpeedSelect

    */
    inline NCSPEEDSELECT SpeedSelect(int Control);

    /*
    Method SpindleAtSpeed

    property SpindleAtSpeed

    */
    inline bool SpindleAtSpeed(int Control);

    /*
    Method SpindleAtZero

    property SpindleAtZero

    */
    inline bool SpindleAtZero(int Control);

    /*
    Method SpindleCSS

    property SpindleCSS

    */
    inline double SpindleCSS(int Control);

    /*
    Method SpindleCSSMode

    property SpindleCSSMode

    */
    inline bool SpindleCSSMode(int Control);

    /*
    Method SpindleCSSUnits

    property SpindleCSSUnits

    */
    inline double SpindleCSSUnits(int Control);

    /*
    Method SpindleCmdRPM

    property SpindleCmdRPM

    */
    inline int SpindleCmdRPM(int Control);

    /*
    Method SpindleCountsPerRev

    property SpindleCountsPerRev

    */
    inline double SpindleCountsPerRev(int Control);

    /*
    Method SpindleDetect

    property SpindleDetect

    */
    inline bool SpindleDetect(int Control);

    /*
    Method SpindleFPR

    property SpindleFPR

    */
    inline bool SpindleFPR(int Control);

    /*
    Method SpindleGearRatio

    property SpindleGearRatio

    */
    inline double SpindleGearRatio(int Control);

    /*
    Method SpindleMaxRPM

    property SpindleMaxRPM

    */
    inline int SpindleMaxRPM(int Control);

    /*
    Method SpindleOverride

    property SpindleOverride

    */
    inline int SpindleOverride(int Control, int coord);

    /*
    Method SpindleRPM

    property SpindleRPM

    */
    inline int SpindleRPM(int Control);

    /*
    Method SpindleSelect

    property SpindleSelect

    */
    inline NCSPINDLESELECT SpindleSelect(int Control);

    /*
    Method StartDataCollection

    method StartDataCollection

    */
    inline void StartDataCollection(int Control, int CollectionMSec, int BufferSize, bool& pbSuccess);

    /*
    Method StopDataCollection

    method StopDataCollection

    */
    inline void StopDataCollection(int Control);

    /*
    Method ThreadLead

    property ThreadLead

    */
    inline double ThreadLead(int Control, int coord);

    /*
    Method TimebaseMode

    property TimebaseMode

    */
    inline NCTIMEBASEMODE TimebaseMode(int Control, int coord);

    /*
    Method Title

    property Title

    */
    inline QString Title(int Control);

    /*
    Method ToolDirection

    property ToolDirection

    */
    inline NCTOOLDIRECTION ToolDirection(int Control, int coord, int tool);

    /*
    Method ToolInSpindle

    property ToolInSpindle

    */
    inline int ToolInSpindle(int Control, int coord);

    /*
    Method UpdateAllMotors

    method UpdateAllMotors

    */
    inline void UpdateAllMotors(int Control);

    /*
    Method ZeroAllToolOffsets

    method ZeroAllToolOffsets

    */
    inline void ZeroAllToolOffsets(int Control, int coord);

    /*
    Method ZeroAllTypeToolOffsets

    method ZeroAllTypeToolOffsets

    */
    inline void ZeroAllTypeToolOffsets(int Control, int coord, PCOMMSERVERLib::NCTOOLOFSTYPE type);

    /*
    Method ZeroShift

    method ZeroShift

    */
    inline void ZeroShift(int Control, int coord, bool bShiftAll, PCOMMSERVERLib::NCADDRESS adr, bool bClear, double Val, bool bMetric);

    /*
    Method command

    method Command

    */
    inline void command(int Control, int id, int iv, double fv, const QString& bStr, bool& pbSuccess);

    /*
    Method mode

    property Title

    */
    inline NCMODE mode(int Control);

    /*
    Method setMode
    */
    inline void setMode(int Control, PCOMMSERVERLib::NCMODE rhs);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// skipping event interface _IPmacNCEvents

// Actual coclasses
class PCOMMSERVERLIB_EXPORT PmacDevice : public QAxWidget
{
public:
    PmacDevice(QWidget *parent = 0, Qt::WindowFlags f = 0)
    : QAxWidget(parent, f)
    {
        setControl(QStringLiteral("{b544d2bd-354c-456e-9e88-20f71625e7df}"));
    }

    PmacDevice(IPmacDevice *iface)
    : QAxWidget()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property MaxDownloadErrors

    property MaxDownloadErrors

    */
    inline int MaxDownloadErrors() const; //Returns the value of MaxDownloadErrors
    inline void SetMaxDownloadErrors(int value); //Sets the value of the MaxDownloadErrors property

    /*
    Method Abort

    method Abort

    */
    inline void Abort(int dwDevice);

    /*
    Method AbortDownload

    method AbortDownload

    */
    inline void AbortDownload(int dwDevice);

    /*
    Method AbortTest

    method AbortTest

    */
    inline void AbortTest(int dwDevice);

    /*
    Method AddDownloadFile

    method AddDownloadFile

    */
    inline void AddDownloadFile(int dwDevice, const QString& iniFile, const QString& userID, const QString& dlFile, bool& pbSuccess);

    /*
    Method BackupLinkList

    method BackupLinkList

    */
    inline void BackupLinkList(int dwDevice, bool& pbSuccess);

    /*
    Method BufferOpen

    property BufferOpen

    */
    inline bool BufferOpen(int dwDevice);

    /*
    Method CalculateStepStatistics

    method CalculateStepStatistics

    */
    inline void CalculateStepStatistics(QVariant& pvData, int stepSize, int I10, int I19, QString& pbsRiseTime, QString& pbsPeakTime, QString& pbsNatFreq, QString& pbsOvershoot, QString& pbsDamping, QString& pbsSettleTime);

    /*
    Method ClearGather

    method ClearGather

    */
    inline void ClearGather(int dwDevice);

    /*
    Method ClearGatherData

    method ClearGatherData

    */
    inline void ClearGatherData(int dwDevice);

    /*
    Method Close

    method Close

    */
    inline void Close(int dwDevice);

    /*
    Method CollectGatherData

    method CollectGatherData

    */
    inline void CollectGatherData(int dwDevice, int& pSources, int& pSamples, bool& pbSuccess);

    /*
    Method CommandLog

    method CommandLog

    */
    inline void CommandLog(int dwDevice, const QString& bStr, bool& pbSuccess);

    /*
    Method CompilePLCC

    method CompilePLCC

    */
    inline void CompilePLCC(int dwDevice, const QString& inFilePath, const QString& outFilePath, bool& pbSuccess);

    /*
    Method ConvertWordToLong

    method ConvertWordToLong

    */
    inline void ConvertWordToLong(const QString& word, int& pVal);

    /*
    Method ConvertWordToShort

    method ConvertWordToShort

    */
    inline void ConvertWordToShort(const QString& word, int offset, int& pVal);

    /*
    Method ConvertWordToStringFloat

    method ConvertWordToStringFloat

    */
    inline void ConvertWordToStringFloat(const QString& word, QString& pVal);

    /*
    Method CreateIncrementalFinePhasePLC

    method CreateIncrementalFinePhasePLC

    */
    inline void CreateIncrementalFinePhasePLC(int dwDevice, const QString& filePath, int PLCNumber, int motor, bool& pbSuccess);

    /*
    Method DPRAddressRange

    method DPRAddressRange

    */
    inline void DPRAddressRange(int dwDevice, bool bUpper, bool bPC, int& pVal);

    /*
    Method DPRAsciiStrToRot

    method DPRAsciiStrToRot

    */
    inline void DPRAsciiStrToRot(int dwDevice, const QString& inpstr, int bufnum, int& pstatus);

    /*
    Method DPRAsciiStrToRotEx

    method DPRAsciiStrToRotEx

    */
    inline void DPRAsciiStrToRotEx(int dwDevice, const QString& inpstr, int bufnum, bool bSendRemaining, int& pstatus);

    /*
    Method DPRAvailable

    property DPRAvailable

    */
    inline bool DPRAvailable(int dwDevice);

    /*
    Method DPRBackGroundVar

    method DPRBackGroundVar

    */
    inline void DPRBackGroundVar(int dwDevice, bool bOn);

    /*
    Method DPRBackground

    method DPRBackground

    */
    inline void DPRBackground(int dwDevice, int on, int period, int coord, bool& pbSuccess);

    /*
    Method DPRCoordRptEnabled

    property DPRCoordRptEnabled

    */
    inline bool DPRCoordRptEnabled(int dwDevice);

    /*
    Method DPRCoordRptMSec

    property DPRCoordRptMSec

    */
    inline int DPRCoordRptMSec(int dwDevice);

    /*
    Method DPRCoordRptMax

    property DPRCoordRptMax

    */
    inline int DPRCoordRptMax(int dwDevice);

    /*
    Method DPRDWordBitSet

    method DPRDWordBitSet

    */
    inline void DPRDWordBitSet(int dwDevice, int offset, int bit, bool& pVal, bool& pbSuccess);

    /*
    Method DPRFloat

    method DPRFloat

    */
    inline void DPRFloat(qlonglong d, double scale, double& pVal);

    /*
    Method DPRGetCoordRpt

    method DPRGetCoordRpt

    */
    inline void DPRGetCoordRpt(int dwDevice, int coord, DEVBGCOORD*& pStruct, int& pServo, bool& pbSuccess);

    /*
    Method DPRGetCoordRptTurbo

    method DPRGetCoordRptTurbo

    */
    inline void DPRGetCoordRptTurbo(int dwDevice, int coord, DEVBGCOORDTURBO*& pStruct, int& pServo, bool& pbSuccess);

    /*
    Method DPRGetDWordMask

    method DPRGetDWordMask

    */
    inline void DPRGetDWordMask(int dwDevice, int offset, int mask, int& pVal);

    /*
    Method DPRGetFixedDouble

    method DPRGetFixedDouble

    */
    inline void DPRGetFixedDouble(int dwDevice, int address, double& pVal, bool& pbSuccess);

    /*
    Method DPRGetFloat

    method DPRGetFloat

    */
    inline void DPRGetFloat(int dwDevice, int offset, double& pVal, bool& pbSuccess);

    /*
    Method DPRGetLong

    method DPRGetLong

    */
    inline void DPRGetLong(int dwDevice, int offset, int& pVal, bool& pbSuccess);

    /*
    Method DPRGetLongDouble

    method DPRGetLongDouble

    */
    inline void DPRGetLongDouble(int dwDevice, int address, double& pVal, bool& pbSuccess);

    /*
    Method DPRGetMem

    method DPRGetMem

    */
    inline void DPRGetMem(int dwDevice, int offset, int bytes, QVariant& pVal, bool& pbSuccess);

    /*
    Method DPRGetMotorRpt

    method DPRGetMotorRpt

    */
    inline void DPRGetMotorRpt(int dwDevice, int motor, DEVFGMOTOR*& pStruct, int& pServo, bool& pbSuccess);

    /*
    Method DPRGetMotorRptTurbo

    method DPRGetMotorRptTurbo

    */
    inline void DPRGetMotorRptTurbo(int dwDevice, int motor, DEVFGMOTORTURBO*& pStruct, int& pServo, bool& pbSuccess);

    /*
    Method DPRGetShort

    method DPRGetShort

    */
    inline void DPRGetShort(int dwDevice, int address, int& pVal, bool& pbSuccess);

    /*
    Method DPRMotorRptEnabled

    property DPRMotorRptEnabled

    */
    inline bool DPRMotorRptEnabled(int dwDevice);

    /*
    Method DPRMotorRptMSec

    property DPRMotorRptMSec

    */
    inline int DPRMotorRptMSec(int dwDevice);

    /*
    Method DPRMotorRptMask

    property DPRMotorRptMask

    */
    inline int DPRMotorRptMask(int dwDevice);

    /*
    Method DPRResetDWordBit

    method DPRResetDWordBit

    */
    inline void DPRResetDWordBit(int dwDevice, int offset, int bit, bool& pbSuccess);

    /*
    Method DPRRotBufClr

    method DPRRotBufClr

    */
    inline void DPRRotBufClr(int dwDevice, int bufnum);

    /*
    Method DPRRotBufInit

    method DPRRotBufInit

    */
    inline void DPRRotBufInit(int dwDevice, bool& pbSuccess);

    /*
    Method DPRRotBufRemove

    method DPRRotBufRemove

    */
    inline void DPRRotBufRemove(int dwDevice, int bufnum);

    /*
    Method DPRSetDWordBit

    method DPRSetDWordBit

    */
    inline void DPRSetDWordBit(int dwDevice, int offset, int bit, bool& pbSuccess);

    /*
    Method DPRSetDWordMask

    method DPRSetDWordMask

    */
    inline void DPRSetDWordMask(int dwDevice, int offset, int mask, int Val);

    /*
    Method DPRSetFloat

    method DPRSetFloat

    */
    inline void DPRSetFloat(int dwDevice, int offset, double newVal, bool& pbSuccess);

    /*
    Method DPRSetLong

    method DPRSetLong

    */
    inline void DPRSetLong(int dwDevice, int offset, int newVal, bool& pbSuccess);

    /*
    Method DPRSetMem

    method DPRSetMem

    */
    inline void DPRSetMem(int dwDevice, int offset, int bytes, const QVariant& Val, bool& pbSuccess);

    /*
    Method DPRSetRotBuf

    method DPRSetRotBuf

    */
    inline void DPRSetRotBuf(int dwDevice, bool on);

    /*
    Method DPRSetShort

    method DPRSetShort

    */
    inline void DPRSetShort(int dwDevice, int address, int newVal, bool& pbSuccess);

    /*
    Method DPRSetupBuffers

    method DPRSetupBuffers

    */
    inline void DPRSetupBuffers(uint dwDevice, bool& pbSuccess);

    /*
    Method DPRSize

    property DPRSize

    */
    inline int DPRSize(int dwDevice);

    /*
    Method DPRTest

    method DPRTest

    */
    inline void DPRTest(int dwDevice, bool& pbSuccess);

    /*
    Method DPRVarBufInit

    method DPRVarBufInit

    */
    inline void DPRVarBufInit(int dwDevice, const QVariant& vAddressArray, const QVariant& vTypeArray, int& pHandle, bool& pbSuccess);

    /*
    Method DPRVarBufRead

    method DPRVarBufRead

    */
    inline void DPRVarBufRead(int dwDevice, int h, int entryNum, QVariant& pVal, bool& pbSuccess);

    /*
    Method DPRVarBufReadAll

    method DPRVarBufReadAll

    */
    inline void DPRVarBufReadAll(int dwDevice, int h, QVariant& pVal, bool& pbSuccess);

    /*
    Method DPRVarBufRemove

    method DPRVarBufRemove

    */
    inline void DPRVarBufRemove(int dwDevice, int index, bool& pbSuccess);

    /*
    Method DPRVarBufWrite

    method DPRVarBufWrite

    */
    inline void DPRVarBufWrite(int dwDevice, const QVariant& vData, const QVariant& vAddresses, const QVariant& vTypes, int& pWritten);

    /*
    Method DPRVarBufWriteEx

    method DPRVarBufWriteEx

    */
    inline void DPRVarBufWriteEx(int dwDevice, const QVariant& vData, int& pWritten);

    /*
    Method DataCollect

    method DataCollect

    */
    inline void DataCollect(int dwDevice, QVariant& pvArray, bool& pbSuccess);

    /*
    Method DataCollectionEnabled

    property DataCollectionEnabled

    */
    inline bool DataCollectionEnabled(int dwDevice);

    /*
    Method DataCollectionResolution

    property DataResolution

    */
    inline int DataCollectionResolution(int dwDevice);

    /*
    Method DataGather

    method DataGather

    */
    inline void DataGather(int dwDevice, QList<DEVDATA>*& pvArray, bool& pbSuccess);

    /*
    Method DataStart

    method DataStart

    */
    inline void DataStart(int dwDevice, int resolution, int period);

    /*
    Method DataStop

    method DataStop

    */
    inline void DataStop(int dwDevice);

    /*
    Method DifferentiateTheData

    method DifferentiateTheData

    */
    inline void DifferentiateTheData(QVariant& pvData, int I10, int I19, int& pMinVal, int& pMaxVal);

    /*
    Method DoACurrentLoopStep

    method DoACurrentLoopStep

    */
    inline void DoACurrentLoopStep(int dwDevice, int motor, int dwellTime, int magnitude, bool bAutoTune, QString& pbsCTSCurrent, double pwmDutyCycle, int divisor, bool bUltra);

    /*
    Method DoACurrentLoopStepBrush

    method DoACurrentLoopStepBrush

    */
    inline void DoACurrentLoopStepBrush(int dwDevice, int motor, int dwellTime, int magnitude, bool bAutoTune, QString& pbsCTSCurrent, double pwmDutyCycle, int divisor, bool bUltra);

    /*
    Method DoAGantryParabolic

    method DoAGantryParabolic

    */
    inline void DoAGantryParabolic(int dwDevice, int motor, int motor2, bool& pbSuccess);

    /*
    Method DoAGantryParabolicMove

    method DoAGantryParabolicMove

    */
    inline void DoAGantryParabolicMove(int dwDevice, int motor, int motor2, int stepSize, int stepTime, bool bBiDirectional, bool& pbSuccess);

    /*
    Method DoAGantryPositionLoopStep

    method DoAGantryPositionLoopStep

    */
    inline void DoAGantryPositionLoopStep(int dwDevice, int motor, int motor2, int stepSize, int stepTime, bool bBiDirectional, bool& pbSuccess);

    /*
    Method DoAParabolicMove

    method DoAParabolicMove

    */
    inline void DoAParabolicMove(int dwDevice, int motor, int stepSize, int stepTime, bool bBiDirectional, bool& pbSuccess);

    /*
    Method DoAPositionLoopStep

    method DoAPositionLoopStep

    */
    inline void DoAPositionLoopStep(int dwDevice, int motor, int stepSize, int stepTime, bool bBiDirectional, bool& pbSuccess);

    /*
    Method DoChecksums

    property DoChecksums

    */
    inline bool DoChecksums(int dwDevice);

    /*
    Method Download

    method Download

    */
    inline void Download(int dwDevice, const QString& filePath, bool bMacro, bool bMap, bool bLog, bool bDnld, bool& pbSuccess);

    /*
    Method DownloadAndRunRoughPhasePLC

    method DownloadAndRunRoughPhasePLC

    */
    inline void DownloadAndRunRoughPhasePLC(int dwDevice, int motor, bool& pbSuccess);

    /*
    Method DownloadAutoTuningPLC

    method DownloadAutoTuningPLC

    */
    inline void DownloadAutoTuningPLC(int dwDevice, int motor, bool bCurrentLoop, bool bBypassJog, bool& pbSuccess);

    /*
    Method DownloadCurrentFeedbackTest

    method DownloadCurrentFeedbackTest

    */
    inline void DownloadCurrentFeedbackTest(int dwDevice, int mtr, double pwmDutyCycle, int pwmFreq, bool bMacro, bool bUltra, bool& pbSuccess);

    /*
    Method DownloadCurrentSixStepTest

    method DownloadCurrentSixStepTest

    */
    inline void DownloadCurrentSixStepTest(int dwDevice, int motor, double pwmDutyCycle, bool bMacro, bool bUltra, bool& pbSuccess);

    /*
    Method DownloadFile

    method DownloadFile

    */
    inline void DownloadFile(int dwDevice, const QString& filePath);

    /*
    Method DownloadFirmwareFile

    method DownloadFirmwareFile

    */
    inline void DownloadFirmwareFile(int dwDevice, const QString& filePath, bool& pbSuccess);

    /*
    Method DownloadGantryAutoTuningPLC

    method DownloadGantryAutoTuningPLC

    */
    inline void DownloadGantryAutoTuningPLC(int dwDevice, int motor, int motor2, bool bCurrentLoop, bool bBypassJog, double MaxTravel, int time, bool& pbSuccess);

    /*
    Method DownloadGantryAutoTuningPLCP1

    method DownloadGantryAutoTuningPLCP1

    */
    inline void DownloadGantryAutoTuningPLCP1(int dwDevice, int motor, int motor2, bool bCurrentLoop, bool bBypassJog, bool& pbSuccess);

    /*
    Method DownloadOpenLoopTest

    method DownloadOpenLoopTest

    */
    inline void DownloadOpenLoopTest(int dwDevice, int motor, int magnitude, int time, int reps, bool bGatherCurrents, bool bMacro, bool& pbSuccess);

    /*
    Method DownloadOpenLoopTest1

    method DownloadOpenLoopTest1

    */
    inline void DownloadOpenLoopTest1(int dwDevice, int motor, int magnitude, int time, int reps, bool bGatherCurrents, bool bMacro, bool& pbSuccess);

    /*
    Method DownloadOpenLoopTestForPMAC1

    method DownloadOpenLoopTestForPMAC1

    */
    inline void DownloadOpenLoopTestForPMAC1(int dwDevice, int motor, int magnitude, int time, int reps, bool bGatherCurrents, bool bMacro, bool& pbSuccess);

    /*
    Method DownloadPosLimitPLC

    method DownloadPosLimitPLC

    */
    inline void DownloadPosLimitPLC(int dwDevice, int motor, bool& pbSuccess);

    /*
    Method DownloadUVWSixStepTest

    method DownloadUVWSixStepTest

    */
    inline void DownloadUVWSixStepTest(int dwDevice, int motor, double pwmDutyCycle, bool& pbSuccess);

    /*
    Method DownloadVelLimitPLC

    method DownloadVelLimitPLC

    */
    inline void DownloadVelLimitPLC(int dwDevice, int motor, int maxspd, bool& pbSuccess);

    /*
    Method DownloadVoltageSixStepTest

    method DownloadVoltageSixStepTest

    */
    inline void DownloadVoltageSixStepTest(int dwDevice, int mtr, double pwmDutyCycle, bool bMacro, bool bUltra, bool& pbSuccess);

    /*
    Method Downloading

    property Downloading

    */
    inline bool Downloading(int dwDevice);

    /*
    Method GatherEnabled

    property GatherEnabled

    */
    inline bool GatherEnabled(int dwDevice, int num);

    /*
    Method GatherMode

    property GatherMode

    */
    inline DEVGATMODE GatherMode(int dwDevice);

    /*
    Method GatherPeriod

    property GatherPeriod

    */
    inline int GatherPeriod(int dwDevice);

    /*
    Method GatherSampleTime

    property GatherSampleTime

    */
    inline double GatherSampleTime(int dwDevice);

    /*
    Method GetAsciiComm

    method GetAsciiComm

    */
    inline void GetAsciiComm(int dwDevice, DEVASCIIMODE& pVal);

    /*
    Method GetBiasPos

    method GetBiasPos

    */
    inline void GetBiasPos(int dwDevice, int mtr, double scale, double& pVal);

    /*
    Method GetBitValue

    method GetBitValue

    */
    inline void GetBitValue(const QString& hexStr, int bit, bool& pVal);

    /*
    Method GetCommandLogging

    method GetCommandLogging

    */
    inline void GetCommandLogging(int dwDevice, bool& pbON);

    /*
    Method GetCommandedPos

    method GetCommandedPos

    */
    inline void GetCommandedPos(int dwDevice, int mtr, double scale, double& pVal);

    /*
    Method GetCompensationPos

    method GetCompensationPos

    */
    inline void GetCompensationPos(int dwDevice, int mtr, double scale, double& pVal);

    /*
    Method GetControlResponse

    method GetControlResponse

    */
    inline void GetControlResponse(int dwDevice, int question, QString& pAnswer);

    /*
    Method GetControlResponseEx

    method GetControlResponseEx

    */
    inline void GetControlResponseEx(int dwDevice, int question, QString& pAnswer, int& pstatus);

    /*
    Method GetControlValues

    method GetControlValues

    */
    inline void GetControlValues(int dwDevice, int ctrlCh, QVariant& pVariant, bool& pbSuccess);

    /*
    Method GetCoordStatus

    method GetCoordStatus

    */
    inline void GetCoordStatus(int dwDevice, int dwCoord, int& pStatusX, int& pStatusY, bool& pbSuccess);

    /*
    Method GetEnumeration

    method GetEnumeration

    */
    inline void GetEnumeration(int dwDevice, int& pVal);

    /*
    Method GetFeedRateAndMode

    method GetFeedRateAndMode

    */
    inline void GetFeedRateAndMode(int dwDevice, int dwCoord, double& pRate, bool& pMode);

    /*
    Method GetFirmwareType

    method GetFirmwareType

    */
    inline void GetFirmwareType(int dwDevice, DEVPMACFIRMWARETYPE& pVal);

    /*
    Method GetFirstPlc

    method GetFirstPlc

    */
    inline void GetFirstPlc(int dwDevice, bool& pbEnabled, int& pStartAdr, int& pLastAdr, int& pSize, bool& pbMore);

    /*
    Method GetFirstPlcc

    method GetFirstPlcc

    */
    inline void GetFirstPlcc(int dwDevice, bool& pbLoaded, bool& pbEnabled, int& pStartAdr, int& pLastAdr, int& pSize, bool& pbMore);

    /*
    Method GetFollowError

    method GetFollowError

    */
    inline void GetFollowError(int dwDevice, int mtr, double scale, double& pVal);

    /*
    Method GetGather

    method GetGather

    */
    inline void GetGather(int dwDevice, int num, QString& pStr, bool& pbSuccess);

    /*
    Method GetGatherPoint

    method GetGatherPoint

    */
    inline void GetGatherPoint(int dwDevice, int sourceNum, int sampleNum, double& pVal, bool& pbSuccess);

    /*
    Method GetGatherSamples

    method GetGatherSamples

    */
    inline void GetGatherSamples(int dwDevice, int sourceNum, QVariant& pVariant, bool& pbSuccess);

    /*
    Method GetGlobalStatus

    method GetGlobalStatus

    */
    inline void GetGlobalStatus(int dwDevice, int& pStatusX, int& pStatusY, bool& pbSuccess);

    /*
    Method GetIVariableDouble

    method GetIVariableDouble

    */
    inline void GetIVariableDouble(int dwDevice, int num, double def, double& pVal);

    /*
    Method GetIVariableLong

    method GetIVariableLong

    */
    inline void GetIVariableLong(int dwDevice, int num, int def, int& pVal);

    /*
    Method GetLastCommErrorStr

    method GetLastCommErrorStr

    */
    inline void GetLastCommErrorStr(int dwDevice, QString& pVal);

    /*
    Method GetLocAndEnum

    method GetLocAndEnum

    */
    inline void GetLocAndEnum(int dwDevice, int& pLoc, int& pEnum, bool& pbSuccess);

    /*
    Method GetMacroIVariableLong

    method GetMacroIVariableLong

    */
    inline void GetMacroIVariableLong(int dwDevice, int node, int num, int def, int& pVal);

    /*
    Method GetMacroIVariableString

    method GetMacroIVariableString

    */
    inline void GetMacroIVariableString(int dwDevice, int node, int num, const QString& bsDefault, QString& pbsVal);

    /*
    Method GetMacroNodeInfo

    method GetMacroNodeInfo

    */
    inline void GetMacroNodeInfo(int dwDevice, int modeNum, bool& pbEnabled, bool& pbIsIONode, int& pID);

    /*
    Method GetMacroNodes

    method GetMacroNodes

    */
    inline void GetMacroNodes(int dwDevice, int& pNumMacroStations, int& pNumActiveNodes);

    /*
    Method GetMasterPos

    method GetMasterPos

    */
    inline void GetMasterPos(int dwDevice, int mtr, double scale, double& pVal);

    /*
    Method GetMotorMotionMode

    method GetMotorMotionMode

    */
    inline void GetMotorMotionMode(int dwDevice, int dwMotor, DEVMOTION& pVal);

    /*
    Method GetMotorStatus

    method GetMotorStatus

    */
    inline void GetMotorStatus(int dwDevice, int lMotor, int& pStatusX, int& pStatusY, bool& pbSuccess);

    /*
    Method GetNTCoordinateStatusEx

    method GetNTCoordinateStatusEx

    */
    inline void GetNTCoordinateStatusEx(int dwDevice, int dwCoord, DEVCSNONTURBO*& pstatus, bool& pbSuccess);

    /*
    Method GetNTGlobalStatusEx

    method GetNTGlobalStatusEx

    */
    inline void GetNTGlobalStatusEx(int dwDevice, DEVGSNONTURBO*& pstatus, bool& pbSuccess);

    /*
    Method GetNTMotorStatusEx

    method GetNTMotorStatusEx

    */
    inline void GetNTMotorStatusEx(int dwDevice, int lMotor, DEVMSNONTURBO*& pstatus, bool& pbSuccess);

    /*
    Method GetNetActualPosition

    method GetNetActualPosition

    */
    inline void GetNetActualPosition(int dwDevice, int mtr, double scale, double& pVal);

    /*
    Method GetNextPlc

    method GetNextPlc

    */
    inline void GetNextPlc(int dwDevice, bool& pbEnabled, int& pStartAdr, int& pLastAdr, int& pSize, bool& pbMore);

    /*
    Method GetNextPlcc

    method GetNextPlcc

    */
    inline void GetNextPlcc(int dwDevice, bool& pbLoaded, bool& pbEnabled, int& pStartAdr, int& pLastAdr, int& pSize, bool& pbMore);

    /*
    Method GetNumDeviceKeys

    method GetNumDeviceKeys

    */
    inline void GetNumDeviceKeys(int& pVal);

    /*
    Method GetNumGatherSamples

    method GetNumGatherSamples

    */
    inline void GetNumGatherSamples(int dwDevice, int& pVal);

    /*
    Method GetNumGatherSources

    method GetNumGatherSources

    */
    inline void GetNumGatherSources(int dwDevice, int& pVal);

    /*
    Method GetPlcStatus

    method GetPlcStatus

    */
    inline void GetPlcStatus(int dwDevice, int& pNumPlc, int& pNumPlcc, int& pI5);

    /*
    Method GetPlcStatusStruct

    method GetPlcStatusStruct

    */
    inline void GetPlcStatusStruct(int dwDevice, DEVTOTAL_PLC_STATUS_STRUCT*& pStruct, int& pPrograms);

    /*
    Method GetPlcStatusStructure

    method GetPlcStatusStructure

    */
    inline void GetPlcStatusStructure(int dwDevice, QVariant& pVal, int& pPrograms);

    /*
    Method GetPmacLocation

    method GetPmacLocation

    */
    inline void GetPmacLocation(int dwDevice, DEVLOCATIONTYPE& pVal);

    /*
    Method GetPmacType

    method GetPmacType

    */
    inline void GetPmacType(int dwDevice, DEVPMACTYPE& pVal);

    /*
    Method GetPosition

    method GetPosition

    */
    inline void GetPosition(int dwDevice, int mtr, double scale, double& pVal);

    /*
    Method GetProgExecPoint

    method GetProgExecPoint

    */
    inline void GetProgExecPoint(int dwDevice, int dwCoord, int& pVal);

    /*
    Method GetProgramInfo

    method GetProgramInfo

    */
    inline void GetProgramInfo(int dwDevice, bool bPlc, int num, int& pSAdr, int& pFAdr);

    /*
    Method GetProgramMode

    method GetProgramMode

    */
    inline void GetProgramMode(int dwDevice, int dwCoord, DEVPROGRAMMODE& pVal);

    /*
    Method GetProgramMotionMode

    method GetProgramMotionMode

    */
    inline void GetProgramMotionMode(int dwDevice, int dwCoord, DEVMOTIONMODE& pVal);

    /*
    Method GetResponse

    method GetResponse

    */
    inline void GetResponse(int dwDevice, const QString& question, QString& pAnswer);

    /*
    Method GetResponseEx

    method GetResponseEx

    */
    inline void GetResponseEx(int dwDevice, const QString& question, bool bAddLF, QString& pAnswer, int& pstatus);

    /*
    Method GetResponseProgress

    method GetResponseProgress

    */
    inline void GetResponseProgress(int dwDevice, const QString& question, bool bAddLF, QString& pAnswer, int& pstatus);

    /*
    Method GetRomDate

    method GetRomDate

    */
    inline void GetRomDate(int dwDevice, QString& pVal);

    /*
    Method GetRomVersion

    method GetRomVersion

    */
    inline void GetRomVersion(int dwDevice, QString& pVal);

    /*
    Method GetRotBufFull

    method GetRotBufFull

    */
    inline void GetRotBufFull(int dwDevice, int dwCoord, bool& pVal);

    /*
    Method GetTargetPos

    method GetTargetPos

    */
    inline void GetTargetPos(int dwDevice, int mtr, double scale, double& pVal);

    /*
    Method GetTurboCoordinateStatusEx

    method GetTurboCoordinateStatusEx

    */
    inline void GetTurboCoordinateStatusEx(int dwDevice, int dwCoord, DEVCSTURBO*& pstatus, bool& pbSuccess);

    /*
    Method GetTurboGlobalStatusEx

    method GetTurboGlobalStatusEx

    */
    inline void GetTurboGlobalStatusEx(int dwDevice, DEVGSTURBO*& pstatus, bool& pbSuccess);

    /*
    Method GetTurboMotorStatusEx

    method GetTurboMotorStatusEx

    */
    inline void GetTurboMotorStatusEx(int dwDevice, int lMotor, DEVMSTURBO*& pstatus, bool& pbSuccess);

    /*
    Method GetVariableDouble

    method GetVariableDouble

    */
    inline void GetVariableDouble(int dwDevice, int ch, int num, double def, double& pVal, bool& pbSuccess);

    /*
    Method GetVariableLong

    method GetVariableLong

    */
    inline void GetVariableLong(int dwDevice, int ch, int num, int def, int& pVal, bool& pbSuccess);

    /*
    Method GetVariableStr

    method GetVariableStr

    */
    inline void GetVariableStr(int dwDevice, int ch, int num, QString& pVal, bool& pbSuccess);

    /*
    Method GetVelocity

    method GetVelocity

    */
    inline void GetVelocity(int dwDevice, int mtr, double scale, double& pVal);

    /*
    Method GetWhyCSNotMoving

    method GetWhyCSNotMoving

    */
    inline void GetWhyCSNotMoving(int dwDevice, int cs, int& pVal);

    /*
    Method GetWhyCSNotMovingStr

    method GetWhyCSNotMovingStr

    */
    inline void GetWhyCSNotMovingStr(int err, QString& pVal);

    /*
    Method GetWhyMotorNotMoving

    method GetWhyMotorNotMoving

    */
    inline void GetWhyMotorNotMoving(int dwDevice, int motor, int& pVal);

    /*
    Method GetWhyMotorNotMovingStr

    method GetWhyMotorNotMovingStr

    */
    inline void GetWhyMotorNotMovingStr(int err, QString& pVal);

    /*
    Method InBootStrapMode

    property InBootStrapMode

    */
    inline bool InBootStrapMode(int dwDevice);

    /*
    Method InitGather

    method InitGather

    */
    inline void InitGather(int dwDevice, int size, double msec, bool& pbSuccess);

    /*
    Method InitPlotGather

    method InitPlotGather

    */
    inline void InitPlotGather(int dwDevice, int size, int period, bool& pbSuccess);

    /*
    Method InterruptMask

    property InterruptMask

    */
    inline int InterruptMask(int dwDevice);

    /*
    Method InterruptsEnabled

    property InterruptsEnabled

    */
    inline bool InterruptsEnabled(int dwDevice);

    /*
    Method IsAnyPlcRunning

    property IsAnyPlcRunning

    */
    inline bool IsAnyPlcRunning(int dwDevice);

    /*
    Method IsTurbo

    property IsTurbo

    */
    inline bool IsTurbo(int dwDevice);

    /*
    Method LastCommError

    property LastCommError

    */
    inline int LastCommError(int dwDevice);

    /*
    Method LowPassFilterTheData

    method LowPassFilterTheData

    */
    inline void LowPassFilterTheData(QVariant& pvData, const QString& bsCurrent);

    /*
    Method MagEstimation

    method MagEstimation

    */
    inline void MagEstimation(int dwDevice, const QString& filePath, bool& pbSuccess);

    /*
    Method MapDeviceNumToEnum

    method MapDeviceNumToEnum

    */
    inline void MapDeviceNumToEnum(int location, int enumeration, int& pDeviceNumber);

    /*
    Method MapLocAndEnumFromDeviceNum

    method MapLocAndEnumFromDeviceNum

    */
    inline void MapLocAndEnumFromDeviceNum(int dwDevice, int& pLocation, int& pEnumeration);

    /*
    Method ModBusCommand

    method ModBusCommand

    */
    inline void ModBusCommand(int dwDevice, uint command, QVariant& counters, bool& pbSuccess);

    /*
    Method ModbusActive

    method ModbusActive

    */
    inline void ModbusActive(int dwDevice, bool& pbSuccess);

    /*
    Method ModbusAvailable

    method ModbusAvailable

    */
    inline void ModbusAvailable(int dwDevice, uint command, bool& pbSuccess);

    /*
    Method MotionBufOpen

    property MotionBufOpen

    */
    inline bool MotionBufOpen(int dwDevice);

    /*
    Method MotionBufferOpen

    property MotionBufferOpen

    */
    inline bool MotionBufferOpen(int dwDevice);

    /*
    Method MotorAmpEnabled

    property MotorAmpEnabled

    */
    inline bool MotorAmpEnabled(int dwDevice, int mtr);

    /*
    Method MotorAmpFault

    property MotorAmpFault

    */
    inline bool MotorAmpFault(int dwDevice, int mtr);

    /*
    Method MotorDataBlockError

    property MotorDataBlockError

    */
    inline bool MotorDataBlockError(int dwDevice, int mtr);

    /*
    Method MotorEnabled

    property MotorEnabled

    */
    inline bool MotorEnabled(int dwDevice, int mtr);

    /*
    Method MotorFatalFError

    property MotorFatalFError

    */
    inline bool MotorFatalFError(int dwDevice, int mtr);

    /*
    Method MotorHandwheelEnabled

    property MotorHandwheelEnabled

    */
    inline bool MotorHandwheelEnabled(int dwDevice, int mtr);

    /*
    Method MotorHomeComplete

    property MotorHomeComplete

    */
    inline bool MotorHomeComplete(int dwDevice, int mtr);

    /*
    Method MotorInPosition

    property MotorInPosition

    */
    inline bool MotorInPosition(int dwDevice, int mtr);

    /*
    Method MotorOnNegLimit

    property MotorOnNegLimit

    */
    inline bool MotorOnNegLimit(int dwDevice, int mtr);

    /*
    Method MotorOnPosLimit

    property MotorOnPosLimit

    */
    inline bool MotorOnPosLimit(int dwDevice, int mtr);

    /*
    Method MotorOnPositionLimit

    property MotorOnPositionLimit

    */
    inline bool MotorOnPositionLimit(int dwDevice, int mtr);

    /*
    Method MotorOpenLoop

    property MotorOpenLoop

    */
    inline bool MotorOpenLoop(int dwDevice, int mtr);

    /*
    Method MotorPhased

    property MotorPhased

    */
    inline bool MotorPhased(int dwDevice, int mtr);

    /*
    Method MotorWarnFError

    property MotorWarnFError

    */
    inline bool MotorWarnFError(int dwDevice, int mtr);

    /*
    Method MultiDownload

    method MultiDownload

    */
    inline void MultiDownload(int dwDevice, const QString& outFile, const QString& iniFile, const QString& userID, bool bMacro, bool bMap, bool bLog, bool bDnld, bool& pbSuccess);

    /*
    Method Open

    method Open

    */
    inline void Open(int dwDevice, bool& pbSuccess);

    /*
    Method PhaseMotor

    method PhaseMotor

    */
    inline void PhaseMotor(int dwDevice, const QString& question, int& pStatuss);

    /*
    Method PmacReset

    method PmacReset, Issues a $$$ command to the PMAC

    */
    inline void PmacReset(int dwDevice, const QString& question, bool bAsciiRingComm, int& pstatus);

    /*
    Method PmacSave

    method PmacSave, Issues a SAVE command to the PMAC

    */
    inline void PmacSave(int dwDevice, const QString& question, int& pstatus);

    /*
    Method ProgramContMotion

    property ProgramContMotion

    */
    inline bool ProgramContMotion(int dwDevice, int dwCoord);

    /*
    Method ProgramContRequest

    property ProgramContRequest

    */
    inline bool ProgramContRequest(int dwDevice, int dwCoord);

    /*
    Method ProgramFeedMode

    property ProgramFeedMode

    */
    inline bool ProgramFeedMode(int dwDevice, int dwCoord);

    /*
    Method ProgramRemaining

    property ProgramRemaining

    */
    inline int ProgramRemaining(int dwDevice, int dwCoord);

    /*
    Method ProgramRunning

    property ProgramRunning

    */
    inline bool ProgramRunning(int dwDevice, int dwCoord);

    /*
    Method ProgramStepping

    property ProgramStepping

    */
    inline bool ProgramStepping(int dwDevice, int dwCoord);

    /*
    Method RawGetControlResponseEx

    method RawGetControlResponseEx

    */
    inline void RawGetControlResponseEx(int dwDevice, int question, QString& pAnswer, int& pstatus);

    /*
    Method RawGetResponseEx

    method RawGetResponseEx

    */
    inline void RawGetResponseEx(int dwDevice, const QString& question, bool bAddLF, QString& pAnswer, int& pstatus);

    /*
    Method ReadGatherFile

    method ReadGatherFile

    */
    inline void ReadGatherFile(int dwDevice, const QString& bsFilePath, bool& pbSuccess);

    /*
    Method ReadResultsFromCurrentFeedbackTest

    method ReadResultsFromCurrentFeedbackTest

    */
    inline void ReadResultsFromCurrentFeedbackTest(int dwDevice, int mtr, int& pVal);

    /*
    Method ReadResultsFromSixStepTest

    method ReadResultsFromSixStepTest

    */
    inline void ReadResultsFromSixStepTest(int dwDevice, bool bSipFirstStep, QVariant& pvStepArray, int& pResult);

    /*
    Method ReadResultsFromUVWSixStepTest

    method ReadResultsFromUVWSixStepTest

    */
    inline void ReadResultsFromUVWSixStepTest(int dwDevice, QVariant& pvArray, int& pResult);

    /*
    Method RemoveDownloadFile

    method RemoveDownloadFile

    */
    inline void RemoveDownloadFile(int dwDevice, const QString& iniFile, const QString& userID, const QString& dlFile, bool& pbSuccess);

    /*
    Method RenumberFiles

    method RenumberFiles

    */
    inline void RenumberFiles(int dwDevice, int fileNumber, const QString& iniFile);

    /*
    Method RestoreLinkList

    method RestoreLinkList

    */
    inline void RestoreLinkList(const QString& firmwareVersion, bool& pbSuccess);

    /*
    Method RestoreModifiedIVars

    method RestoreModifiedIVars

    */
    inline void RestoreModifiedIVars(int dwDevice, int motor);

    /*
    Method RotaryBufferOpen

    property RotaryBufferOpen

    */
    inline bool RotaryBufferOpen(int dwDevice);

    /*
    Method SelectDevice

    method SelectDevice

    */
    inline void SelectDevice(int hWindow, int& pDeviceNumber, bool& pbSuccess);

    /*
    Method SendCommand

    method SendCommand

    */
    inline void SendCommand(int dwDevice, const QString& cmd, int& pstatus);

    /*
    Method SetAsciiComm

    method SetAsciiComm

    */
    inline void SetAsciiComm(int dwDevice, PCOMMSERVERLib::DEVASCIIMODE newVal);

    /*
    Method SetChecksums

    method SetChecksums

    */
    inline void SetChecksums(int dwDevice, bool bActive);

    /*
    Method SetCommandLogging

    method SetCommandLogging

    */
    inline void SetCommandLogging(int dwDevice, bool bOn, const QString& bsFilePath, bool& pbSuccess);

    /*
    Method SetCriticalIVars

    method SetCriticalIVars

    */
    inline void SetCriticalIVars(int dwDevice, bool& pbSuccess);

    /*
    Method SetCurrentGather

    method SetCurrentGather

    */
    inline void SetCurrentGather(int dwDevice, int mask, bool bEnable, bool& pbSuccess);

    /*
    Method SetDPRCoordRptEnabled
    */
    inline void SetDPRCoordRptEnabled(int dwDevice, bool rhs);

    /*
    Method SetDPRCoordRptMSec
    */
    inline void SetDPRCoordRptMSec(int dwDevice, int rhs);

    /*
    Method SetDPRCoordRptMax
    */
    inline void SetDPRCoordRptMax(int dwDevice, int rhs);

    /*
    Method SetDPRMotorRptEnabled
    */
    inline void SetDPRMotorRptEnabled(int dwDevice, bool rhs);

    /*
    Method SetDPRMotorRptMSec
    */
    inline void SetDPRMotorRptMSec(int dwDevice, int rhs);

    /*
    Method SetDPRMotorRptMask
    */
    inline void SetDPRMotorRptMask(int dwDevice, int rhs);

    /*
    Method SetDoChecksums
    */
    inline void SetDoChecksums(int dwDevice, bool rhs);

    /*
    Method SetGather

    method SetGather

    */
    inline void SetGather(int dwDevice, int num, const QString& str, bool bEnable, bool& pbSuccess);

    /*
    Method SetGatherEnabled
    */
    inline void SetGatherEnabled(int dwDevice, int num, bool rhs);

    /*
    Method SetGatherMode
    */
    inline void SetGatherMode(int dwDevice, PCOMMSERVERLib::DEVGATMODE rhs);

    /*
    Method SetGatherPeriod
    */
    inline void SetGatherPeriod(int dwDevice, int rhs);

    /*
    Method SetGatherSampleTime
    */
    inline void SetGatherSampleTime(int dwDevice, double rhs);

    /*
    Method SetIVarForFeedback

    method SetIVarForFeedback

    */
    inline void SetIVarForFeedback(int dwDevice, int ivar, int address, PCOMMSERVERLib::DEVFEEDBACKTYPE fbType, bool& pbSuccess);

    /*
    Method SetIVariableDouble

    method SetIVariableDouble

    */
    inline void SetIVariableDouble(int dwDevice, int num, double newVal);

    /*
    Method SetIVariableLong

    method SetIVariableLong

    */
    inline void SetIVariableLong(int dwDevice, int num, int newVal);

    /*
    Method SetInterruptMask
    */
    inline void SetInterruptMask(int dwDevice, int rhs);

    /*
    Method SetInterruptsEnabled
    */
    inline void SetInterruptsEnabled(int dwDevice, bool rhs);

    /*
    Method SetJogReturn

    method SetJogReturn

    */
    inline void SetJogReturn(int dwDevice, int mtr);

    /*
    Method SetMacroIVariableString

    method SetMacroIVariableString

    */
    inline void SetMacroIVariableString(int dwDevice, int node, int num, const QString& bsMIVarValue, bool& pbSuccess);

    /*
    Method SetQuickGather

    method SetQuickGather

    */
    inline void SetQuickGather(int dwDevice, int lComMask, int lEncMask, int lDacMask, int lCurMask, bool bEnable, bool& pbSuccess);

    /*
    Method SetQuickGatherWithDirectCurrent

    method SetQuickGatherWithDirectCurrent

    */
    inline void SetQuickGatherWithDirectCurrent(int dwDevice, int lComMask, int lEncMask, int lDacMask, int lCurMask, bool bEnable, bool& pbSuccess);

    /*
    Method SetUSMonitoringEnabled
    */
    inline void SetUSMonitoringEnabled(int dwDevice, bool rhs);

    /*
    Method SetUSMonitoringPeriod
    */
    inline void SetUSMonitoringPeriod(int dwDevice, int rhs);

    /*
    Method SetVariableDouble

    method SetVariableDouble

    */
    inline void SetVariableDouble(int dwDevice, int ch, int num, double newVal, bool& pbSuccess);

    /*
    Method SetVariableLong

    method SetVariableLong

    */
    inline void SetVariableLong(int dwDevice, int ch, int num, int newVal, bool& pbSuccess);

    /*
    Method SlopeEstimation

    method SlopeEstimation

    */
    inline void SlopeEstimation(int dwDevice, const QString& filePath, bool& pbSuccess);

    /*
    Method StartGather

    method StartGather

    */
    inline void StartGather(int dwDevice, bool& pbSuccess);

    /*
    Method StopGather

    method StopGather

    */
    inline void StopGather(int dwDevice);

    /*
    Method SysAmpFaultError

    property SysAmpFaultError

    */
    inline bool SysAmpFaultError(int dwDevice, int dwCoord);

    /*
    Method SysCircleRadError

    property SysCircleRadError

    */
    inline bool SysCircleRadError(int dwDevice, int dwCoord);

    /*
    Method SysFatalFError

    property SysFatalFError

    */
    inline bool SysFatalFError(int dwDevice, int dwCoord);

    /*
    Method SysInposition

    property SysInposition

    */
    inline bool SysInposition(int dwDevice, int dwCoord);

    /*
    Method SysMemChecksumError

    property SysMemChecksumError

    */
    inline bool SysMemChecksumError(int dwDevice);

    /*
    Method SysPromChecksumError

    property SysPromChecksumError

    */
    inline bool SysPromChecksumError(int dwDevice);

    /*
    Method SysReEntryError

    property SysReEntryError

    */
    inline bool SysReEntryError(int dwDevice);

    /*
    Method SysRuntimeError

    property SysRuntimeError

    */
    inline bool SysRuntimeError(int dwDevice, int dwCoord);

    /*
    Method SysServoError

    property SysServoError

    */
    inline bool SysServoError(int dwDevice);

    /*
    Method SysWarnFError

    property SysWarnFError

    */
    inline bool SysWarnFError(int dwDevice, int dwCoord);

    /*
    Method TimRemInMove

    property TimRemInMove

    */
    inline int TimRemInMove(int dwDevice, int dwCoord);

    /*
    Method TimeRemInTATS

    property TimeRemInTATS

    */
    inline int TimeRemInTATS(int dwDevice, int dwCoord);

    /*
    Method USMonitoringEnabled

    property USMonitoringEnabled

    */
    inline bool USMonitoringEnabled(int dwDevice);

    /*
    Method USMonitoringPeriod

    property USMonitoringPeriod

    */
    inline int USMonitoringPeriod(int dwDevice);

    /*
    Method UltraLightAnalyze

    method UltraLightAnalyze

    */
    inline void UltraLightAnalyze(int dwDevice, QVariant& pVal, int& pActiveNodes);

    /*
    Method UltraLightAnalyzeStruct

    method UltraLightAnalyzeStruct

    */
    inline void UltraLightAnalyzeStruct(int dwDevice, DEVULTRALIGHT_INFO*& pStruct, int& pActiveNodes);

    /*
    Method Upload

    method Upload

    */
    inline void Upload(int dwDevice, PCOMMSERVERLib::DEVUPLOAD pUpload, QString& pData, int& pstatus);

    /*
    Method UploadMacroConfig

    method UploadMacroConfig

    */
    inline void UploadMacroConfig(int dwDevice, const QString& bsFilePath, bool& pbSuccess);

    /*
    Method WriteGatherFile

    method WriteGatherFile

    */
    inline void WriteGatherFile(int dwDevice, const QString& bsFilePath, bool& pbSuccess);

    /*
    Method get_DPRTesting

    method get_DPRTesting

    */
    inline bool get_DPRTesting(int dwDevice);

    /*
    Method strto32f

    Converts a PMAC IEEE 32-bit floating point (F:) to a double

    */
    inline void strto32f(const QString& str, double& pVal);

    /*
    Method strtod24

    Converts a PMAC 24 bit integer. ('X:','Y:') to a double

    */
    inline void strtod24(const QString& str, double& pVal);

    /*
    Method strtod32dp

    Converts a PMACIEEE 32-bit integer (2's compliment) ('DP:') to a double

    */
    inline void strtod32dp(const QString& str, double& pVal);

    /*
    Method strtod48f

    Converts a PMAC 48 bit L: string to a double

    */
    inline void strtod48f(const QString& str, double& pVal);

    /*
    Method strtod48l

    Converts a PMAC 48-bit D: string to a double

    */
    inline void strtod48l(const QString& str, double& pVal);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class PCOMMSERVERLIB_EXPORT PmacNC : public QAxWidget
{
public:
    PmacNC(QWidget *parent = 0, Qt::WindowFlags f = 0)
    : QAxWidget(parent, f)
    {
        setControl(QStringLiteral("{450149a8-e6b7-4563-8038-fbcad025d056}"));
    }

    PmacNC(IPmacNC *iface)
    : QAxWidget()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method AddErrorRecord

    method AddErrRecord

    */
    inline void AddErrorRecord(int Control, int errnum, PCOMMSERVERLib::NCERRORMODE em, PCOMMSERVERLib::NCERRORTYPE et, int Line, int ax, const QString& Msg);

    /*
    Method AutoSetToolOffset

    method AutoSetToolOffset

    */
    inline void AutoSetToolOffset(int Control, int coord, int tool, int axis);

    /*
    Method AutoSetWorkOffset

    method AutoSetWorkOffset

    */
    inline void AutoSetWorkOffset(int Control, int coord, int axis, PCOMMSERVERLib::NCCOORDTYPE t, bool& pbSuccess);

    /*
    Method AxisSelect

    property AxisSelect

    */
    inline NCAXISSELECT AxisSelect(int Control, int coord);

    /*
    Method BlockDelete

    property BlockDelete

    */
    inline bool BlockDelete(int Control);

    /*
    Method BlocksPerSecond

    property BlocksPerSecond

    */
    inline int BlocksPerSecond(int Control, int coord);

    /*
    Method BufferMode

    property BufferMode

    */
    inline NCBUFFERMODE BufferMode(int Control, int coord);

    /*
    Method ClearOffsetValue

    method ClearOffsetValue

    */
    inline void ClearOffsetValue(int Control, int coord, int axis, PCOMMSERVERLib::NCCOORDTYPE t, bool bMetric, double newVal, bool& pbSuccess);

    /*
    Method ClearTextBuffer

    method ClearTextBuffer

    */
    inline void ClearTextBuffer(int Control, int coord);

    /*
    Method Close

    method Close

    */
    inline void Close(int Control);

    /*
    Method CloseFile

    method CloseFile

    */
    inline void CloseFile(int Control, int dwCoord, bool& pbSuccess);

    /*
    Method CoolantSelect

    property CoolantSelect

    */
    inline NCCLNTSELECT CoolantSelect(int Control);

    /*
    Method CoordSystem

    property CoordSystem

    */
    inline int CoordSystem(int Control);

    /*
    Method CurrentErrorCount

    property CurrentErrorCount

    */
    inline int CurrentErrorCount(int Control);

    /*
    Method CurrentErrorLevel

    property CurrentErrorLevel

    */
    inline NCERRORMODE CurrentErrorLevel(int Control);

    /*
    Method CurrentToolHolderNumber

    property CurrentToolHolderNumber

    */
    inline int CurrentToolHolderNumber(int Control, int coord);

    /*
    Method CurrentToolNumber

    property CurrentToolNumber

    */
    inline int CurrentToolNumber(int Control, int coord);

    /*
    Method DataCollect

    method DataCollect

    */
    inline void DataCollect(int Control, int coord, QList<NCDATA>*& pvArray, bool& pbSuccess);

    /*
    Method DataCollectionEnabled

    property DataCollectionEnabled

    */
    inline bool DataCollectionEnabled(int Control);

    /*
    Method DataCollectionResolution

    property DataResolution

    */
    inline int DataCollectionResolution(int Control);

    /*
    Method DeviceNumber

    property DeviceNumber

    */
    inline int DeviceNumber(int Control);

    /*
    Method DistanceSelect

    property DistanceSelect

    */
    inline NCSPEEDSELECT DistanceSelect(int Control);

    /*
    Method DryRun

    property DryRun

    */
    inline bool DryRun(int Control, int coord);

    /*
    Method FeedrateOverride

    property FeedrateOverride

    */
    inline double FeedrateOverride(int Control, int coord);

    /*
    Method GetActiveGCode

    method GetActiveGCode

    */
    inline void GetActiveGCode(int Control, int coord, int group, double& pVal);

    /*
    Method GetActiveGCodeStr

    method GetActiveGCodeStr

    */
    inline void GetActiveGCodeStr(int Control, int coord, int group, QString& pVal);

    /*
    Method GetAllAxisPos

    method GetAllAxisPos

    */
    inline void GetAllAxisPos(int Control, int coord, PCOMMSERVERLib::NCPOSTYPE t, QStringList& pvAdrArray, QVariantList*& pvPosArray, bool& pbSuccess);

    /*
    Method GetAllAxisPosStr

    method GetAllAxisPosStr

    */
    inline void GetAllAxisPosStr(int Control, int coord, PCOMMSERVERLib::NCPOSTYPE t, bool bCoord, QStringList& pvArray, bool& pbSuccess);

    /*
    Method GetAxisEnabled

    method GetAxisEnabled

    */
    inline void GetAxisEnabled(int Control, int coord, int axis, bool& pVal);

    /*
    Method GetAxisFormat

    method GetAxisFormat

    */
    inline void GetAxisFormat(int Control, int coord, int ax, bool bMetric, int& pLen, int& pDecPlaces);

    /*
    Method GetAxisFormatStr

    method GetAxisFormatStr

    */
    inline void GetAxisFormatStr(int Control, int coord, int ax, bool bMetric, QString& pVal);

    /*
    Method GetAxisMotor

    method GetAxisMotor

    */
    inline void GetAxisMotor(int Control, int coord, int axis, int& pMotor, bool& pbSuccess);

    /*
    Method GetBufferOpen

    method GetBufferOpen

    */
    inline void GetBufferOpen(int Control, bool& pVal);

    /*
    Method GetBufferRemaining

    method GetBufferRemaining

    */
    inline void GetBufferRemaining(int Control, int coord, int& pRemain, int& pParsed);

    /*
    Method GetBufferText

    method GetMDIBufferText

    */
    inline void GetBufferText(int Control, int coord, bool bMDI, QString& pVal);

    /*
    Method GetCommandLong

    method GetCommandLong

    */
    inline void GetCommandLong(int Control, int num, int& pVal);

    /*
    Method GetCompOffset

    method GetCompOffset

    */
    inline void GetCompOffset(int Control, int coord, int& pVal);

    /*
    Method GetCurrentGValue

    method GetCurrentGValue

    */
    inline void GetCurrentGValue(int Control, int coord, int group, int& pVal);

    /*
    Method GetCurrentLabel

    method GetCurrentLabel

    */
    inline void GetCurrentLabel(int Control, int coord, int& pVal);

    /*
    Method GetCycleCuttingTime

    method GetCycleCuttingTime

    */
    inline void GetCycleCuttingTime(int Control, int& pHours, int& pMinutes, int& pSeconds);

    /*
    Method GetCycleTime

    method GetCycleTime

    */
    inline void GetCycleTime(int Control, int& pHours, int& pMinutes, int& Seconds);

    /*
    Method GetFeedrate

    method GetFeedrate

    */
    inline void GetFeedrate(int Control, int coord, NCFEEDRATEMODE& pMode, double& pVal);

    /*
    Method GetFirstError

    method GetFirstError

    */
    inline void GetFirstError(int Control, QString& pHeader, QString& pMessage, QString& pCode, QString& pFilename, int& pCount, int& pChanged);

    /*
    Method GetHandleStep

    method GetHandleStep

    */
    inline void GetHandleStep(int Control, int coord, double& pVal);

    /*
    Method GetInposition

    method GetInposition

    */
    inline void GetInposition(int Control, int coord, bool& pVal);

    /*
    Method GetInputLong

    method GetInputLong

    */
    inline void GetInputLong(int Control, int num, int& pVal);

    /*
    Method GetJogStep

    method GetJogStep

    */
    inline void GetJogStep(int Control, int coord, double& pVal);

    /*
    Method GetLatheSetXDiameter

    method GetLatheSetXDiameter

    */
    inline void GetLatheSetXDiameter(int Control, int coord, bool bMetric, double& pVal);

    /*
    Method GetMachineMode

    method GetMachineMode

    */
    inline void GetMachineMode(int Control, NCMODE& pMode);

    /*
    Method GetMaxFeedrates

    method GetMaxFeedrates

    */
    inline void GetMaxFeedrates(int Control, int coord, double& pMaxPerRev, double& pMaxPerMinute);

    /*
    Method GetMetricInput

    method GetMetricInput

    */
    inline void GetMetricInput(int Control, int coord, bool& pVal);

    /*
    Method GetMotorAxis

    method GetMotorAxis

    */
    inline void GetMotorAxis(int Control, int coord, int motor, int& pAxis, bool& pbSuccess);

    /*
    Method GetMotorPos

    method GetMotorPos

    */
    inline void GetMotorPos(int Control, int coord, int motor, PCOMMSERVERLib::NCPOSTYPE t, QString& pAdr, double& pPos, bool& pbSuccess);

    /*
    Method GetMotorPosStr

    method GetMotorPosStr

    */
    inline void GetMotorPosStr(int Control, int coord, int motor, PCOMMSERVERLib::NCPOSTYPE t, bool bCombined, QString& pAdr, QString& pPos, bool& pbSuccess);

    /*
    Method GetMotorUnitsStr

    method GetMotorUnitsStr

    */
    inline void GetMotorUnitsStr(int Control, int coord, int motor, QString& pVal, bool& pbSuccess);

    /*
    Method GetNextError

    method GetNextError

    */
    inline void GetNextError(int Control, QString& pHeader, QString& pMessage, QString& pCode, QString& pFilename, bool& pbMore);

    /*
    Method GetNumDisplayAxisTotal

    method GetNumDisplayAxisTotal

    */
    inline void GetNumDisplayAxisTotal(int Control, int& pVal);

    /*
    Method GetNumDisplayedAxis

    method GetNumDisplayedAxis

    */
    inline void GetNumDisplayedAxis(int Control, int coord, int& pVal);

    /*
    Method GetNumOfTools

    method GetNumOfTools

    */
    inline void GetNumOfTools(int Control, int coord, int& pVal);

    /*
    Method GetOffsetValue

    method GetOffsetValue

    */
    inline void GetOffsetValue(int Control, int coord, int axis, PCOMMSERVERLib::NCCOORDTYPE t, bool bMetric, double& pVal);

    /*
    Method GetOperatingTime

    method GetOperatingTime

    */
    inline void GetOperatingTime(int Control, int& pDays, int& pHours, int& pMinutes, int& pSeconds);

    /*
    Method GetOutputLong

    method GetOutputLong

    */
    inline void GetOutputLong(int Control, int num, int& pVal);

    /*
    Method GetParametricDouble

    method GetParametricDouble

    */
    inline void GetParametricDouble(int Control, int coord, const QString& region, int index, double& pVal, bool& pbSuccess);

    /*
    Method GetPartTime

    method GetPartTime

    */
    inline void GetPartTime(int Control, int& pHours, int& pMinutes, int& pSeconds);

    /*
    Method GetProcessorClocks

    method GetProcessorClocks

    */
    inline void GetProcessorClocks(double& pIO, double& pLA, double& pParse, double& pFormat, double& pWrite);

    /*
    Method GetProgramLine

    method GetProgramLine

    */
    inline void GetProgramLine(int Control, int coord, int lineNumber, QString& pVal, bool& pbSuccess);

    /*
    Method GetProgramLines

    method GetProgramLines

    */
    inline void GetProgramLines(int Control, int coord, int start, int count, QVariant& pVal, bool& pbSuccess);

    /*
    Method GetProgramMode

    method GetProgramMode

    */
    inline void GetProgramMode(int Control, int coord, DEVPROGRAMMODE& pVal);

    /*
    Method GetProgramMotionMode

    method GetProgramMotionMode

    */
    inline void GetProgramMotionMode(int Control, int coord, DEVMOTIONMODE& pVal);

    /*
    Method GetProgramName

    method GetProgramName

    */
    inline void GetProgramName(int Control, int coord, bool bMain, QString& pVal);

    /*
    Method GetProgramNumber

    method GetProgramNumber

    */
    inline void GetProgramNumber(int Control, int coord, int& pVal);

    /*
    Method GetProgramPath

    method GetProgramPath

    */
    inline void GetProgramPath(int Control, int coord, bool bMain, QString& pVal);

    /*
    Method GetProgramStatus

    method GetProgramStatus

    */
    inline void GetProgramStatus(int Control, int coord, int& pProgID, int& pNumLines, int& pLine, int& pParseLine, int& pRepeat, int& pCount, bool& pbSuccess);

    /*
    Method GetRegistryBool

    method GetRegistryBool

    */
    inline void GetRegistryBool(int Control, const QString& section, const QString& name, bool def, bool& pVal, bool& pbSuccess);

    /*
    Method GetRegistryDouble

    method GetRegistryDouble

    */
    inline void GetRegistryDouble(int Control, const QString& section, const QString& name, double def, double& pVal, bool& pbSuccess);

    /*
    Method GetRegistryLong

    method GetRegistryDword

    */
    inline void GetRegistryLong(int Control, const QString& section, const QString& name, int def, int& pVal, bool& pbSuccess);

    /*
    Method GetRegistryString

    method GetRegistryString

    */
    inline void GetRegistryString(int Control, const QString& section, const QString& name, const QString& def, QString& pVal, bool& pbSuccess);

    /*
    Method GetRunningTime

    method GetRunningTime

    */
    inline void GetRunningTime(int Control, int& pDays, int& pHours, int& pMinutes, int& pSeconds);

    /*
    Method GetSelectedAxisChar

    method GetSelectedAxisChar

    */
    inline void GetSelectedAxisChar(int Control, int& pAxChar);

    /*
    Method GetSelectedAxisMotionMode

    method GetSelectedAxisMotionMode

    */
    inline void GetSelectedAxisMotionMode(int Control, DEVMOTIONMODE& pVal);

    /*
    Method GetSelectedBufferMode

    method GetSelectedBufferMode

    */
    inline void GetSelectedBufferMode(int Control, NCBUFFERMODE& pVal);

    /*
    Method GetSpindleActRPM

    method GetSpindleActRPM

    */
    inline void GetSpindleActRPM(int Control, int& pVal);

    /*
    Method GetStatusLong

    method GetStatusLong

    */
    inline void GetStatusLong(int Control, int num, int& pVal);

    /*
    Method GetToolData

    method GetToolData

    */
    inline void GetToolData(int Control, int coord, int tool, QVariant& pVal);

    /*
    Method GetToolDataStruct

    method GetToolDataStruct

    */
    inline void GetToolDataStruct(int Control, int coord, int tool, NCTOOL*& pStruct);

    /*
    Method GetToolGuageOffset

    method GetToolGuageOffset

    */
    inline void GetToolGuageOffset(int Control, int coord, int tool, bool bMulti, int ax, bool bMetric, double& pVal);

    /*
    Method GetToolHolderNumber

    method GetToolHolderNumber

    */
    inline void GetToolHolderNumber(int Control, int coord, int tool, int& pVal);

    /*
    Method GetToolInfo

    method GetToolInfo

    */
    inline void GetToolInfo(int Control, int coord, int& pCurrentTool, int& pNextTool, int& pHolder, int& pHolderTool);

    /*
    Method GetToolOffset

    method GetToolOffset

    */
    inline void GetToolOffset(int Control, int coord, int& pVal);

    /*
    Method GetTotalCuttingTime

    method GetTotalCuttingTime

    */
    inline void GetTotalCuttingTime(int Control, int& pDays, int& pHours, int& pMinutes, int& pSeconds);

    /*
    Method GetTypeToolOffset

    method GetTypeToolOffset

    */
    inline void GetTypeToolOffset(int Control, int coord, int tool, const QString& chAxis, PCOMMSERVERLib::NCTOOLOFSTYPE type, bool bMetric, double& pVal);

    /*
    Method GetVectorVelocity

    method GetVectorVelocity

    */
    inline void GetVectorVelocity(int Control, int coord, double& pVal);

    /*
    Method GetWorkOffset

    method GetWorkOffset

    */
    inline void GetWorkOffset(int Control, int coord, NCCOORDTYPE& t, int& pExtendedVal);

    /*
    Method HomeInProgress

    property HomeInProgress

    */
    inline bool HomeInProgress(int Control);

    /*
    Method HomeInit

    property HomeInit

    */
    inline bool HomeInit(int Control);

    /*
    Method HomeMotorMask

    property HomeMotorMask

    */
    inline int HomeMotorMask(int Control);

    /*
    Method IsDisplayed

    property IsDisplayed

    */
    inline bool IsDisplayed(int Control, int coord, int motor);

    /*
    Method IsOpen

    property IsOpen

    */
    inline bool IsOpen(int Control);

    /*
    Method IsSpindle

    property IsSpindle

    */
    inline bool IsSpindle(int Control, int coord, int motor);

    /*
    Method JogSelect

    property JogSelect

    */
    inline NCJOGSELECT JogSelect(int Control);

    /*
    Method LoadMdiBuffer

    method LoadMdiBuffer

    */
    inline void LoadMdiBuffer(int Control, int coord, int& hDlg, int idControl, int nRepeat);

    /*
    Method LoadParametricVars

    method LoadParametricVars

    */
    inline void LoadParametricVars(int Control);

    /*
    Method MachineLock

    property MachineLock

    */
    inline bool MachineLock(int Control);

    /*
    Method MachineType

    property MachineType

    */
    inline NCMACHINETYPE MachineType(int Control);

    /*
    Method NextToolNumber

    property NextToolNumber

    */
    inline int NextToolNumber(int Control, int coord);

    /*
    Method NumCoordSystems

    property NumCoordSystems

    */
    inline int NumCoordSystems(int Control);

    /*
    Method OffsetsUpdate

    method OffsetsUpdate

    */
    inline void OffsetsUpdate(int Control, int& pVal);

    /*
    Method OffsetsUpdateClear

    method OffsetsUpdateClear

    */
    inline void OffsetsUpdateClear(int Control, int clearMask);

    /*
    Method Open

    method Open

    */
    inline void Open(int Device, int Control, bool& pbSuccess);

    /*
    Method OpenFile

    method OpenFile

    */
    inline void OpenFile(int Control, int dwCoord, const QString& szFilePath, bool& pbSuccess);

    /*
    Method OptionalStop

    property OptionalStop

    */
    inline bool OptionalStop(int Control);

    /*
    Method PartsCount

    property PartsCount

    */
    inline int PartsCount(int Control);

    /*
    Method PartsRequired

    property PartsRequired

    */
    inline int PartsRequired(int Control);

    /*
    Method PartsTotal

    property PartsTotal

    */
    inline int PartsTotal(int Control);

    /*
    Method ProgramLoaded

    property ProgramLoaded

    */
    inline bool ProgramLoaded(int Control, int coord);

    /*
    Method RapidOverride

    property RapidOverride

    */
    inline double RapidOverride(int Control, int coord);

    /*
    Method ReadErrorMsgBoxText

    method ReadErrorMsgBoxText

    */
    inline void ReadErrorMsgBoxText(int Control, int index, int& pCount, QString& pText, QString& pTitle);

    /*
    Method ReadMdiBuffer

    method ReadMdiBuffer

    */
    inline void ReadMdiBuffer(int Control, int coord, int& hDlg, int idControl);

    /*
    Method ResetCycleTime

    method ResetCycleTime

    */
    inline void ResetCycleTime(int Control);

    /*
    Method ResetMsgBoxError

    method ResetMsgBoxError

    */
    inline void ResetMsgBoxError(int Control, int errRetVal);

    /*
    Method ResetPartsCount

    method ResetPartsCount

    */
    inline void ResetPartsCount(int Control);

    /*
    Method ResetPartsTotal

    method ResetPartsTotal

    */
    inline void ResetPartsTotal(int Control);

    /*
    Method SaveParametricVars

    method SaveParametricVars

    */
    inline void SaveParametricVars(int Control);

    /*
    Method SearchLine

    method SearchLine

    */
    inline void SearchLine(int Control, int coord, int Line, bool& pbSuccess);

    /*
    Method SearchText

    method SearchText

    */
    inline void SearchText(int Control, int coord, const QString& text, bool bMatchCase, bool& pbSuccess);

    /*
    Method SearchTextNext

    method SearchTextNext

    */
    inline void SearchTextNext(int Control, int coord, const QString& text, bool bMatchCase, bool& pbSuccess);

    /*
    Method Semaphore

    property Semaphore

    */
    inline int Semaphore(int Control, int coord);

    /*
    Method SetAxisFormat

    method SetAxisFormat

    */
    inline void SetAxisFormat(int Control, int coord, int ax, bool bMetric, int len, int decPlaces);

    /*
    Method SetAxisSelect
    */
    inline void SetAxisSelect(int Control, int coord, PCOMMSERVERLib::NCAXISSELECT rhs);

    /*
    Method SetBlockDelete
    */
    inline void SetBlockDelete(int Control, bool rhs);

    /*
    Method SetBufferMode
    */
    inline void SetBufferMode(int Control, int coord, PCOMMSERVERLib::NCBUFFERMODE rhs);

    /*
    Method SetBufferText

    method SetMDIBufferText

    */
    inline void SetBufferText(int Control, int coord, int repeat, bool bMDI, const QString& newVal);

    /*
    Method SetCoolantSelect
    */
    inline void SetCoolantSelect(int Control, PCOMMSERVERLib::NCCLNTSELECT rhs);

    /*
    Method SetCoordSystem
    */
    inline void SetCoordSystem(int Control, int rhs);

    /*
    Method SetCurrentErrorLevel
    */
    inline void SetCurrentErrorLevel(int Control, PCOMMSERVERLib::NCERRORMODE rhs);

    /*
    Method SetCurrentToolHolderNumber
    */
    inline void SetCurrentToolHolderNumber(int Control, int coord, int rhs);

    /*
    Method SetCurrentToolNumber
    */
    inline void SetCurrentToolNumber(int Control, int coord, int rhs);

    /*
    Method SetDistanceSelect
    */
    inline void SetDistanceSelect(int Control, PCOMMSERVERLib::NCSPEEDSELECT rhs);

    /*
    Method SetDryRun
    */
    inline void SetDryRun(int Control, int coord, bool rhs);

    /*
    Method SetFeedrate

    method SetFeedrate

    */
    inline void SetFeedrate(int Control, int coord, PCOMMSERVERLib::NCFEEDRATEMODE mode, double newVal);

    /*
    Method SetFeedrateOverride
    */
    inline void SetFeedrateOverride(int Control, int coord, double rhs);

    /*
    Method SetHomeInit
    */
    inline void SetHomeInit(int Control, bool rhs);

    /*
    Method SetHomeMotorMask
    */
    inline void SetHomeMotorMask(int Control, int rhs);

    /*
    Method SetIsDisplayed
    */
    inline void SetIsDisplayed(int Control, int coord, int motor, bool rhs);

    /*
    Method SetIsSpindle
    */
    inline void SetIsSpindle(int Control, int coord, int motor, bool rhs);

    /*
    Method SetJogSelect
    */
    inline void SetJogSelect(int Control, PCOMMSERVERLib::NCJOGSELECT rhs);

    /*
    Method SetLatheSetXDiameter

    method SetLatheSetXDiameter

    */
    inline void SetLatheSetXDiameter(int Control, int coord, bool bMetric, double newVal);

    /*
    Method SetMachineLock
    */
    inline void SetMachineLock(int Control, bool rhs);

    /*
    Method SetMachineMode

    method SetMachineMode

    */
    inline void SetMachineMode(int Control, PCOMMSERVERLib::NCMODE mode);

    /*
    Method SetMaxFeedrates

    method SetMaxFeedrates

    */
    inline void SetMaxFeedrates(int Control, int coord, double MaxPerRev, double MaxPerMinute);

    /*
    Method SetNextToolNumber
    */
    inline void SetNextToolNumber(int Control, int coord, int rhs);

    /*
    Method SetOffsetValue

    method SetOffsetValue

    */
    inline void SetOffsetValue(int Control, int coord, int axis, PCOMMSERVERLib::NCCOORDTYPE t, bool bMetric, bool bConfirm, double newVal, bool& pbSuccess);

    /*
    Method SetOptionalStop
    */
    inline void SetOptionalStop(int Control, bool rhs);

    /*
    Method SetOrigin

    method SetOrigin

    */
    inline void SetOrigin(int Control, int coord, bool bOrginAll, PCOMMSERVERLib::NCADDRESS adr, bool bClear, double Val, bool metric);

    /*
    Method SetParametricDouble

    method SetParametricDouble

    */
    inline void SetParametricDouble(int Control, int coord, const QString& region, int index, double newVal, bool& pbSuccess);

    /*
    Method SetPartsCount
    */
    inline void SetPartsCount(int Control, int rhs);

    /*
    Method SetPartsRequired
    */
    inline void SetPartsRequired(int Control, int rhs);

    /*
    Method SetPartsTotal
    */
    inline void SetPartsTotal(int Control, int rhs);

    /*
    Method SetRapidOverride
    */
    inline void SetRapidOverride(int Control, int coord, double rhs);

    /*
    Method SetRegistryBool

    method SetRegistryBool

    */
    inline void SetRegistryBool(int Control, const QString& section, const QString& name, bool bVal, bool& pbSuccess);

    /*
    Method SetRegistryDouble

    method SetRegistryDouble

    */
    inline void SetRegistryDouble(int Control, const QString& section, const QString& name, double Val, bool& pbSuccess);

    /*
    Method SetRegistryLong

    method SetRegistryDword

    */
    inline void SetRegistryLong(int Control, const QString& section, const QString& name, int lVal, bool& pbSuccess);

    /*
    Method SetRegistryString

    method SetRegistryString

    */
    inline void SetRegistryString(int Control, const QString& section, const QString& name, const QString& Val, bool& pbSuccess);

    /*
    Method SetSemaphore
    */
    inline void SetSemaphore(int Control, int coord, int rhs);

    /*
    Method SetSingleBlock
    */
    inline void SetSingleBlock(int Control, bool rhs);

    /*
    Method SetSpeedSelect
    */
    inline void SetSpeedSelect(int Control, PCOMMSERVERLib::NCSPEEDSELECT rhs);

    /*
    Method SetSpindleAtSpeed
    */
    inline void SetSpindleAtSpeed(int Control, bool rhs);

    /*
    Method SetSpindleAtZero
    */
    inline void SetSpindleAtZero(int Control, bool rhs);

    /*
    Method SetSpindleCSS
    */
    inline void SetSpindleCSS(int Control, double rhs);

    /*
    Method SetSpindleCSSMode
    */
    inline void SetSpindleCSSMode(int Control, bool rhs);

    /*
    Method SetSpindleCSSUnits
    */
    inline void SetSpindleCSSUnits(int Control, double rhs);

    /*
    Method SetSpindleCountsPerRev
    */
    inline void SetSpindleCountsPerRev(int Control, double rhs);

    /*
    Method SetSpindleDetect
    */
    inline void SetSpindleDetect(int Control, bool rhs);

    /*
    Method SetSpindleFPR
    */
    inline void SetSpindleFPR(int Control, bool rhs);

    /*
    Method SetSpindleGearRatio
    */
    inline void SetSpindleGearRatio(int Control, double rhs);

    /*
    Method SetSpindleMaxRPM
    */
    inline void SetSpindleMaxRPM(int Control, int rhs);

    /*
    Method SetSpindleOverride
    */
    inline void SetSpindleOverride(int Control, int coord, int rhs);

    /*
    Method SetSpindleRPM
    */
    inline void SetSpindleRPM(int Control, int rhs);

    /*
    Method SetSpindleSelect
    */
    inline void SetSpindleSelect(int Control, PCOMMSERVERLib::NCSPINDLESELECT rhs);

    /*
    Method SetThreadLead
    */
    inline void SetThreadLead(int Control, int coord, double rhs);

    /*
    Method SetTimebaseMode
    */
    inline void SetTimebaseMode(int Control, int coord, PCOMMSERVERLib::NCTIMEBASEMODE rhs);

    /*
    Method SetTitle
    */
    inline void SetTitle(int Control, const QString& rhs);

    /*
    Method SetToolDirection
    */
    inline void SetToolDirection(int Control, int coord, int tool, PCOMMSERVERLib::NCTOOLDIRECTION rhs);

    /*
    Method SetToolGuageOffset

    method SetToolGuageOffset

    */
    inline void SetToolGuageOffset(int Control, int coord, int tool, bool bMulti, int ax, bool bMetric, double newVal);

    /*
    Method SetToolHolderNumber

    method SetToolHolderNumber

    */
    inline void SetToolHolderNumber(int Control, int coord, int tool, int holder);

    /*
    Method SetToolInSpindle
    */
    inline void SetToolInSpindle(int Control, int coord, int rhs);

    /*
    Method SetTypeToolOffset

    method SetTypeToolOffset

    */
    inline void SetTypeToolOffset(int Control, int coord, int tool, const QString& chAxis, PCOMMSERVERLib::NCTOOLOFSTYPE type, bool bMetric, bool bConfirm, double newVal, bool& pbSuccess);

    /*
    Method SingleBlock

    property SingleBlock

    */
    inline bool SingleBlock(int Control);

    /*
    Method SpeedSelect

    property SpeedSelect

    */
    inline NCSPEEDSELECT SpeedSelect(int Control);

    /*
    Method SpindleAtSpeed

    property SpindleAtSpeed

    */
    inline bool SpindleAtSpeed(int Control);

    /*
    Method SpindleAtZero

    property SpindleAtZero

    */
    inline bool SpindleAtZero(int Control);

    /*
    Method SpindleCSS

    property SpindleCSS

    */
    inline double SpindleCSS(int Control);

    /*
    Method SpindleCSSMode

    property SpindleCSSMode

    */
    inline bool SpindleCSSMode(int Control);

    /*
    Method SpindleCSSUnits

    property SpindleCSSUnits

    */
    inline double SpindleCSSUnits(int Control);

    /*
    Method SpindleCmdRPM

    property SpindleCmdRPM

    */
    inline int SpindleCmdRPM(int Control);

    /*
    Method SpindleCountsPerRev

    property SpindleCountsPerRev

    */
    inline double SpindleCountsPerRev(int Control);

    /*
    Method SpindleDetect

    property SpindleDetect

    */
    inline bool SpindleDetect(int Control);

    /*
    Method SpindleFPR

    property SpindleFPR

    */
    inline bool SpindleFPR(int Control);

    /*
    Method SpindleGearRatio

    property SpindleGearRatio

    */
    inline double SpindleGearRatio(int Control);

    /*
    Method SpindleMaxRPM

    property SpindleMaxRPM

    */
    inline int SpindleMaxRPM(int Control);

    /*
    Method SpindleOverride

    property SpindleOverride

    */
    inline int SpindleOverride(int Control, int coord);

    /*
    Method SpindleRPM

    property SpindleRPM

    */
    inline int SpindleRPM(int Control);

    /*
    Method SpindleSelect

    property SpindleSelect

    */
    inline NCSPINDLESELECT SpindleSelect(int Control);

    /*
    Method StartDataCollection

    method StartDataCollection

    */
    inline void StartDataCollection(int Control, int CollectionMSec, int BufferSize, bool& pbSuccess);

    /*
    Method StopDataCollection

    method StopDataCollection

    */
    inline void StopDataCollection(int Control);

    /*
    Method ThreadLead

    property ThreadLead

    */
    inline double ThreadLead(int Control, int coord);

    /*
    Method TimebaseMode

    property TimebaseMode

    */
    inline NCTIMEBASEMODE TimebaseMode(int Control, int coord);

    /*
    Method Title

    property Title

    */
    inline QString Title(int Control);

    /*
    Method ToolDirection

    property ToolDirection

    */
    inline NCTOOLDIRECTION ToolDirection(int Control, int coord, int tool);

    /*
    Method ToolInSpindle

    property ToolInSpindle

    */
    inline int ToolInSpindle(int Control, int coord);

    /*
    Method UpdateAllMotors

    method UpdateAllMotors

    */
    inline void UpdateAllMotors(int Control);

    /*
    Method ZeroAllToolOffsets

    method ZeroAllToolOffsets

    */
    inline void ZeroAllToolOffsets(int Control, int coord);

    /*
    Method ZeroAllTypeToolOffsets

    method ZeroAllTypeToolOffsets

    */
    inline void ZeroAllTypeToolOffsets(int Control, int coord, PCOMMSERVERLib::NCTOOLOFSTYPE type);

    /*
    Method ZeroShift

    method ZeroShift

    */
    inline void ZeroShift(int Control, int coord, bool bShiftAll, PCOMMSERVERLib::NCADDRESS adr, bool bClear, double Val, bool bMetric);

    /*
    Method command

    method Command

    */
    inline void command(int Control, int id, int iv, double fv, const QString& bStr, bool& pbSuccess);

    /*
    Method mode

    property Title

    */
    inline NCMODE mode(int Control);

    /*
    Method setMode
    */
    inline void setMode(int Control, PCOMMSERVERLib::NCMODE rhs);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// member function implementation
#ifndef QAX_DUMPCPP_PCOMMSERVERLIB_NOINLINES
inline int IPmacDevice::MaxDownloadErrors() const
{
    QVariant qax_result = property("MaxDownloadErrors");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IPmacDevice::SetMaxDownloadErrors(int value){ setProperty("MaxDownloadErrors", QVariant(value)); }

inline void IPmacDevice::Abort(int dwDevice)
{
    void *_a[] = {0, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IPmacDevice::AbortDownload(int dwDevice)
{
    void *_a[] = {0, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IPmacDevice::AbortTest(int dwDevice)
{
    void *_a[] = {0, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void IPmacDevice::AddDownloadFile(int dwDevice, const QString& iniFile, const QString& userID, const QString& dlFile, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&iniFile, (void*)&userID, (void*)&dlFile, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void IPmacDevice::BackupLinkList(int dwDevice, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline bool IPmacDevice::BufferOpen(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void IPmacDevice::CalculateStepStatistics(QVariant& pvData, int stepSize, int I10, int I19, QString& pbsRiseTime, QString& pbsPeakTime, QString& pbsNatFreq, QString& pbsOvershoot, QString& pbsDamping, QString& pbsSettleTime)
{
    void *_a[] = {0, (void*)&pvData, (void*)&stepSize, (void*)&I10, (void*)&I19, (void*)&pbsRiseTime, (void*)&pbsPeakTime, (void*)&pbsNatFreq, (void*)&pbsOvershoot, (void*)&pbsDamping, (void*)&pbsSettleTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void IPmacDevice::ClearGather(int dwDevice)
{
    void *_a[] = {0, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void IPmacDevice::ClearGatherData(int dwDevice)
{
    void *_a[] = {0, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void IPmacDevice::Close(int dwDevice)
{
    void *_a[] = {0, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void IPmacDevice::CollectGatherData(int dwDevice, int& pSources, int& pSamples, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pSources, (void*)&pSamples, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void IPmacDevice::CommandLog(int dwDevice, const QString& bStr, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&bStr, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void IPmacDevice::CompilePLCC(int dwDevice, const QString& inFilePath, const QString& outFilePath, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&inFilePath, (void*)&outFilePath, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void IPmacDevice::ConvertWordToLong(const QString& word, int& pVal)
{
    void *_a[] = {0, (void*)&word, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void IPmacDevice::ConvertWordToShort(const QString& word, int offset, int& pVal)
{
    void *_a[] = {0, (void*)&word, (void*)&offset, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void IPmacDevice::ConvertWordToStringFloat(const QString& word, QString& pVal)
{
    void *_a[] = {0, (void*)&word, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void IPmacDevice::CreateIncrementalFinePhasePLC(int dwDevice, const QString& filePath, int PLCNumber, int motor, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&filePath, (void*)&PLCNumber, (void*)&motor, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void IPmacDevice::DPRAddressRange(int dwDevice, bool bUpper, bool bPC, int& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&bUpper, (void*)&bPC, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void IPmacDevice::DPRAsciiStrToRot(int dwDevice, const QString& inpstr, int bufnum, int& pstatus)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&inpstr, (void*)&bufnum, (void*)&pstatus};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void IPmacDevice::DPRAsciiStrToRotEx(int dwDevice, const QString& inpstr, int bufnum, bool bSendRemaining, int& pstatus)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&inpstr, (void*)&bufnum, (void*)&bSendRemaining, (void*)&pstatus};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline bool IPmacDevice::DPRAvailable(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline void IPmacDevice::DPRBackGroundVar(int dwDevice, bool bOn)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&bOn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void IPmacDevice::DPRBackground(int dwDevice, int on, int period, int coord, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&on, (void*)&period, (void*)&coord, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline bool IPmacDevice::DPRCoordRptEnabled(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline int IPmacDevice::DPRCoordRptMSec(int dwDevice)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline int IPmacDevice::DPRCoordRptMax(int dwDevice)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline void IPmacDevice::DPRDWordBitSet(int dwDevice, int offset, int bit, bool& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&offset, (void*)&bit, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void IPmacDevice::DPRFloat(qlonglong d, double scale, double& pVal)
{
    void *_a[] = {0, (void*)&d, (void*)&scale, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void IPmacDevice::DPRGetCoordRpt(int dwDevice, int coord, DEVBGCOORD*& pStruct, int& pServo, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&coord, (void*)&pStruct, (void*)&pServo, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void IPmacDevice::DPRGetCoordRptTurbo(int dwDevice, int coord, DEVBGCOORDTURBO*& pStruct, int& pServo, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&coord, (void*)&pStruct, (void*)&pServo, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline void IPmacDevice::DPRGetDWordMask(int dwDevice, int offset, int mask, int& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&offset, (void*)&mask, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
}

inline void IPmacDevice::DPRGetFixedDouble(int dwDevice, int address, double& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&address, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline void IPmacDevice::DPRGetFloat(int dwDevice, int offset, double& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&offset, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
}

inline void IPmacDevice::DPRGetLong(int dwDevice, int offset, int& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&offset, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline void IPmacDevice::DPRGetLongDouble(int dwDevice, int address, double& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&address, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void IPmacDevice::DPRGetMem(int dwDevice, int offset, int bytes, QVariant& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&offset, (void*)&bytes, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void IPmacDevice::DPRGetMotorRpt(int dwDevice, int motor, DEVFGMOTOR*& pStruct, int& pServo, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&pStruct, (void*)&pServo, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void IPmacDevice::DPRGetMotorRptTurbo(int dwDevice, int motor, DEVFGMOTORTURBO*& pStruct, int& pServo, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&pStruct, (void*)&pServo, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline void IPmacDevice::DPRGetShort(int dwDevice, int address, int& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&address, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline bool IPmacDevice::DPRMotorRptEnabled(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline int IPmacDevice::DPRMotorRptMSec(int dwDevice)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline int IPmacDevice::DPRMotorRptMask(int dwDevice)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline void IPmacDevice::DPRResetDWordBit(int dwDevice, int offset, int bit, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&offset, (void*)&bit, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}

inline void IPmacDevice::DPRRotBufClr(int dwDevice, int bufnum)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&bufnum};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline void IPmacDevice::DPRRotBufInit(int dwDevice, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline void IPmacDevice::DPRRotBufRemove(int dwDevice, int bufnum)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&bufnum};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
}

inline void IPmacDevice::DPRSetDWordBit(int dwDevice, int offset, int bit, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&offset, (void*)&bit, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline void IPmacDevice::DPRSetDWordMask(int dwDevice, int offset, int mask, int Val)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&offset, (void*)&mask, (void*)&Val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline void IPmacDevice::DPRSetFloat(int dwDevice, int offset, double newVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&offset, (void*)&newVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}

inline void IPmacDevice::DPRSetLong(int dwDevice, int offset, int newVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&offset, (void*)&newVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void IPmacDevice::DPRSetMem(int dwDevice, int offset, int bytes, const QVariant& Val, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&offset, (void*)&bytes, (void*)&Val, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline void IPmacDevice::DPRSetRotBuf(int dwDevice, bool on)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&on};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
}

inline void IPmacDevice::DPRSetShort(int dwDevice, int address, int newVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&address, (void*)&newVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
}

inline void IPmacDevice::DPRSetupBuffers(uint dwDevice, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline int IPmacDevice::DPRSize(int dwDevice)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
    return qax_result;
}

inline void IPmacDevice::DPRTest(int dwDevice, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
}

inline void IPmacDevice::DPRVarBufInit(int dwDevice, const QVariant& vAddressArray, const QVariant& vTypeArray, int& pHandle, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&vAddressArray, (void*)&vTypeArray, (void*)&pHandle, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
}

inline void IPmacDevice::DPRVarBufRead(int dwDevice, int h, int entryNum, QVariant& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&h, (void*)&entryNum, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
}

inline void IPmacDevice::DPRVarBufReadAll(int dwDevice, int h, QVariant& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&h, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
}

inline void IPmacDevice::DPRVarBufRemove(int dwDevice, int index, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&index, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
}

inline void IPmacDevice::DPRVarBufWrite(int dwDevice, const QVariant& vData, const QVariant& vAddresses, const QVariant& vTypes, int& pWritten)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&vData, (void*)&vAddresses, (void*)&vTypes, (void*)&pWritten};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
}

inline void IPmacDevice::DPRVarBufWriteEx(int dwDevice, const QVariant& vData, int& pWritten)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&vData, (void*)&pWritten};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
}

inline void IPmacDevice::DataCollect(int dwDevice, QVariant& pvArray, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pvArray, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
}

inline bool IPmacDevice::DataCollectionEnabled(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
    return qax_result;
}

inline int IPmacDevice::DataCollectionResolution(int dwDevice)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
    return qax_result;
}

inline void IPmacDevice::DataGather(int dwDevice, QList<DEVDATA>*& pvArray, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pvArray, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
}

inline void IPmacDevice::DataStart(int dwDevice, int resolution, int period)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&resolution, (void*)&period};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
}

inline void IPmacDevice::DataStop(int dwDevice)
{
    void *_a[] = {0, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
}

inline void IPmacDevice::DifferentiateTheData(QVariant& pvData, int I10, int I19, int& pMinVal, int& pMaxVal)
{
    void *_a[] = {0, (void*)&pvData, (void*)&I10, (void*)&I19, (void*)&pMinVal, (void*)&pMaxVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
}

inline void IPmacDevice::DoACurrentLoopStep(int dwDevice, int motor, int dwellTime, int magnitude, bool bAutoTune, QString& pbsCTSCurrent, double pwmDutyCycle, int divisor, bool bUltra)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&dwellTime, (void*)&magnitude, (void*)&bAutoTune, (void*)&pbsCTSCurrent, (void*)&pwmDutyCycle, (void*)&divisor, (void*)&bUltra};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
}

inline void IPmacDevice::DoACurrentLoopStepBrush(int dwDevice, int motor, int dwellTime, int magnitude, bool bAutoTune, QString& pbsCTSCurrent, double pwmDutyCycle, int divisor, bool bUltra)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&dwellTime, (void*)&magnitude, (void*)&bAutoTune, (void*)&pbsCTSCurrent, (void*)&pwmDutyCycle, (void*)&divisor, (void*)&bUltra};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
}

inline void IPmacDevice::DoAGantryParabolic(int dwDevice, int motor, int motor2, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&motor2, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
}

inline void IPmacDevice::DoAGantryParabolicMove(int dwDevice, int motor, int motor2, int stepSize, int stepTime, bool bBiDirectional, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&motor2, (void*)&stepSize, (void*)&stepTime, (void*)&bBiDirectional, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
}

inline void IPmacDevice::DoAGantryPositionLoopStep(int dwDevice, int motor, int motor2, int stepSize, int stepTime, bool bBiDirectional, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&motor2, (void*)&stepSize, (void*)&stepTime, (void*)&bBiDirectional, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
}

inline void IPmacDevice::DoAParabolicMove(int dwDevice, int motor, int stepSize, int stepTime, bool bBiDirectional, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&stepSize, (void*)&stepTime, (void*)&bBiDirectional, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
}

inline void IPmacDevice::DoAPositionLoopStep(int dwDevice, int motor, int stepSize, int stepTime, bool bBiDirectional, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&stepSize, (void*)&stepTime, (void*)&bBiDirectional, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
}

inline bool IPmacDevice::DoChecksums(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 84, _a);
    return qax_result;
}

inline void IPmacDevice::Download(int dwDevice, const QString& filePath, bool bMacro, bool bMap, bool bLog, bool bDnld, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&filePath, (void*)&bMacro, (void*)&bMap, (void*)&bLog, (void*)&bDnld, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 85, _a);
}

inline void IPmacDevice::DownloadAndRunRoughPhasePLC(int dwDevice, int motor, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 86, _a);
}

inline void IPmacDevice::DownloadAutoTuningPLC(int dwDevice, int motor, bool bCurrentLoop, bool bBypassJog, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&bCurrentLoop, (void*)&bBypassJog, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 87, _a);
}

inline void IPmacDevice::DownloadCurrentFeedbackTest(int dwDevice, int mtr, double pwmDutyCycle, int pwmFreq, bool bMacro, bool bUltra, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&mtr, (void*)&pwmDutyCycle, (void*)&pwmFreq, (void*)&bMacro, (void*)&bUltra, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 88, _a);
}

inline void IPmacDevice::DownloadCurrentSixStepTest(int dwDevice, int motor, double pwmDutyCycle, bool bMacro, bool bUltra, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&pwmDutyCycle, (void*)&bMacro, (void*)&bUltra, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 89, _a);
}

inline void IPmacDevice::DownloadFile(int dwDevice, const QString& filePath)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&filePath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 90, _a);
}

inline void IPmacDevice::DownloadFirmwareFile(int dwDevice, const QString& filePath, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&filePath, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 91, _a);
}

inline void IPmacDevice::DownloadGantryAutoTuningPLC(int dwDevice, int motor, int motor2, bool bCurrentLoop, bool bBypassJog, double MaxTravel, int time, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&motor2, (void*)&bCurrentLoop, (void*)&bBypassJog, (void*)&MaxTravel, (void*)&time, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 92, _a);
}

inline void IPmacDevice::DownloadGantryAutoTuningPLCP1(int dwDevice, int motor, int motor2, bool bCurrentLoop, bool bBypassJog, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&motor2, (void*)&bCurrentLoop, (void*)&bBypassJog, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 93, _a);
}

inline void IPmacDevice::DownloadOpenLoopTest(int dwDevice, int motor, int magnitude, int time, int reps, bool bGatherCurrents, bool bMacro, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&magnitude, (void*)&time, (void*)&reps, (void*)&bGatherCurrents, (void*)&bMacro, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 94, _a);
}

inline void IPmacDevice::DownloadOpenLoopTest1(int dwDevice, int motor, int magnitude, int time, int reps, bool bGatherCurrents, bool bMacro, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&magnitude, (void*)&time, (void*)&reps, (void*)&bGatherCurrents, (void*)&bMacro, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 95, _a);
}

inline void IPmacDevice::DownloadOpenLoopTestForPMAC1(int dwDevice, int motor, int magnitude, int time, int reps, bool bGatherCurrents, bool bMacro, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&magnitude, (void*)&time, (void*)&reps, (void*)&bGatherCurrents, (void*)&bMacro, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 96, _a);
}

inline void IPmacDevice::DownloadPosLimitPLC(int dwDevice, int motor, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 97, _a);
}

inline void IPmacDevice::DownloadUVWSixStepTest(int dwDevice, int motor, double pwmDutyCycle, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&pwmDutyCycle, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 98, _a);
}

inline void IPmacDevice::DownloadVelLimitPLC(int dwDevice, int motor, int maxspd, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&maxspd, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 99, _a);
}

inline void IPmacDevice::DownloadVoltageSixStepTest(int dwDevice, int mtr, double pwmDutyCycle, bool bMacro, bool bUltra, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&mtr, (void*)&pwmDutyCycle, (void*)&bMacro, (void*)&bUltra, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 100, _a);
}

inline bool IPmacDevice::Downloading(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 101, _a);
    return qax_result;
}

inline bool IPmacDevice::GatherEnabled(int dwDevice, int num)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&num};
    qt_metacall(QMetaObject::InvokeMetaMethod, 102, _a);
    return qax_result;
}

inline DEVGATMODE IPmacDevice::GatherMode(int dwDevice)
{
    DEVGATMODE qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 103, _a);
    return qax_result;
}

inline int IPmacDevice::GatherPeriod(int dwDevice)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 104, _a);
    return qax_result;
}

inline double IPmacDevice::GatherSampleTime(int dwDevice)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 105, _a);
    return qax_result;
}

inline void IPmacDevice::GetAsciiComm(int dwDevice, DEVASCIIMODE& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 106, _a);
}

inline void IPmacDevice::GetBiasPos(int dwDevice, int mtr, double scale, double& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&mtr, (void*)&scale, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 107, _a);
}

inline void IPmacDevice::GetBitValue(const QString& hexStr, int bit, bool& pVal)
{
    void *_a[] = {0, (void*)&hexStr, (void*)&bit, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 108, _a);
}

inline void IPmacDevice::GetCommandLogging(int dwDevice, bool& pbON)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pbON};
    qt_metacall(QMetaObject::InvokeMetaMethod, 109, _a);
}

inline void IPmacDevice::GetCommandedPos(int dwDevice, int mtr, double scale, double& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&mtr, (void*)&scale, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 110, _a);
}

inline void IPmacDevice::GetCompensationPos(int dwDevice, int mtr, double scale, double& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&mtr, (void*)&scale, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 111, _a);
}

inline void IPmacDevice::GetControlResponse(int dwDevice, int question, QString& pAnswer)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&question, (void*)&pAnswer};
    qt_metacall(QMetaObject::InvokeMetaMethod, 112, _a);
}

inline void IPmacDevice::GetControlResponseEx(int dwDevice, int question, QString& pAnswer, int& pstatus)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&question, (void*)&pAnswer, (void*)&pstatus};
    qt_metacall(QMetaObject::InvokeMetaMethod, 113, _a);
}

inline void IPmacDevice::GetControlValues(int dwDevice, int ctrlCh, QVariant& pVariant, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&ctrlCh, (void*)&pVariant, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 114, _a);
}

inline void IPmacDevice::GetCoordStatus(int dwDevice, int dwCoord, int& pStatusX, int& pStatusY, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&dwCoord, (void*)&pStatusX, (void*)&pStatusY, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 115, _a);
}

inline void IPmacDevice::GetEnumeration(int dwDevice, int& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 116, _a);
}

inline void IPmacDevice::GetFeedRateAndMode(int dwDevice, int dwCoord, double& pRate, bool& pMode)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&dwCoord, (void*)&pRate, (void*)&pMode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 117, _a);
}

inline void IPmacDevice::GetFirmwareType(int dwDevice, DEVPMACFIRMWARETYPE& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 118, _a);
}

inline void IPmacDevice::GetFirstPlc(int dwDevice, bool& pbEnabled, int& pStartAdr, int& pLastAdr, int& pSize, bool& pbMore)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pbEnabled, (void*)&pStartAdr, (void*)&pLastAdr, (void*)&pSize, (void*)&pbMore};
    qt_metacall(QMetaObject::InvokeMetaMethod, 119, _a);
}

inline void IPmacDevice::GetFirstPlcc(int dwDevice, bool& pbLoaded, bool& pbEnabled, int& pStartAdr, int& pLastAdr, int& pSize, bool& pbMore)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pbLoaded, (void*)&pbEnabled, (void*)&pStartAdr, (void*)&pLastAdr, (void*)&pSize, (void*)&pbMore};
    qt_metacall(QMetaObject::InvokeMetaMethod, 120, _a);
}

inline void IPmacDevice::GetFollowError(int dwDevice, int mtr, double scale, double& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&mtr, (void*)&scale, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 121, _a);
}

inline void IPmacDevice::GetGather(int dwDevice, int num, QString& pStr, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&num, (void*)&pStr, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 122, _a);
}

inline void IPmacDevice::GetGatherPoint(int dwDevice, int sourceNum, int sampleNum, double& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&sourceNum, (void*)&sampleNum, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 123, _a);
}

inline void IPmacDevice::GetGatherSamples(int dwDevice, int sourceNum, QVariant& pVariant, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&sourceNum, (void*)&pVariant, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 124, _a);
}

inline void IPmacDevice::GetGlobalStatus(int dwDevice, int& pStatusX, int& pStatusY, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pStatusX, (void*)&pStatusY, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 125, _a);
}

inline void IPmacDevice::GetIVariableDouble(int dwDevice, int num, double def, double& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&num, (void*)&def, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 126, _a);
}

inline void IPmacDevice::GetIVariableLong(int dwDevice, int num, int def, int& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&num, (void*)&def, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 127, _a);
}

inline void IPmacDevice::GetLastCommErrorStr(int dwDevice, QString& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 128, _a);
}

inline void IPmacDevice::GetLocAndEnum(int dwDevice, int& pLoc, int& pEnum, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pLoc, (void*)&pEnum, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 129, _a);
}

inline void IPmacDevice::GetMacroIVariableLong(int dwDevice, int node, int num, int def, int& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&node, (void*)&num, (void*)&def, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 130, _a);
}

inline void IPmacDevice::GetMacroIVariableString(int dwDevice, int node, int num, const QString& bsDefault, QString& pbsVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&node, (void*)&num, (void*)&bsDefault, (void*)&pbsVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 131, _a);
}

inline void IPmacDevice::GetMacroNodeInfo(int dwDevice, int modeNum, bool& pbEnabled, bool& pbIsIONode, int& pID)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&modeNum, (void*)&pbEnabled, (void*)&pbIsIONode, (void*)&pID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 132, _a);
}

inline void IPmacDevice::GetMacroNodes(int dwDevice, int& pNumMacroStations, int& pNumActiveNodes)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pNumMacroStations, (void*)&pNumActiveNodes};
    qt_metacall(QMetaObject::InvokeMetaMethod, 133, _a);
}

inline void IPmacDevice::GetMasterPos(int dwDevice, int mtr, double scale, double& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&mtr, (void*)&scale, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 134, _a);
}

inline void IPmacDevice::GetMotorMotionMode(int dwDevice, int dwMotor, DEVMOTION& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&dwMotor, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 135, _a);
}

inline void IPmacDevice::GetMotorStatus(int dwDevice, int lMotor, int& pStatusX, int& pStatusY, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&lMotor, (void*)&pStatusX, (void*)&pStatusY, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 136, _a);
}

inline void IPmacDevice::GetNTCoordinateStatusEx(int dwDevice, int dwCoord, DEVCSNONTURBO*& pstatus, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&dwCoord, (void*)&pstatus, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 137, _a);
}

inline void IPmacDevice::GetNTGlobalStatusEx(int dwDevice, DEVGSNONTURBO*& pstatus, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pstatus, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 138, _a);
}

inline void IPmacDevice::GetNTMotorStatusEx(int dwDevice, int lMotor, DEVMSNONTURBO*& pstatus, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&lMotor, (void*)&pstatus, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 139, _a);
}

inline void IPmacDevice::GetNetActualPosition(int dwDevice, int mtr, double scale, double& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&mtr, (void*)&scale, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 140, _a);
}

inline void IPmacDevice::GetNextPlc(int dwDevice, bool& pbEnabled, int& pStartAdr, int& pLastAdr, int& pSize, bool& pbMore)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pbEnabled, (void*)&pStartAdr, (void*)&pLastAdr, (void*)&pSize, (void*)&pbMore};
    qt_metacall(QMetaObject::InvokeMetaMethod, 141, _a);
}

inline void IPmacDevice::GetNextPlcc(int dwDevice, bool& pbLoaded, bool& pbEnabled, int& pStartAdr, int& pLastAdr, int& pSize, bool& pbMore)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pbLoaded, (void*)&pbEnabled, (void*)&pStartAdr, (void*)&pLastAdr, (void*)&pSize, (void*)&pbMore};
    qt_metacall(QMetaObject::InvokeMetaMethod, 142, _a);
}

inline void IPmacDevice::GetNumDeviceKeys(int& pVal)
{
    void *_a[] = {0, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 143, _a);
}

inline void IPmacDevice::GetNumGatherSamples(int dwDevice, int& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 144, _a);
}

inline void IPmacDevice::GetNumGatherSources(int dwDevice, int& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 145, _a);
}

inline void IPmacDevice::GetPlcStatus(int dwDevice, int& pNumPlc, int& pNumPlcc, int& pI5)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pNumPlc, (void*)&pNumPlcc, (void*)&pI5};
    qt_metacall(QMetaObject::InvokeMetaMethod, 146, _a);
}

inline void IPmacDevice::GetPlcStatusStruct(int dwDevice, DEVTOTAL_PLC_STATUS_STRUCT*& pStruct, int& pPrograms)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pStruct, (void*)&pPrograms};
    qt_metacall(QMetaObject::InvokeMetaMethod, 147, _a);
}

inline void IPmacDevice::GetPlcStatusStructure(int dwDevice, QVariant& pVal, int& pPrograms)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pVal, (void*)&pPrograms};
    qt_metacall(QMetaObject::InvokeMetaMethod, 148, _a);
}

inline void IPmacDevice::GetPmacLocation(int dwDevice, DEVLOCATIONTYPE& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 149, _a);
}

inline void IPmacDevice::GetPmacType(int dwDevice, DEVPMACTYPE& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 150, _a);
}

inline void IPmacDevice::GetPosition(int dwDevice, int mtr, double scale, double& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&mtr, (void*)&scale, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 151, _a);
}

inline void IPmacDevice::GetProgExecPoint(int dwDevice, int dwCoord, int& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&dwCoord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 152, _a);
}

inline void IPmacDevice::GetProgramInfo(int dwDevice, bool bPlc, int num, int& pSAdr, int& pFAdr)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&bPlc, (void*)&num, (void*)&pSAdr, (void*)&pFAdr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 153, _a);
}

inline void IPmacDevice::GetProgramMode(int dwDevice, int dwCoord, DEVPROGRAMMODE& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&dwCoord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 154, _a);
}

inline void IPmacDevice::GetProgramMotionMode(int dwDevice, int dwCoord, DEVMOTIONMODE& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&dwCoord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 155, _a);
}

inline void IPmacDevice::GetResponse(int dwDevice, const QString& question, QString& pAnswer)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&question, (void*)&pAnswer};
    qt_metacall(QMetaObject::InvokeMetaMethod, 156, _a);
}

inline void IPmacDevice::GetResponseEx(int dwDevice, const QString& question, bool bAddLF, QString& pAnswer, int& pstatus)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&question, (void*)&bAddLF, (void*)&pAnswer, (void*)&pstatus};
    qt_metacall(QMetaObject::InvokeMetaMethod, 157, _a);
}

inline void IPmacDevice::GetResponseProgress(int dwDevice, const QString& question, bool bAddLF, QString& pAnswer, int& pstatus)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&question, (void*)&bAddLF, (void*)&pAnswer, (void*)&pstatus};
    qt_metacall(QMetaObject::InvokeMetaMethod, 158, _a);
}

inline void IPmacDevice::GetRomDate(int dwDevice, QString& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 159, _a);
}

inline void IPmacDevice::GetRomVersion(int dwDevice, QString& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 160, _a);
}

inline void IPmacDevice::GetRotBufFull(int dwDevice, int dwCoord, bool& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&dwCoord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 161, _a);
}

inline void IPmacDevice::GetTargetPos(int dwDevice, int mtr, double scale, double& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&mtr, (void*)&scale, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 162, _a);
}

inline void IPmacDevice::GetTurboCoordinateStatusEx(int dwDevice, int dwCoord, DEVCSTURBO*& pstatus, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&dwCoord, (void*)&pstatus, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 163, _a);
}

inline void IPmacDevice::GetTurboGlobalStatusEx(int dwDevice, DEVGSTURBO*& pstatus, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pstatus, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 164, _a);
}

inline void IPmacDevice::GetTurboMotorStatusEx(int dwDevice, int lMotor, DEVMSTURBO*& pstatus, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&lMotor, (void*)&pstatus, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 165, _a);
}

inline void IPmacDevice::GetVariableDouble(int dwDevice, int ch, int num, double def, double& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&ch, (void*)&num, (void*)&def, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 166, _a);
}

inline void IPmacDevice::GetVariableLong(int dwDevice, int ch, int num, int def, int& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&ch, (void*)&num, (void*)&def, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 167, _a);
}

inline void IPmacDevice::GetVariableStr(int dwDevice, int ch, int num, QString& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&ch, (void*)&num, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 168, _a);
}

inline void IPmacDevice::GetVelocity(int dwDevice, int mtr, double scale, double& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&mtr, (void*)&scale, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 169, _a);
}

inline void IPmacDevice::GetWhyCSNotMoving(int dwDevice, int cs, int& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&cs, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 170, _a);
}

inline void IPmacDevice::GetWhyCSNotMovingStr(int err, QString& pVal)
{
    void *_a[] = {0, (void*)&err, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 171, _a);
}

inline void IPmacDevice::GetWhyMotorNotMoving(int dwDevice, int motor, int& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 172, _a);
}

inline void IPmacDevice::GetWhyMotorNotMovingStr(int err, QString& pVal)
{
    void *_a[] = {0, (void*)&err, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 173, _a);
}

inline bool IPmacDevice::InBootStrapMode(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 174, _a);
    return qax_result;
}

inline void IPmacDevice::InitGather(int dwDevice, int size, double msec, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&size, (void*)&msec, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 175, _a);
}

inline void IPmacDevice::InitPlotGather(int dwDevice, int size, int period, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&size, (void*)&period, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 176, _a);
}

inline int IPmacDevice::InterruptMask(int dwDevice)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 177, _a);
    return qax_result;
}

inline bool IPmacDevice::InterruptsEnabled(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 178, _a);
    return qax_result;
}

inline bool IPmacDevice::IsAnyPlcRunning(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 179, _a);
    return qax_result;
}

inline bool IPmacDevice::IsTurbo(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 180, _a);
    return qax_result;
}

inline int IPmacDevice::LastCommError(int dwDevice)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 181, _a);
    return qax_result;
}

inline void IPmacDevice::LowPassFilterTheData(QVariant& pvData, const QString& bsCurrent)
{
    void *_a[] = {0, (void*)&pvData, (void*)&bsCurrent};
    qt_metacall(QMetaObject::InvokeMetaMethod, 182, _a);
}

inline void IPmacDevice::MagEstimation(int dwDevice, const QString& filePath, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&filePath, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 183, _a);
}

inline void IPmacDevice::MapDeviceNumToEnum(int location, int enumeration, int& pDeviceNumber)
{
    void *_a[] = {0, (void*)&location, (void*)&enumeration, (void*)&pDeviceNumber};
    qt_metacall(QMetaObject::InvokeMetaMethod, 184, _a);
}

inline void IPmacDevice::MapLocAndEnumFromDeviceNum(int dwDevice, int& pLocation, int& pEnumeration)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pLocation, (void*)&pEnumeration};
    qt_metacall(QMetaObject::InvokeMetaMethod, 185, _a);
}

inline void IPmacDevice::ModBusCommand(int dwDevice, uint command, QVariant& counters, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&command, (void*)&counters, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 186, _a);
}

inline void IPmacDevice::ModbusActive(int dwDevice, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 187, _a);
}

inline void IPmacDevice::ModbusAvailable(int dwDevice, uint command, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&command, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 188, _a);
}

inline bool IPmacDevice::MotionBufOpen(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 189, _a);
    return qax_result;
}

inline bool IPmacDevice::MotionBufferOpen(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 190, _a);
    return qax_result;
}

inline bool IPmacDevice::MotorAmpEnabled(int dwDevice, int mtr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 191, _a);
    return qax_result;
}

inline bool IPmacDevice::MotorAmpFault(int dwDevice, int mtr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 192, _a);
    return qax_result;
}

inline bool IPmacDevice::MotorDataBlockError(int dwDevice, int mtr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 193, _a);
    return qax_result;
}

inline bool IPmacDevice::MotorEnabled(int dwDevice, int mtr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 194, _a);
    return qax_result;
}

inline bool IPmacDevice::MotorFatalFError(int dwDevice, int mtr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 195, _a);
    return qax_result;
}

inline bool IPmacDevice::MotorHandwheelEnabled(int dwDevice, int mtr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 196, _a);
    return qax_result;
}

inline bool IPmacDevice::MotorHomeComplete(int dwDevice, int mtr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 197, _a);
    return qax_result;
}

inline bool IPmacDevice::MotorInPosition(int dwDevice, int mtr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 198, _a);
    return qax_result;
}

inline bool IPmacDevice::MotorOnNegLimit(int dwDevice, int mtr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 199, _a);
    return qax_result;
}

inline bool IPmacDevice::MotorOnPosLimit(int dwDevice, int mtr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 200, _a);
    return qax_result;
}

inline bool IPmacDevice::MotorOnPositionLimit(int dwDevice, int mtr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 201, _a);
    return qax_result;
}

inline bool IPmacDevice::MotorOpenLoop(int dwDevice, int mtr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 202, _a);
    return qax_result;
}

inline bool IPmacDevice::MotorPhased(int dwDevice, int mtr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 203, _a);
    return qax_result;
}

inline bool IPmacDevice::MotorWarnFError(int dwDevice, int mtr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 204, _a);
    return qax_result;
}

inline void IPmacDevice::MultiDownload(int dwDevice, const QString& outFile, const QString& iniFile, const QString& userID, bool bMacro, bool bMap, bool bLog, bool bDnld, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&outFile, (void*)&iniFile, (void*)&userID, (void*)&bMacro, (void*)&bMap, (void*)&bLog, (void*)&bDnld, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 205, _a);
}

inline void IPmacDevice::Open(int dwDevice, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 206, _a);
}

inline void IPmacDevice::PhaseMotor(int dwDevice, const QString& question, int& pStatuss)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&question, (void*)&pStatuss};
    qt_metacall(QMetaObject::InvokeMetaMethod, 207, _a);
}

inline void IPmacDevice::PmacReset(int dwDevice, const QString& question, bool bAsciiRingComm, int& pstatus)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&question, (void*)&bAsciiRingComm, (void*)&pstatus};
    qt_metacall(QMetaObject::InvokeMetaMethod, 208, _a);
}

inline void IPmacDevice::PmacSave(int dwDevice, const QString& question, int& pstatus)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&question, (void*)&pstatus};
    qt_metacall(QMetaObject::InvokeMetaMethod, 209, _a);
}

inline bool IPmacDevice::ProgramContMotion(int dwDevice, int dwCoord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&dwCoord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 210, _a);
    return qax_result;
}

inline bool IPmacDevice::ProgramContRequest(int dwDevice, int dwCoord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&dwCoord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 211, _a);
    return qax_result;
}

inline bool IPmacDevice::ProgramFeedMode(int dwDevice, int dwCoord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&dwCoord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 212, _a);
    return qax_result;
}

inline int IPmacDevice::ProgramRemaining(int dwDevice, int dwCoord)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&dwCoord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 213, _a);
    return qax_result;
}

inline bool IPmacDevice::ProgramRunning(int dwDevice, int dwCoord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&dwCoord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 214, _a);
    return qax_result;
}

inline bool IPmacDevice::ProgramStepping(int dwDevice, int dwCoord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&dwCoord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 215, _a);
    return qax_result;
}

inline void IPmacDevice::RawGetControlResponseEx(int dwDevice, int question, QString& pAnswer, int& pstatus)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&question, (void*)&pAnswer, (void*)&pstatus};
    qt_metacall(QMetaObject::InvokeMetaMethod, 216, _a);
}

inline void IPmacDevice::RawGetResponseEx(int dwDevice, const QString& question, bool bAddLF, QString& pAnswer, int& pstatus)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&question, (void*)&bAddLF, (void*)&pAnswer, (void*)&pstatus};
    qt_metacall(QMetaObject::InvokeMetaMethod, 217, _a);
}

inline void IPmacDevice::ReadGatherFile(int dwDevice, const QString& bsFilePath, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&bsFilePath, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 218, _a);
}

inline void IPmacDevice::ReadResultsFromCurrentFeedbackTest(int dwDevice, int mtr, int& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&mtr, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 219, _a);
}

inline void IPmacDevice::ReadResultsFromSixStepTest(int dwDevice, bool bSipFirstStep, QVariant& pvStepArray, int& pResult)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&bSipFirstStep, (void*)&pvStepArray, (void*)&pResult};
    qt_metacall(QMetaObject::InvokeMetaMethod, 220, _a);
}

inline void IPmacDevice::ReadResultsFromUVWSixStepTest(int dwDevice, QVariant& pvArray, int& pResult)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pvArray, (void*)&pResult};
    qt_metacall(QMetaObject::InvokeMetaMethod, 221, _a);
}

inline void IPmacDevice::RemoveDownloadFile(int dwDevice, const QString& iniFile, const QString& userID, const QString& dlFile, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&iniFile, (void*)&userID, (void*)&dlFile, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 222, _a);
}

inline void IPmacDevice::RenumberFiles(int dwDevice, int fileNumber, const QString& iniFile)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&fileNumber, (void*)&iniFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 223, _a);
}

inline void IPmacDevice::RestoreLinkList(const QString& firmwareVersion, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&firmwareVersion, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 224, _a);
}

inline void IPmacDevice::RestoreModifiedIVars(int dwDevice, int motor)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 225, _a);
}

inline bool IPmacDevice::RotaryBufferOpen(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 226, _a);
    return qax_result;
}

inline void IPmacDevice::SelectDevice(int hWindow, int& pDeviceNumber, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&hWindow, (void*)&pDeviceNumber, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 227, _a);
}

inline void IPmacDevice::SendCommand(int dwDevice, const QString& cmd, int& pstatus)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&cmd, (void*)&pstatus};
    qt_metacall(QMetaObject::InvokeMetaMethod, 228, _a);
}

inline void IPmacDevice::SetAsciiComm(int dwDevice, PCOMMSERVERLib::DEVASCIIMODE newVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&newVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 229, _a);
}

inline void IPmacDevice::SetChecksums(int dwDevice, bool bActive)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&bActive};
    qt_metacall(QMetaObject::InvokeMetaMethod, 230, _a);
}

inline void IPmacDevice::SetCommandLogging(int dwDevice, bool bOn, const QString& bsFilePath, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&bOn, (void*)&bsFilePath, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 231, _a);
}

inline void IPmacDevice::SetCriticalIVars(int dwDevice, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 232, _a);
}

inline void IPmacDevice::SetCurrentGather(int dwDevice, int mask, bool bEnable, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&mask, (void*)&bEnable, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 233, _a);
}

inline void IPmacDevice::SetDPRCoordRptEnabled(int dwDevice, bool rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 234, _a);
}

inline void IPmacDevice::SetDPRCoordRptMSec(int dwDevice, int rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 235, _a);
}

inline void IPmacDevice::SetDPRCoordRptMax(int dwDevice, int rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 236, _a);
}

inline void IPmacDevice::SetDPRMotorRptEnabled(int dwDevice, bool rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 237, _a);
}

inline void IPmacDevice::SetDPRMotorRptMSec(int dwDevice, int rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 238, _a);
}

inline void IPmacDevice::SetDPRMotorRptMask(int dwDevice, int rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 239, _a);
}

inline void IPmacDevice::SetDoChecksums(int dwDevice, bool rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 240, _a);
}

inline void IPmacDevice::SetGather(int dwDevice, int num, const QString& str, bool bEnable, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&num, (void*)&str, (void*)&bEnable, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 241, _a);
}

inline void IPmacDevice::SetGatherEnabled(int dwDevice, int num, bool rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&num, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 242, _a);
}

inline void IPmacDevice::SetGatherMode(int dwDevice, PCOMMSERVERLib::DEVGATMODE rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 243, _a);
}

inline void IPmacDevice::SetGatherPeriod(int dwDevice, int rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 244, _a);
}

inline void IPmacDevice::SetGatherSampleTime(int dwDevice, double rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 245, _a);
}

inline void IPmacDevice::SetIVarForFeedback(int dwDevice, int ivar, int address, PCOMMSERVERLib::DEVFEEDBACKTYPE fbType, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&ivar, (void*)&address, (void*)&fbType, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 246, _a);
}

inline void IPmacDevice::SetIVariableDouble(int dwDevice, int num, double newVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&num, (void*)&newVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 247, _a);
}

inline void IPmacDevice::SetIVariableLong(int dwDevice, int num, int newVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&num, (void*)&newVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 248, _a);
}

inline void IPmacDevice::SetInterruptMask(int dwDevice, int rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 249, _a);
}

inline void IPmacDevice::SetInterruptsEnabled(int dwDevice, bool rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 250, _a);
}

inline void IPmacDevice::SetJogReturn(int dwDevice, int mtr)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 251, _a);
}

inline void IPmacDevice::SetMacroIVariableString(int dwDevice, int node, int num, const QString& bsMIVarValue, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&node, (void*)&num, (void*)&bsMIVarValue, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 252, _a);
}

inline void IPmacDevice::SetQuickGather(int dwDevice, int lComMask, int lEncMask, int lDacMask, int lCurMask, bool bEnable, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&lComMask, (void*)&lEncMask, (void*)&lDacMask, (void*)&lCurMask, (void*)&bEnable, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 254, _a);
}

inline void IPmacDevice::SetQuickGatherWithDirectCurrent(int dwDevice, int lComMask, int lEncMask, int lDacMask, int lCurMask, bool bEnable, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&lComMask, (void*)&lEncMask, (void*)&lDacMask, (void*)&lCurMask, (void*)&bEnable, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 255, _a);
}

inline void IPmacDevice::SetUSMonitoringEnabled(int dwDevice, bool rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 256, _a);
}

inline void IPmacDevice::SetUSMonitoringPeriod(int dwDevice, int rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 257, _a);
}

inline void IPmacDevice::SetVariableDouble(int dwDevice, int ch, int num, double newVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&ch, (void*)&num, (void*)&newVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 258, _a);
}

inline void IPmacDevice::SetVariableLong(int dwDevice, int ch, int num, int newVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&ch, (void*)&num, (void*)&newVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 259, _a);
}

inline void IPmacDevice::SlopeEstimation(int dwDevice, const QString& filePath, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&filePath, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 260, _a);
}

inline void IPmacDevice::StartGather(int dwDevice, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 261, _a);
}

inline void IPmacDevice::StopGather(int dwDevice)
{
    void *_a[] = {0, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 262, _a);
}

inline bool IPmacDevice::SysAmpFaultError(int dwDevice, int dwCoord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&dwCoord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 263, _a);
    return qax_result;
}

inline bool IPmacDevice::SysCircleRadError(int dwDevice, int dwCoord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&dwCoord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 264, _a);
    return qax_result;
}

inline bool IPmacDevice::SysFatalFError(int dwDevice, int dwCoord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&dwCoord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 265, _a);
    return qax_result;
}

inline bool IPmacDevice::SysInposition(int dwDevice, int dwCoord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&dwCoord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 266, _a);
    return qax_result;
}

inline bool IPmacDevice::SysMemChecksumError(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 267, _a);
    return qax_result;
}

inline bool IPmacDevice::SysPromChecksumError(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 268, _a);
    return qax_result;
}

inline bool IPmacDevice::SysReEntryError(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 269, _a);
    return qax_result;
}

inline bool IPmacDevice::SysRuntimeError(int dwDevice, int dwCoord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&dwCoord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 270, _a);
    return qax_result;
}

inline bool IPmacDevice::SysServoError(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 271, _a);
    return qax_result;
}

inline bool IPmacDevice::SysWarnFError(int dwDevice, int dwCoord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&dwCoord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 272, _a);
    return qax_result;
}

inline int IPmacDevice::TimRemInMove(int dwDevice, int dwCoord)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&dwCoord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 273, _a);
    return qax_result;
}

inline int IPmacDevice::TimeRemInTATS(int dwDevice, int dwCoord)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&dwCoord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 274, _a);
    return qax_result;
}

inline bool IPmacDevice::USMonitoringEnabled(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 275, _a);
    return qax_result;
}

inline int IPmacDevice::USMonitoringPeriod(int dwDevice)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 276, _a);
    return qax_result;
}

inline void IPmacDevice::UltraLightAnalyze(int dwDevice, QVariant& pVal, int& pActiveNodes)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pVal, (void*)&pActiveNodes};
    qt_metacall(QMetaObject::InvokeMetaMethod, 277, _a);
}

inline void IPmacDevice::UltraLightAnalyzeStruct(int dwDevice, DEVULTRALIGHT_INFO*& pStruct, int& pActiveNodes)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pStruct, (void*)&pActiveNodes};
    qt_metacall(QMetaObject::InvokeMetaMethod, 278, _a);
}

//inline void IPmacDevice::Upload(int dwDevice, PCOMMSERVERLib::DEVUPLOAD pUpload, QString& pData, int& pstatus)
//{
//    void *_a[] = {0, (void*)&dwDevice, (void*)&pUpload, (void*)&pData, (void*)&pstatus};
//    qt_metacall(QMetaObject::InvokeMetaMethod, 279, _a);
//}

inline void IPmacDevice::UploadMacroConfig(int dwDevice, const QString& bsFilePath, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&bsFilePath, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 280, _a);
}

inline void IPmacDevice::WriteGatherFile(int dwDevice, const QString& bsFilePath, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&bsFilePath, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 281, _a);
}

inline bool IPmacDevice::get_DPRTesting(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 282, _a);
    return qax_result;
}

inline void IPmacDevice::strto32f(const QString& str, double& pVal)
{
    void *_a[] = {0, (void*)&str, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 283, _a);
}

inline void IPmacDevice::strtod24(const QString& str, double& pVal)
{
    void *_a[] = {0, (void*)&str, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 284, _a);
}

inline void IPmacDevice::strtod32dp(const QString& str, double& pVal)
{
    void *_a[] = {0, (void*)&str, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 285, _a);
}

inline void IPmacDevice::strtod48f(const QString& str, double& pVal)
{
    void *_a[] = {0, (void*)&str, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 286, _a);
}

inline void IPmacDevice::strtod48l(const QString& str, double& pVal)
{
    void *_a[] = {0, (void*)&str, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 287, _a);
}


inline int PmacDevice::MaxDownloadErrors() const
{
    QVariant qax_result = property("MaxDownloadErrors");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void PmacDevice::SetMaxDownloadErrors(int value){ setProperty("MaxDownloadErrors", QVariant(value)); }

inline void PmacDevice::Abort(int dwDevice)
{
    void *_a[] = {0, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline void PmacDevice::AbortDownload(int dwDevice)
{
    void *_a[] = {0, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void PmacDevice::AbortTest(int dwDevice)
{
    void *_a[] = {0, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void PmacDevice::AddDownloadFile(int dwDevice, const QString& iniFile, const QString& userID, const QString& dlFile, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&iniFile, (void*)&userID, (void*)&dlFile, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void PmacDevice::BackupLinkList(int dwDevice, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline bool PmacDevice::BufferOpen(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline void PmacDevice::CalculateStepStatistics(QVariant& pvData, int stepSize, int I10, int I19, QString& pbsRiseTime, QString& pbsPeakTime, QString& pbsNatFreq, QString& pbsOvershoot, QString& pbsDamping, QString& pbsSettleTime)
{
    void *_a[] = {0, (void*)&pvData, (void*)&stepSize, (void*)&I10, (void*)&I19, (void*)&pbsRiseTime, (void*)&pbsPeakTime, (void*)&pbsNatFreq, (void*)&pbsOvershoot, (void*)&pbsDamping, (void*)&pbsSettleTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline void PmacDevice::ClearGather(int dwDevice)
{
    void *_a[] = {0, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline void PmacDevice::ClearGatherData(int dwDevice)
{
    void *_a[] = {0, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline void PmacDevice::Close(int dwDevice)
{
    void *_a[] = {0, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}

inline void PmacDevice::CollectGatherData(int dwDevice, int& pSources, int& pSamples, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pSources, (void*)&pSamples, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline void PmacDevice::CommandLog(int dwDevice, const QString& bStr, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&bStr, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline void PmacDevice::CompilePLCC(int dwDevice, const QString& inFilePath, const QString& outFilePath, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&inFilePath, (void*)&outFilePath, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
}

inline void PmacDevice::ConvertWordToLong(const QString& word, int& pVal)
{
    void *_a[] = {0, (void*)&word, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline void PmacDevice::ConvertWordToShort(const QString& word, int offset, int& pVal)
{
    void *_a[] = {0, (void*)&word, (void*)&offset, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline void PmacDevice::ConvertWordToStringFloat(const QString& word, QString& pVal)
{
    void *_a[] = {0, (void*)&word, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}

inline void PmacDevice::CreateIncrementalFinePhasePLC(int dwDevice, const QString& filePath, int PLCNumber, int motor, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&filePath, (void*)&PLCNumber, (void*)&motor, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void PmacDevice::DPRAddressRange(int dwDevice, bool bUpper, bool bPC, int& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&bUpper, (void*)&bPC, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline void PmacDevice::DPRAsciiStrToRot(int dwDevice, const QString& inpstr, int bufnum, int& pstatus)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&inpstr, (void*)&bufnum, (void*)&pstatus};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
}

inline void PmacDevice::DPRAsciiStrToRotEx(int dwDevice, const QString& inpstr, int bufnum, bool bSendRemaining, int& pstatus)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&inpstr, (void*)&bufnum, (void*)&bSendRemaining, (void*)&pstatus};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
}

inline bool PmacDevice::DPRAvailable(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
    return qax_result;
}

inline void PmacDevice::DPRBackGroundVar(int dwDevice, bool bOn)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&bOn};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline void PmacDevice::DPRBackground(int dwDevice, int on, int period, int coord, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&on, (void*)&period, (void*)&coord, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
}

inline bool PmacDevice::DPRCoordRptEnabled(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
    return qax_result;
}

inline int PmacDevice::DPRCoordRptMSec(int dwDevice)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
    return qax_result;
}

inline int PmacDevice::DPRCoordRptMax(int dwDevice)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
    return qax_result;
}

inline void PmacDevice::DPRDWordBitSet(int dwDevice, int offset, int bit, bool& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&offset, (void*)&bit, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
}

inline void PmacDevice::DPRFloat(qlonglong d, double scale, double& pVal)
{
    void *_a[] = {0, (void*)&d, (void*)&scale, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
}

inline void PmacDevice::DPRGetCoordRpt(int dwDevice, int coord, DEVBGCOORD*& pStruct, int& pServo, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&coord, (void*)&pStruct, (void*)&pServo, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
}

inline void PmacDevice::DPRGetCoordRptTurbo(int dwDevice, int coord, DEVBGCOORDTURBO*& pStruct, int& pServo, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&coord, (void*)&pStruct, (void*)&pServo, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
}

inline void PmacDevice::DPRGetDWordMask(int dwDevice, int offset, int mask, int& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&offset, (void*)&mask, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
}

inline void PmacDevice::DPRGetFixedDouble(int dwDevice, int address, double& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&address, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}

inline void PmacDevice::DPRGetFloat(int dwDevice, int offset, double& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&offset, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
}

inline void PmacDevice::DPRGetLong(int dwDevice, int offset, int& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&offset, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
}

inline void PmacDevice::DPRGetLongDouble(int dwDevice, int address, double& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&address, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
}

inline void PmacDevice::DPRGetMem(int dwDevice, int offset, int bytes, QVariant& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&offset, (void*)&bytes, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
}

inline void PmacDevice::DPRGetMotorRpt(int dwDevice, int motor, DEVFGMOTOR*& pStruct, int& pServo, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&pStruct, (void*)&pServo, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
}

inline void PmacDevice::DPRGetMotorRptTurbo(int dwDevice, int motor, DEVFGMOTORTURBO*& pStruct, int& pServo, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&pStruct, (void*)&pServo, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
}

inline void PmacDevice::DPRGetShort(int dwDevice, int address, int& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&address, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
}

inline bool PmacDevice::DPRMotorRptEnabled(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
    return qax_result;
}

inline int PmacDevice::DPRMotorRptMSec(int dwDevice)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
    return qax_result;
}

inline int PmacDevice::DPRMotorRptMask(int dwDevice)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
    return qax_result;
}

inline void PmacDevice::DPRResetDWordBit(int dwDevice, int offset, int bit, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&offset, (void*)&bit, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
}

inline void PmacDevice::DPRRotBufClr(int dwDevice, int bufnum)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&bufnum};
    qt_metacall(QMetaObject::InvokeMetaMethod, 84, _a);
}

inline void PmacDevice::DPRRotBufInit(int dwDevice, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 85, _a);
}

inline void PmacDevice::DPRRotBufRemove(int dwDevice, int bufnum)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&bufnum};
    qt_metacall(QMetaObject::InvokeMetaMethod, 86, _a);
}

inline void PmacDevice::DPRSetDWordBit(int dwDevice, int offset, int bit, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&offset, (void*)&bit, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 87, _a);
}

inline void PmacDevice::DPRSetDWordMask(int dwDevice, int offset, int mask, int Val)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&offset, (void*)&mask, (void*)&Val};
    qt_metacall(QMetaObject::InvokeMetaMethod, 88, _a);
}

inline void PmacDevice::DPRSetFloat(int dwDevice, int offset, double newVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&offset, (void*)&newVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 89, _a);
}

inline void PmacDevice::DPRSetLong(int dwDevice, int offset, int newVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&offset, (void*)&newVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 90, _a);
}

inline void PmacDevice::DPRSetMem(int dwDevice, int offset, int bytes, const QVariant& Val, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&offset, (void*)&bytes, (void*)&Val, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 91, _a);
}

inline void PmacDevice::DPRSetRotBuf(int dwDevice, bool on)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&on};
    qt_metacall(QMetaObject::InvokeMetaMethod, 92, _a);
}

inline void PmacDevice::DPRSetShort(int dwDevice, int address, int newVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&address, (void*)&newVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 93, _a);
}

inline void PmacDevice::DPRSetupBuffers(uint dwDevice, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 94, _a);
}

inline int PmacDevice::DPRSize(int dwDevice)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 95, _a);
    return qax_result;
}

inline void PmacDevice::DPRTest(int dwDevice, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 96, _a);
}

inline void PmacDevice::DPRVarBufInit(int dwDevice, const QVariant& vAddressArray, const QVariant& vTypeArray, int& pHandle, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&vAddressArray, (void*)&vTypeArray, (void*)&pHandle, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 97, _a);
}

inline void PmacDevice::DPRVarBufRead(int dwDevice, int h, int entryNum, QVariant& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&h, (void*)&entryNum, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 98, _a);
}

inline void PmacDevice::DPRVarBufReadAll(int dwDevice, int h, QVariant& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&h, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 99, _a);
}

inline void PmacDevice::DPRVarBufRemove(int dwDevice, int index, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&index, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 100, _a);
}

inline void PmacDevice::DPRVarBufWrite(int dwDevice, const QVariant& vData, const QVariant& vAddresses, const QVariant& vTypes, int& pWritten)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&vData, (void*)&vAddresses, (void*)&vTypes, (void*)&pWritten};
    qt_metacall(QMetaObject::InvokeMetaMethod, 101, _a);
}

inline void PmacDevice::DPRVarBufWriteEx(int dwDevice, const QVariant& vData, int& pWritten)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&vData, (void*)&pWritten};
    qt_metacall(QMetaObject::InvokeMetaMethod, 102, _a);
}

inline void PmacDevice::DataCollect(int dwDevice, QVariant& pvArray, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pvArray, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 103, _a);
}

inline bool PmacDevice::DataCollectionEnabled(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 104, _a);
    return qax_result;
}

inline int PmacDevice::DataCollectionResolution(int dwDevice)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 105, _a);
    return qax_result;
}

inline void PmacDevice::DataGather(int dwDevice, QList<DEVDATA>*& pvArray, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pvArray, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 106, _a);
}

inline void PmacDevice::DataStart(int dwDevice, int resolution, int period)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&resolution, (void*)&period};
    qt_metacall(QMetaObject::InvokeMetaMethod, 107, _a);
}

inline void PmacDevice::DataStop(int dwDevice)
{
    void *_a[] = {0, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 108, _a);
}

inline void PmacDevice::DifferentiateTheData(QVariant& pvData, int I10, int I19, int& pMinVal, int& pMaxVal)
{
    void *_a[] = {0, (void*)&pvData, (void*)&I10, (void*)&I19, (void*)&pMinVal, (void*)&pMaxVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 109, _a);
}

inline void PmacDevice::DoACurrentLoopStep(int dwDevice, int motor, int dwellTime, int magnitude, bool bAutoTune, QString& pbsCTSCurrent, double pwmDutyCycle, int divisor, bool bUltra)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&dwellTime, (void*)&magnitude, (void*)&bAutoTune, (void*)&pbsCTSCurrent, (void*)&pwmDutyCycle, (void*)&divisor, (void*)&bUltra};
    qt_metacall(QMetaObject::InvokeMetaMethod, 110, _a);
}

inline void PmacDevice::DoACurrentLoopStepBrush(int dwDevice, int motor, int dwellTime, int magnitude, bool bAutoTune, QString& pbsCTSCurrent, double pwmDutyCycle, int divisor, bool bUltra)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&dwellTime, (void*)&magnitude, (void*)&bAutoTune, (void*)&pbsCTSCurrent, (void*)&pwmDutyCycle, (void*)&divisor, (void*)&bUltra};
    qt_metacall(QMetaObject::InvokeMetaMethod, 111, _a);
}

inline void PmacDevice::DoAGantryParabolic(int dwDevice, int motor, int motor2, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&motor2, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 112, _a);
}

inline void PmacDevice::DoAGantryParabolicMove(int dwDevice, int motor, int motor2, int stepSize, int stepTime, bool bBiDirectional, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&motor2, (void*)&stepSize, (void*)&stepTime, (void*)&bBiDirectional, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 113, _a);
}

inline void PmacDevice::DoAGantryPositionLoopStep(int dwDevice, int motor, int motor2, int stepSize, int stepTime, bool bBiDirectional, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&motor2, (void*)&stepSize, (void*)&stepTime, (void*)&bBiDirectional, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 114, _a);
}

inline void PmacDevice::DoAParabolicMove(int dwDevice, int motor, int stepSize, int stepTime, bool bBiDirectional, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&stepSize, (void*)&stepTime, (void*)&bBiDirectional, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 115, _a);
}

inline void PmacDevice::DoAPositionLoopStep(int dwDevice, int motor, int stepSize, int stepTime, bool bBiDirectional, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&stepSize, (void*)&stepTime, (void*)&bBiDirectional, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 116, _a);
}

inline bool PmacDevice::DoChecksums(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 117, _a);
    return qax_result;
}

inline void PmacDevice::Download(int dwDevice, const QString& filePath, bool bMacro, bool bMap, bool bLog, bool bDnld, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&filePath, (void*)&bMacro, (void*)&bMap, (void*)&bLog, (void*)&bDnld, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 118, _a);
}

inline void PmacDevice::DownloadAndRunRoughPhasePLC(int dwDevice, int motor, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 119, _a);
}

inline void PmacDevice::DownloadAutoTuningPLC(int dwDevice, int motor, bool bCurrentLoop, bool bBypassJog, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&bCurrentLoop, (void*)&bBypassJog, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 120, _a);
}

inline void PmacDevice::DownloadCurrentFeedbackTest(int dwDevice, int mtr, double pwmDutyCycle, int pwmFreq, bool bMacro, bool bUltra, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&mtr, (void*)&pwmDutyCycle, (void*)&pwmFreq, (void*)&bMacro, (void*)&bUltra, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 121, _a);
}

inline void PmacDevice::DownloadCurrentSixStepTest(int dwDevice, int motor, double pwmDutyCycle, bool bMacro, bool bUltra, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&pwmDutyCycle, (void*)&bMacro, (void*)&bUltra, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 122, _a);
}

inline void PmacDevice::DownloadFile(int dwDevice, const QString& filePath)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&filePath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 123, _a);
}

inline void PmacDevice::DownloadFirmwareFile(int dwDevice, const QString& filePath, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&filePath, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 124, _a);
}

inline void PmacDevice::DownloadGantryAutoTuningPLC(int dwDevice, int motor, int motor2, bool bCurrentLoop, bool bBypassJog, double MaxTravel, int time, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&motor2, (void*)&bCurrentLoop, (void*)&bBypassJog, (void*)&MaxTravel, (void*)&time, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 125, _a);
}

inline void PmacDevice::DownloadGantryAutoTuningPLCP1(int dwDevice, int motor, int motor2, bool bCurrentLoop, bool bBypassJog, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&motor2, (void*)&bCurrentLoop, (void*)&bBypassJog, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 126, _a);
}

inline void PmacDevice::DownloadOpenLoopTest(int dwDevice, int motor, int magnitude, int time, int reps, bool bGatherCurrents, bool bMacro, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&magnitude, (void*)&time, (void*)&reps, (void*)&bGatherCurrents, (void*)&bMacro, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 127, _a);
}

inline void PmacDevice::DownloadOpenLoopTest1(int dwDevice, int motor, int magnitude, int time, int reps, bool bGatherCurrents, bool bMacro, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&magnitude, (void*)&time, (void*)&reps, (void*)&bGatherCurrents, (void*)&bMacro, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 128, _a);
}

inline void PmacDevice::DownloadOpenLoopTestForPMAC1(int dwDevice, int motor, int magnitude, int time, int reps, bool bGatherCurrents, bool bMacro, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&magnitude, (void*)&time, (void*)&reps, (void*)&bGatherCurrents, (void*)&bMacro, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 129, _a);
}

inline void PmacDevice::DownloadPosLimitPLC(int dwDevice, int motor, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 130, _a);
}

inline void PmacDevice::DownloadUVWSixStepTest(int dwDevice, int motor, double pwmDutyCycle, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&pwmDutyCycle, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 131, _a);
}

inline void PmacDevice::DownloadVelLimitPLC(int dwDevice, int motor, int maxspd, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&maxspd, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 132, _a);
}

inline void PmacDevice::DownloadVoltageSixStepTest(int dwDevice, int mtr, double pwmDutyCycle, bool bMacro, bool bUltra, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&mtr, (void*)&pwmDutyCycle, (void*)&bMacro, (void*)&bUltra, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 133, _a);
}

inline bool PmacDevice::Downloading(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 134, _a);
    return qax_result;
}

inline bool PmacDevice::GatherEnabled(int dwDevice, int num)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&num};
    qt_metacall(QMetaObject::InvokeMetaMethod, 135, _a);
    return qax_result;
}

inline DEVGATMODE PmacDevice::GatherMode(int dwDevice)
{
    DEVGATMODE qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 136, _a);
    return qax_result;
}

inline int PmacDevice::GatherPeriod(int dwDevice)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 137, _a);
    return qax_result;
}

inline double PmacDevice::GatherSampleTime(int dwDevice)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 138, _a);
    return qax_result;
}

inline void PmacDevice::GetAsciiComm(int dwDevice, DEVASCIIMODE& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 139, _a);
}

inline void PmacDevice::GetBiasPos(int dwDevice, int mtr, double scale, double& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&mtr, (void*)&scale, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 140, _a);
}

inline void PmacDevice::GetBitValue(const QString& hexStr, int bit, bool& pVal)
{
    void *_a[] = {0, (void*)&hexStr, (void*)&bit, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 141, _a);
}

inline void PmacDevice::GetCommandLogging(int dwDevice, bool& pbON)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pbON};
    qt_metacall(QMetaObject::InvokeMetaMethod, 142, _a);
}

inline void PmacDevice::GetCommandedPos(int dwDevice, int mtr, double scale, double& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&mtr, (void*)&scale, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 143, _a);
}

inline void PmacDevice::GetCompensationPos(int dwDevice, int mtr, double scale, double& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&mtr, (void*)&scale, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 144, _a);
}

inline void PmacDevice::GetControlResponse(int dwDevice, int question, QString& pAnswer)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&question, (void*)&pAnswer};
    qt_metacall(QMetaObject::InvokeMetaMethod, 145, _a);
}

inline void PmacDevice::GetControlResponseEx(int dwDevice, int question, QString& pAnswer, int& pstatus)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&question, (void*)&pAnswer, (void*)&pstatus};
    qt_metacall(QMetaObject::InvokeMetaMethod, 146, _a);
}

inline void PmacDevice::GetControlValues(int dwDevice, int ctrlCh, QVariant& pVariant, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&ctrlCh, (void*)&pVariant, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 147, _a);
}

inline void PmacDevice::GetCoordStatus(int dwDevice, int dwCoord, int& pStatusX, int& pStatusY, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&dwCoord, (void*)&pStatusX, (void*)&pStatusY, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 148, _a);
}

inline void PmacDevice::GetEnumeration(int dwDevice, int& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 149, _a);
}

inline void PmacDevice::GetFeedRateAndMode(int dwDevice, int dwCoord, double& pRate, bool& pMode)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&dwCoord, (void*)&pRate, (void*)&pMode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 150, _a);
}

inline void PmacDevice::GetFirmwareType(int dwDevice, DEVPMACFIRMWARETYPE& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 151, _a);
}

inline void PmacDevice::GetFirstPlc(int dwDevice, bool& pbEnabled, int& pStartAdr, int& pLastAdr, int& pSize, bool& pbMore)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pbEnabled, (void*)&pStartAdr, (void*)&pLastAdr, (void*)&pSize, (void*)&pbMore};
    qt_metacall(QMetaObject::InvokeMetaMethod, 152, _a);
}

inline void PmacDevice::GetFirstPlcc(int dwDevice, bool& pbLoaded, bool& pbEnabled, int& pStartAdr, int& pLastAdr, int& pSize, bool& pbMore)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pbLoaded, (void*)&pbEnabled, (void*)&pStartAdr, (void*)&pLastAdr, (void*)&pSize, (void*)&pbMore};
    qt_metacall(QMetaObject::InvokeMetaMethod, 153, _a);
}

inline void PmacDevice::GetFollowError(int dwDevice, int mtr, double scale, double& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&mtr, (void*)&scale, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 154, _a);
}

inline void PmacDevice::GetGather(int dwDevice, int num, QString& pStr, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&num, (void*)&pStr, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 155, _a);
}

inline void PmacDevice::GetGatherPoint(int dwDevice, int sourceNum, int sampleNum, double& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&sourceNum, (void*)&sampleNum, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 156, _a);
}

inline void PmacDevice::GetGatherSamples(int dwDevice, int sourceNum, QVariant& pVariant, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&sourceNum, (void*)&pVariant, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 157, _a);
}

inline void PmacDevice::GetGlobalStatus(int dwDevice, int& pStatusX, int& pStatusY, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pStatusX, (void*)&pStatusY, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 158, _a);
}

inline void PmacDevice::GetIVariableDouble(int dwDevice, int num, double def, double& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&num, (void*)&def, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 159, _a);
}

inline void PmacDevice::GetIVariableLong(int dwDevice, int num, int def, int& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&num, (void*)&def, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 160, _a);
}

inline void PmacDevice::GetLastCommErrorStr(int dwDevice, QString& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 161, _a);
}

inline void PmacDevice::GetLocAndEnum(int dwDevice, int& pLoc, int& pEnum, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pLoc, (void*)&pEnum, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 162, _a);
}

inline void PmacDevice::GetMacroIVariableLong(int dwDevice, int node, int num, int def, int& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&node, (void*)&num, (void*)&def, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 163, _a);
}

inline void PmacDevice::GetMacroIVariableString(int dwDevice, int node, int num, const QString& bsDefault, QString& pbsVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&node, (void*)&num, (void*)&bsDefault, (void*)&pbsVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 164, _a);
}

inline void PmacDevice::GetMacroNodeInfo(int dwDevice, int modeNum, bool& pbEnabled, bool& pbIsIONode, int& pID)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&modeNum, (void*)&pbEnabled, (void*)&pbIsIONode, (void*)&pID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 165, _a);
}

inline void PmacDevice::GetMacroNodes(int dwDevice, int& pNumMacroStations, int& pNumActiveNodes)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pNumMacroStations, (void*)&pNumActiveNodes};
    qt_metacall(QMetaObject::InvokeMetaMethod, 166, _a);
}

inline void PmacDevice::GetMasterPos(int dwDevice, int mtr, double scale, double& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&mtr, (void*)&scale, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 167, _a);
}

inline void PmacDevice::GetMotorMotionMode(int dwDevice, int dwMotor, DEVMOTION& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&dwMotor, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 168, _a);
}

inline void PmacDevice::GetMotorStatus(int dwDevice, int lMotor, int& pStatusX, int& pStatusY, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&lMotor, (void*)&pStatusX, (void*)&pStatusY, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 169, _a);
}

inline void PmacDevice::GetNTCoordinateStatusEx(int dwDevice, int dwCoord, DEVCSNONTURBO*& pstatus, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&dwCoord, (void*)&pstatus, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 170, _a);
}

inline void PmacDevice::GetNTGlobalStatusEx(int dwDevice, DEVGSNONTURBO*& pstatus, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pstatus, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 171, _a);
}

inline void PmacDevice::GetNTMotorStatusEx(int dwDevice, int lMotor, DEVMSNONTURBO*& pstatus, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&lMotor, (void*)&pstatus, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 172, _a);
}

inline void PmacDevice::GetNetActualPosition(int dwDevice, int mtr, double scale, double& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&mtr, (void*)&scale, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 173, _a);
}

inline void PmacDevice::GetNextPlc(int dwDevice, bool& pbEnabled, int& pStartAdr, int& pLastAdr, int& pSize, bool& pbMore)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pbEnabled, (void*)&pStartAdr, (void*)&pLastAdr, (void*)&pSize, (void*)&pbMore};
    qt_metacall(QMetaObject::InvokeMetaMethod, 174, _a);
}

inline void PmacDevice::GetNextPlcc(int dwDevice, bool& pbLoaded, bool& pbEnabled, int& pStartAdr, int& pLastAdr, int& pSize, bool& pbMore)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pbLoaded, (void*)&pbEnabled, (void*)&pStartAdr, (void*)&pLastAdr, (void*)&pSize, (void*)&pbMore};
    qt_metacall(QMetaObject::InvokeMetaMethod, 175, _a);
}

inline void PmacDevice::GetNumDeviceKeys(int& pVal)
{
    void *_a[] = {0, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 176, _a);
}

inline void PmacDevice::GetNumGatherSamples(int dwDevice, int& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 177, _a);
}

inline void PmacDevice::GetNumGatherSources(int dwDevice, int& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 178, _a);
}

inline void PmacDevice::GetPlcStatus(int dwDevice, int& pNumPlc, int& pNumPlcc, int& pI5)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pNumPlc, (void*)&pNumPlcc, (void*)&pI5};
    qt_metacall(QMetaObject::InvokeMetaMethod, 179, _a);
}

inline void PmacDevice::GetPlcStatusStruct(int dwDevice, DEVTOTAL_PLC_STATUS_STRUCT*& pStruct, int& pPrograms)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pStruct, (void*)&pPrograms};
    qt_metacall(QMetaObject::InvokeMetaMethod, 180, _a);
}

inline void PmacDevice::GetPlcStatusStructure(int dwDevice, QVariant& pVal, int& pPrograms)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pVal, (void*)&pPrograms};
    qt_metacall(QMetaObject::InvokeMetaMethod, 181, _a);
}

inline void PmacDevice::GetPmacLocation(int dwDevice, DEVLOCATIONTYPE& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 182, _a);
}

inline void PmacDevice::GetPmacType(int dwDevice, DEVPMACTYPE& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 183, _a);
}

inline void PmacDevice::GetPosition(int dwDevice, int mtr, double scale, double& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&mtr, (void*)&scale, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 184, _a);
}

inline void PmacDevice::GetProgExecPoint(int dwDevice, int dwCoord, int& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&dwCoord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 185, _a);
}

inline void PmacDevice::GetProgramInfo(int dwDevice, bool bPlc, int num, int& pSAdr, int& pFAdr)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&bPlc, (void*)&num, (void*)&pSAdr, (void*)&pFAdr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 186, _a);
}

inline void PmacDevice::GetProgramMode(int dwDevice, int dwCoord, DEVPROGRAMMODE& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&dwCoord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 187, _a);
}

inline void PmacDevice::GetProgramMotionMode(int dwDevice, int dwCoord, DEVMOTIONMODE& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&dwCoord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 188, _a);
}

inline void PmacDevice::GetResponse(int dwDevice, const QString& question, QString& pAnswer)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&question, (void*)&pAnswer};
    qt_metacall(QMetaObject::InvokeMetaMethod, 189, _a);
}

inline void PmacDevice::GetResponseEx(int dwDevice, const QString& question, bool bAddLF, QString& pAnswer, int& pstatus)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&question, (void*)&bAddLF, (void*)&pAnswer, (void*)&pstatus};
    qt_metacall(QMetaObject::InvokeMetaMethod, 190, _a);
}

inline void PmacDevice::GetResponseProgress(int dwDevice, const QString& question, bool bAddLF, QString& pAnswer, int& pstatus)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&question, (void*)&bAddLF, (void*)&pAnswer, (void*)&pstatus};
    qt_metacall(QMetaObject::InvokeMetaMethod, 191, _a);
}

inline void PmacDevice::GetRomDate(int dwDevice, QString& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 192, _a);
}

inline void PmacDevice::GetRomVersion(int dwDevice, QString& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 193, _a);
}

inline void PmacDevice::GetRotBufFull(int dwDevice, int dwCoord, bool& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&dwCoord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 194, _a);
}

inline void PmacDevice::GetTargetPos(int dwDevice, int mtr, double scale, double& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&mtr, (void*)&scale, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 195, _a);
}

inline void PmacDevice::GetTurboCoordinateStatusEx(int dwDevice, int dwCoord, DEVCSTURBO*& pstatus, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&dwCoord, (void*)&pstatus, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 196, _a);
}

inline void PmacDevice::GetTurboGlobalStatusEx(int dwDevice, DEVGSTURBO*& pstatus, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pstatus, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 197, _a);
}

inline void PmacDevice::GetTurboMotorStatusEx(int dwDevice, int lMotor, DEVMSTURBO*& pstatus, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&lMotor, (void*)&pstatus, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 198, _a);
}

inline void PmacDevice::GetVariableDouble(int dwDevice, int ch, int num, double def, double& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&ch, (void*)&num, (void*)&def, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 199, _a);
}

inline void PmacDevice::GetVariableLong(int dwDevice, int ch, int num, int def, int& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&ch, (void*)&num, (void*)&def, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 200, _a);
}

inline void PmacDevice::GetVariableStr(int dwDevice, int ch, int num, QString& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&ch, (void*)&num, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 201, _a);
}

inline void PmacDevice::GetVelocity(int dwDevice, int mtr, double scale, double& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&mtr, (void*)&scale, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 202, _a);
}

inline void PmacDevice::GetWhyCSNotMoving(int dwDevice, int cs, int& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&cs, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 203, _a);
}

inline void PmacDevice::GetWhyCSNotMovingStr(int err, QString& pVal)
{
    void *_a[] = {0, (void*)&err, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 204, _a);
}

inline void PmacDevice::GetWhyMotorNotMoving(int dwDevice, int motor, int& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 205, _a);
}

inline void PmacDevice::GetWhyMotorNotMovingStr(int err, QString& pVal)
{
    void *_a[] = {0, (void*)&err, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 206, _a);
}

inline bool PmacDevice::InBootStrapMode(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 207, _a);
    return qax_result;
}

inline void PmacDevice::InitGather(int dwDevice, int size, double msec, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&size, (void*)&msec, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 208, _a);
}

inline void PmacDevice::InitPlotGather(int dwDevice, int size, int period, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&size, (void*)&period, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 209, _a);
}

inline int PmacDevice::InterruptMask(int dwDevice)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 210, _a);
    return qax_result;
}

inline bool PmacDevice::InterruptsEnabled(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 211, _a);
    return qax_result;
}

inline bool PmacDevice::IsAnyPlcRunning(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 212, _a);
    return qax_result;
}

inline bool PmacDevice::IsTurbo(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 213, _a);
    return qax_result;
}

inline int PmacDevice::LastCommError(int dwDevice)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 214, _a);
    return qax_result;
}

inline void PmacDevice::LowPassFilterTheData(QVariant& pvData, const QString& bsCurrent)
{
    void *_a[] = {0, (void*)&pvData, (void*)&bsCurrent};
    qt_metacall(QMetaObject::InvokeMetaMethod, 215, _a);
}

inline void PmacDevice::MagEstimation(int dwDevice, const QString& filePath, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&filePath, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 216, _a);
}

inline void PmacDevice::MapDeviceNumToEnum(int location, int enumeration, int& pDeviceNumber)
{
    void *_a[] = {0, (void*)&location, (void*)&enumeration, (void*)&pDeviceNumber};
    qt_metacall(QMetaObject::InvokeMetaMethod, 217, _a);
}

inline void PmacDevice::MapLocAndEnumFromDeviceNum(int dwDevice, int& pLocation, int& pEnumeration)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pLocation, (void*)&pEnumeration};
    qt_metacall(QMetaObject::InvokeMetaMethod, 218, _a);
}

inline void PmacDevice::ModBusCommand(int dwDevice, uint command, QVariant& counters, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&command, (void*)&counters, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 219, _a);
}

inline void PmacDevice::ModbusActive(int dwDevice, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 220, _a);
}

inline void PmacDevice::ModbusAvailable(int dwDevice, uint command, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&command, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 221, _a);
}

inline bool PmacDevice::MotionBufOpen(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 222, _a);
    return qax_result;
}

inline bool PmacDevice::MotionBufferOpen(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 223, _a);
    return qax_result;
}

inline bool PmacDevice::MotorAmpEnabled(int dwDevice, int mtr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 224, _a);
    return qax_result;
}

inline bool PmacDevice::MotorAmpFault(int dwDevice, int mtr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 225, _a);
    return qax_result;
}

inline bool PmacDevice::MotorDataBlockError(int dwDevice, int mtr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 226, _a);
    return qax_result;
}

inline bool PmacDevice::MotorEnabled(int dwDevice, int mtr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 227, _a);
    return qax_result;
}

inline bool PmacDevice::MotorFatalFError(int dwDevice, int mtr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 228, _a);
    return qax_result;
}

inline bool PmacDevice::MotorHandwheelEnabled(int dwDevice, int mtr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 229, _a);
    return qax_result;
}

inline bool PmacDevice::MotorHomeComplete(int dwDevice, int mtr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 230, _a);
    return qax_result;
}

inline bool PmacDevice::MotorInPosition(int dwDevice, int mtr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 231, _a);
    return qax_result;
}

inline bool PmacDevice::MotorOnNegLimit(int dwDevice, int mtr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 232, _a);
    return qax_result;
}

inline bool PmacDevice::MotorOnPosLimit(int dwDevice, int mtr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 233, _a);
    return qax_result;
}

inline bool PmacDevice::MotorOnPositionLimit(int dwDevice, int mtr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 234, _a);
    return qax_result;
}

inline bool PmacDevice::MotorOpenLoop(int dwDevice, int mtr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 235, _a);
    return qax_result;
}

inline bool PmacDevice::MotorPhased(int dwDevice, int mtr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 236, _a);
    return qax_result;
}

inline bool PmacDevice::MotorWarnFError(int dwDevice, int mtr)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 237, _a);
    return qax_result;
}

inline void PmacDevice::MultiDownload(int dwDevice, const QString& outFile, const QString& iniFile, const QString& userID, bool bMacro, bool bMap, bool bLog, bool bDnld, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&outFile, (void*)&iniFile, (void*)&userID, (void*)&bMacro, (void*)&bMap, (void*)&bLog, (void*)&bDnld, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 238, _a);
}

inline void PmacDevice::Open(int dwDevice, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 239, _a);
}

inline void PmacDevice::PhaseMotor(int dwDevice, const QString& question, int& pStatuss)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&question, (void*)&pStatuss};
    qt_metacall(QMetaObject::InvokeMetaMethod, 240, _a);
}

inline void PmacDevice::PmacReset(int dwDevice, const QString& question, bool bAsciiRingComm, int& pstatus)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&question, (void*)&bAsciiRingComm, (void*)&pstatus};
    qt_metacall(QMetaObject::InvokeMetaMethod, 241, _a);
}

inline void PmacDevice::PmacSave(int dwDevice, const QString& question, int& pstatus)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&question, (void*)&pstatus};
    qt_metacall(QMetaObject::InvokeMetaMethod, 242, _a);
}

inline bool PmacDevice::ProgramContMotion(int dwDevice, int dwCoord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&dwCoord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 243, _a);
    return qax_result;
}

inline bool PmacDevice::ProgramContRequest(int dwDevice, int dwCoord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&dwCoord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 244, _a);
    return qax_result;
}

inline bool PmacDevice::ProgramFeedMode(int dwDevice, int dwCoord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&dwCoord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 245, _a);
    return qax_result;
}

inline int PmacDevice::ProgramRemaining(int dwDevice, int dwCoord)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&dwCoord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 246, _a);
    return qax_result;
}

inline bool PmacDevice::ProgramRunning(int dwDevice, int dwCoord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&dwCoord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 247, _a);
    return qax_result;
}

inline bool PmacDevice::ProgramStepping(int dwDevice, int dwCoord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&dwCoord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 248, _a);
    return qax_result;
}

inline void PmacDevice::RawGetControlResponseEx(int dwDevice, int question, QString& pAnswer, int& pstatus)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&question, (void*)&pAnswer, (void*)&pstatus};
    qt_metacall(QMetaObject::InvokeMetaMethod, 249, _a);
}

inline void PmacDevice::RawGetResponseEx(int dwDevice, const QString& question, bool bAddLF, QString& pAnswer, int& pstatus)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&question, (void*)&bAddLF, (void*)&pAnswer, (void*)&pstatus};
    qt_metacall(QMetaObject::InvokeMetaMethod, 250, _a);
}

inline void PmacDevice::ReadGatherFile(int dwDevice, const QString& bsFilePath, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&bsFilePath, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 251, _a);
}

inline void PmacDevice::ReadResultsFromCurrentFeedbackTest(int dwDevice, int mtr, int& pVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&mtr, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 252, _a);
}

inline void PmacDevice::ReadResultsFromSixStepTest(int dwDevice, bool bSipFirstStep, QVariant& pvStepArray, int& pResult)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&bSipFirstStep, (void*)&pvStepArray, (void*)&pResult};
    qt_metacall(QMetaObject::InvokeMetaMethod, 253, _a);
}

inline void PmacDevice::ReadResultsFromUVWSixStepTest(int dwDevice, QVariant& pvArray, int& pResult)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pvArray, (void*)&pResult};
    qt_metacall(QMetaObject::InvokeMetaMethod, 254, _a);
}

inline void PmacDevice::RemoveDownloadFile(int dwDevice, const QString& iniFile, const QString& userID, const QString& dlFile, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&iniFile, (void*)&userID, (void*)&dlFile, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 255, _a);
}

inline void PmacDevice::RenumberFiles(int dwDevice, int fileNumber, const QString& iniFile)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&fileNumber, (void*)&iniFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 256, _a);
}

inline void PmacDevice::RestoreLinkList(const QString& firmwareVersion, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&firmwareVersion, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 257, _a);
}

inline void PmacDevice::RestoreModifiedIVars(int dwDevice, int motor)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&motor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 258, _a);
}

inline bool PmacDevice::RotaryBufferOpen(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 259, _a);
    return qax_result;
}

inline void PmacDevice::SelectDevice(int hWindow, int& pDeviceNumber, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&hWindow, (void*)&pDeviceNumber, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 260, _a);
}

inline void PmacDevice::SendCommand(int dwDevice, const QString& cmd, int& pstatus)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&cmd, (void*)&pstatus};
    qt_metacall(QMetaObject::InvokeMetaMethod, 261, _a);
}

inline void PmacDevice::SetAsciiComm(int dwDevice, PCOMMSERVERLib::DEVASCIIMODE newVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&newVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 262, _a);
}

inline void PmacDevice::SetChecksums(int dwDevice, bool bActive)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&bActive};
    qt_metacall(QMetaObject::InvokeMetaMethod, 263, _a);
}

inline void PmacDevice::SetCommandLogging(int dwDevice, bool bOn, const QString& bsFilePath, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&bOn, (void*)&bsFilePath, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 264, _a);
}

inline void PmacDevice::SetCriticalIVars(int dwDevice, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 265, _a);
}

inline void PmacDevice::SetCurrentGather(int dwDevice, int mask, bool bEnable, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&mask, (void*)&bEnable, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 266, _a);
}

inline void PmacDevice::SetDPRCoordRptEnabled(int dwDevice, bool rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 267, _a);
}

inline void PmacDevice::SetDPRCoordRptMSec(int dwDevice, int rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 268, _a);
}

inline void PmacDevice::SetDPRCoordRptMax(int dwDevice, int rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 269, _a);
}

inline void PmacDevice::SetDPRMotorRptEnabled(int dwDevice, bool rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 270, _a);
}

inline void PmacDevice::SetDPRMotorRptMSec(int dwDevice, int rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 271, _a);
}

inline void PmacDevice::SetDPRMotorRptMask(int dwDevice, int rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 272, _a);
}

inline void PmacDevice::SetDoChecksums(int dwDevice, bool rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 273, _a);
}

inline void PmacDevice::SetGather(int dwDevice, int num, const QString& str, bool bEnable, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&num, (void*)&str, (void*)&bEnable, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 274, _a);
}

inline void PmacDevice::SetGatherEnabled(int dwDevice, int num, bool rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&num, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 275, _a);
}

inline void PmacDevice::SetGatherMode(int dwDevice, PCOMMSERVERLib::DEVGATMODE rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 276, _a);
}

inline void PmacDevice::SetGatherPeriod(int dwDevice, int rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 277, _a);
}

inline void PmacDevice::SetGatherSampleTime(int dwDevice, double rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 278, _a);
}

inline void PmacDevice::SetIVarForFeedback(int dwDevice, int ivar, int address, PCOMMSERVERLib::DEVFEEDBACKTYPE fbType, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&ivar, (void*)&address, (void*)&fbType, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 279, _a);
}

inline void PmacDevice::SetIVariableDouble(int dwDevice, int num, double newVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&num, (void*)&newVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 280, _a);
}

inline void PmacDevice::SetIVariableLong(int dwDevice, int num, int newVal)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&num, (void*)&newVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 281, _a);
}

inline void PmacDevice::SetInterruptMask(int dwDevice, int rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 282, _a);
}

inline void PmacDevice::SetInterruptsEnabled(int dwDevice, bool rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 283, _a);
}

inline void PmacDevice::SetJogReturn(int dwDevice, int mtr)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&mtr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 284, _a);
}

inline void PmacDevice::SetMacroIVariableString(int dwDevice, int node, int num, const QString& bsMIVarValue, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&node, (void*)&num, (void*)&bsMIVarValue, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 285, _a);
}

inline void PmacDevice::SetQuickGather(int dwDevice, int lComMask, int lEncMask, int lDacMask, int lCurMask, bool bEnable, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&lComMask, (void*)&lEncMask, (void*)&lDacMask, (void*)&lCurMask, (void*)&bEnable, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 287, _a);
}

inline void PmacDevice::SetQuickGatherWithDirectCurrent(int dwDevice, int lComMask, int lEncMask, int lDacMask, int lCurMask, bool bEnable, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&lComMask, (void*)&lEncMask, (void*)&lDacMask, (void*)&lCurMask, (void*)&bEnable, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 288, _a);
}

inline void PmacDevice::SetUSMonitoringEnabled(int dwDevice, bool rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 289, _a);
}

inline void PmacDevice::SetUSMonitoringPeriod(int dwDevice, int rhs)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 290, _a);
}

inline void PmacDevice::SetVariableDouble(int dwDevice, int ch, int num, double newVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&ch, (void*)&num, (void*)&newVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 291, _a);
}

inline void PmacDevice::SetVariableLong(int dwDevice, int ch, int num, int newVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&ch, (void*)&num, (void*)&newVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 292, _a);
}

inline void PmacDevice::SlopeEstimation(int dwDevice, const QString& filePath, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&filePath, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 293, _a);
}

inline void PmacDevice::StartGather(int dwDevice, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 294, _a);
}

inline void PmacDevice::StopGather(int dwDevice)
{
    void *_a[] = {0, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 295, _a);
}

inline bool PmacDevice::SysAmpFaultError(int dwDevice, int dwCoord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&dwCoord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 296, _a);
    return qax_result;
}

inline bool PmacDevice::SysCircleRadError(int dwDevice, int dwCoord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&dwCoord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 297, _a);
    return qax_result;
}

inline bool PmacDevice::SysFatalFError(int dwDevice, int dwCoord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&dwCoord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 298, _a);
    return qax_result;
}

inline bool PmacDevice::SysInposition(int dwDevice, int dwCoord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&dwCoord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 299, _a);
    return qax_result;
}

inline bool PmacDevice::SysMemChecksumError(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 300, _a);
    return qax_result;
}

inline bool PmacDevice::SysPromChecksumError(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 301, _a);
    return qax_result;
}

inline bool PmacDevice::SysReEntryError(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 302, _a);
    return qax_result;
}

inline bool PmacDevice::SysRuntimeError(int dwDevice, int dwCoord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&dwCoord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 303, _a);
    return qax_result;
}

inline bool PmacDevice::SysServoError(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 304, _a);
    return qax_result;
}

inline bool PmacDevice::SysWarnFError(int dwDevice, int dwCoord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&dwCoord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 305, _a);
    return qax_result;
}

inline int PmacDevice::TimRemInMove(int dwDevice, int dwCoord)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&dwCoord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 306, _a);
    return qax_result;
}

inline int PmacDevice::TimeRemInTATS(int dwDevice, int dwCoord)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice, (void*)&dwCoord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 307, _a);
    return qax_result;
}

inline bool PmacDevice::USMonitoringEnabled(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 308, _a);
    return qax_result;
}

inline int PmacDevice::USMonitoringPeriod(int dwDevice)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 309, _a);
    return qax_result;
}

inline void PmacDevice::UltraLightAnalyze(int dwDevice, QVariant& pVal, int& pActiveNodes)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pVal, (void*)&pActiveNodes};
    qt_metacall(QMetaObject::InvokeMetaMethod, 310, _a);
}

inline void PmacDevice::UltraLightAnalyzeStruct(int dwDevice, DEVULTRALIGHT_INFO*& pStruct, int& pActiveNodes)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&pStruct, (void*)&pActiveNodes};
    qt_metacall(QMetaObject::InvokeMetaMethod, 311, _a);
}

//inline void PmacDevice::Upload(int dwDevice, PCOMMSERVERLib::DEVUPLOAD pUpload, QString& pData, int& pstatus)
//{
//    void *_a[] = {0, (void*)&dwDevice, (void*)&pUpload, (void*)&pData, (void*)&pstatus};
//    qt_metacall(QMetaObject::InvokeMetaMethod, 312, _a);
//}

inline void PmacDevice::UploadMacroConfig(int dwDevice, const QString& bsFilePath, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&bsFilePath, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 313, _a);
}

inline void PmacDevice::WriteGatherFile(int dwDevice, const QString& bsFilePath, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&dwDevice, (void*)&bsFilePath, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 314, _a);
}

inline bool PmacDevice::get_DPRTesting(int dwDevice)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dwDevice};
    qt_metacall(QMetaObject::InvokeMetaMethod, 315, _a);
    return qax_result;
}

inline void PmacDevice::strto32f(const QString& str, double& pVal)
{
    void *_a[] = {0, (void*)&str, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 316, _a);
}

inline void PmacDevice::strtod24(const QString& str, double& pVal)
{
    void *_a[] = {0, (void*)&str, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 317, _a);
}

inline void PmacDevice::strtod32dp(const QString& str, double& pVal)
{
    void *_a[] = {0, (void*)&str, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 318, _a);
}

inline void PmacDevice::strtod48f(const QString& str, double& pVal)
{
    void *_a[] = {0, (void*)&str, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 319, _a);
}

inline void PmacDevice::strtod48l(const QString& str, double& pVal)
{
    void *_a[] = {0, (void*)&str, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 320, _a);
}


inline void IPmacNC::AddErrorRecord(int Control, int errnum, PCOMMSERVERLib::NCERRORMODE em, PCOMMSERVERLib::NCERRORTYPE et, int Line, int ax, const QString& Msg)
{
    void *_a[] = {0, (void*)&Control, (void*)&errnum, (void*)&em, (void*)&et, (void*)&Line, (void*)&ax, (void*)&Msg};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void IPmacNC::AutoSetToolOffset(int Control, int coord, int tool, int axis)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&tool, (void*)&axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void IPmacNC::AutoSetWorkOffset(int Control, int coord, int axis, PCOMMSERVERLib::NCCOORDTYPE t, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&axis, (void*)&t, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline NCAXISSELECT IPmacNC::AxisSelect(int Control, int coord)
{
    NCAXISSELECT qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool IPmacNC::BlockDelete(int Control)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline int IPmacNC::BlocksPerSecond(int Control, int coord)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline NCBUFFERMODE IPmacNC::BufferMode(int Control, int coord)
{
    NCBUFFERMODE qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void IPmacNC::ClearOffsetValue(int Control, int coord, int axis, PCOMMSERVERLib::NCCOORDTYPE t, bool bMetric, double newVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&axis, (void*)&t, (void*)&bMetric, (void*)&newVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void IPmacNC::ClearTextBuffer(int Control, int coord)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void IPmacNC::Close(int Control)
{
    void *_a[] = {0, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void IPmacNC::CloseFile(int Control, int dwCoord, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&dwCoord, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline NCCLNTSELECT IPmacNC::CoolantSelect(int Control)
{
    NCCLNTSELECT qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline int IPmacNC::CoordSystem(int Control)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline int IPmacNC::CurrentErrorCount(int Control)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline NCERRORMODE IPmacNC::CurrentErrorLevel(int Control)
{
    NCERRORMODE qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int IPmacNC::CurrentToolHolderNumber(int Control, int coord)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline int IPmacNC::CurrentToolNumber(int Control, int coord)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline void IPmacNC::DataCollect(int Control, int coord, QList<NCDATA>*& pvArray, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pvArray, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline bool IPmacNC::DataCollectionEnabled(int Control)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline int IPmacNC::DataCollectionResolution(int Control)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline int IPmacNC::DeviceNumber(int Control)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline NCSPEEDSELECT IPmacNC::DistanceSelect(int Control)
{
    NCSPEEDSELECT qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline bool IPmacNC::DryRun(int Control, int coord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline double IPmacNC::FeedrateOverride(int Control, int coord)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void IPmacNC::GetActiveGCode(int Control, int coord, int group, double& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&group, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void IPmacNC::GetActiveGCodeStr(int Control, int coord, int group, QString& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&group, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void IPmacNC::GetAllAxisPos(int Control, int coord, PCOMMSERVERLib::NCPOSTYPE t, QStringList& pvAdrArray, QVariantList*& pvPosArray, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&t, (void*)&pvAdrArray, (void*)&pvPosArray, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void IPmacNC::GetAllAxisPosStr(int Control, int coord, PCOMMSERVERLib::NCPOSTYPE t, bool bCoord, QStringList& pvArray, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&t, (void*)&bCoord, (void*)&pvArray, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void IPmacNC::GetAxisEnabled(int Control, int coord, int axis, bool& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&axis, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void IPmacNC::GetAxisFormat(int Control, int coord, int ax, bool bMetric, int& pLen, int& pDecPlaces)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&ax, (void*)&bMetric, (void*)&pLen, (void*)&pDecPlaces};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline void IPmacNC::GetAxisFormatStr(int Control, int coord, int ax, bool bMetric, QString& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&ax, (void*)&bMetric, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
}

inline void IPmacNC::GetAxisMotor(int Control, int coord, int axis, int& pMotor, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&axis, (void*)&pMotor, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline void IPmacNC::GetBufferOpen(int Control, bool& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
}

inline void IPmacNC::GetBufferRemaining(int Control, int coord, int& pRemain, int& pParsed)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pRemain, (void*)&pParsed};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline void IPmacNC::GetBufferText(int Control, int coord, bool bMDI, QString& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&bMDI, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void IPmacNC::GetCommandLong(int Control, int num, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&num, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void IPmacNC::GetCompOffset(int Control, int coord, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void IPmacNC::GetCurrentGValue(int Control, int coord, int group, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&group, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline void IPmacNC::GetCurrentLabel(int Control, int coord, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
}

inline void IPmacNC::GetCycleCuttingTime(int Control, int& pHours, int& pMinutes, int& pSeconds)
{
    void *_a[] = {0, (void*)&Control, (void*)&pHours, (void*)&pMinutes, (void*)&pSeconds};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline void IPmacNC::GetCycleTime(int Control, int& pHours, int& pMinutes, int& Seconds)
{
    void *_a[] = {0, (void*)&Control, (void*)&pHours, (void*)&pMinutes, (void*)&Seconds};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline void IPmacNC::GetFeedrate(int Control, int coord, NCFEEDRATEMODE& pMode, double& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pMode, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline void IPmacNC::GetFirstError(int Control, QString& pHeader, QString& pMessage, QString& pCode, QString& pFilename, int& pCount, int& pChanged)
{
    void *_a[] = {0, (void*)&Control, (void*)&pHeader, (void*)&pMessage, (void*)&pCode, (void*)&pFilename, (void*)&pCount, (void*)&pChanged};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}

inline void IPmacNC::GetHandleStep(int Control, int coord, double& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline void IPmacNC::GetInposition(int Control, int coord, bool& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline void IPmacNC::GetInputLong(int Control, int num, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&num, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
}

inline void IPmacNC::GetJogStep(int Control, int coord, double& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline void IPmacNC::GetLatheSetXDiameter(int Control, int coord, bool bMetric, double& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&bMetric, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline void IPmacNC::GetMachineMode(int Control, NCMODE& pMode)
{
    void *_a[] = {0, (void*)&Control, (void*)&pMode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}

inline void IPmacNC::GetMaxFeedrates(int Control, int coord, double& pMaxPerRev, double& pMaxPerMinute)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pMaxPerRev, (void*)&pMaxPerMinute};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void IPmacNC::GetMetricInput(int Control, int coord, bool& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline void IPmacNC::GetMotorAxis(int Control, int coord, int motor, int& pAxis, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&motor, (void*)&pAxis, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
}

inline void IPmacNC::GetMotorPos(int Control, int coord, int motor, PCOMMSERVERLib::NCPOSTYPE t, QString& pAdr, double& pPos, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&motor, (void*)&t, (void*)&pAdr, (void*)&pPos, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
}

inline void IPmacNC::GetMotorPosStr(int Control, int coord, int motor, PCOMMSERVERLib::NCPOSTYPE t, bool bCombined, QString& pAdr, QString& pPos, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&motor, (void*)&t, (void*)&bCombined, (void*)&pAdr, (void*)&pPos, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline void IPmacNC::GetMotorUnitsStr(int Control, int coord, int motor, QString& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&motor, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline void IPmacNC::GetNextError(int Control, QString& pHeader, QString& pMessage, QString& pCode, QString& pFilename, bool& pbMore)
{
    void *_a[] = {0, (void*)&Control, (void*)&pHeader, (void*)&pMessage, (void*)&pCode, (void*)&pFilename, (void*)&pbMore};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
}

inline void IPmacNC::GetNumDisplayAxisTotal(int Control, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
}

inline void IPmacNC::GetNumDisplayedAxis(int Control, int coord, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
}

inline void IPmacNC::GetNumOfTools(int Control, int coord, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
}

inline void IPmacNC::GetOffsetValue(int Control, int coord, int axis, PCOMMSERVERLib::NCCOORDTYPE t, bool bMetric, double& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&axis, (void*)&t, (void*)&bMetric, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
}

inline void IPmacNC::GetOperatingTime(int Control, int& pDays, int& pHours, int& pMinutes, int& pSeconds)
{
    void *_a[] = {0, (void*)&Control, (void*)&pDays, (void*)&pHours, (void*)&pMinutes, (void*)&pSeconds};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
}

inline void IPmacNC::GetOutputLong(int Control, int num, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&num, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
}

inline void IPmacNC::GetParametricDouble(int Control, int coord, const QString& region, int index, double& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&region, (void*)&index, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
}

inline void IPmacNC::GetPartTime(int Control, int& pHours, int& pMinutes, int& pSeconds)
{
    void *_a[] = {0, (void*)&Control, (void*)&pHours, (void*)&pMinutes, (void*)&pSeconds};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
}

inline void IPmacNC::GetProcessorClocks(double& pIO, double& pLA, double& pParse, double& pFormat, double& pWrite)
{
    void *_a[] = {0, (void*)&pIO, (void*)&pLA, (void*)&pParse, (void*)&pFormat, (void*)&pWrite};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}

inline void IPmacNC::GetProgramLine(int Control, int coord, int lineNumber, QString& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&lineNumber, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
}

inline void IPmacNC::GetProgramLines(int Control, int coord, int start, int count, QVariant& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&start, (void*)&count, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
}

inline void IPmacNC::GetProgramMode(int Control, int coord, DEVPROGRAMMODE& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
}

inline void IPmacNC::GetProgramMotionMode(int Control, int coord, DEVMOTIONMODE& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
}

inline void IPmacNC::GetProgramName(int Control, int coord, bool bMain, QString& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&bMain, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
}

inline void IPmacNC::GetProgramNumber(int Control, int coord, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
}

inline void IPmacNC::GetProgramPath(int Control, int coord, bool bMain, QString& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&bMain, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
}

inline void IPmacNC::GetProgramStatus(int Control, int coord, int& pProgID, int& pNumLines, int& pLine, int& pParseLine, int& pRepeat, int& pCount, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pProgID, (void*)&pNumLines, (void*)&pLine, (void*)&pParseLine, (void*)&pRepeat, (void*)&pCount, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
}

inline void IPmacNC::GetRegistryBool(int Control, const QString& section, const QString& name, bool def, bool& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&section, (void*)&name, (void*)&def, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
}

inline void IPmacNC::GetRegistryDouble(int Control, const QString& section, const QString& name, double def, double& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&section, (void*)&name, (void*)&def, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
}

inline void IPmacNC::GetRegistryLong(int Control, const QString& section, const QString& name, int def, int& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&section, (void*)&name, (void*)&def, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
}

inline void IPmacNC::GetRegistryString(int Control, const QString& section, const QString& name, const QString& def, QString& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&section, (void*)&name, (void*)&def, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 84, _a);
}

inline void IPmacNC::GetRunningTime(int Control, int& pDays, int& pHours, int& pMinutes, int& pSeconds)
{
    void *_a[] = {0, (void*)&Control, (void*)&pDays, (void*)&pHours, (void*)&pMinutes, (void*)&pSeconds};
    qt_metacall(QMetaObject::InvokeMetaMethod, 85, _a);
}

inline void IPmacNC::GetSelectedAxisChar(int Control, int& pAxChar)
{
    void *_a[] = {0, (void*)&Control, (void*)&pAxChar};
    qt_metacall(QMetaObject::InvokeMetaMethod, 86, _a);
}

inline void IPmacNC::GetSelectedAxisMotionMode(int Control, DEVMOTIONMODE& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 87, _a);
}

inline void IPmacNC::GetSelectedBufferMode(int Control, NCBUFFERMODE& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 88, _a);
}

inline void IPmacNC::GetSpindleActRPM(int Control, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 89, _a);
}

inline void IPmacNC::GetStatusLong(int Control, int num, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&num, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 90, _a);
}

inline void IPmacNC::GetToolData(int Control, int coord, int tool, QVariant& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&tool, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 91, _a);
}

inline void IPmacNC::GetToolDataStruct(int Control, int coord, int tool, NCTOOL*& pStruct)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&tool, (void*)&pStruct};
    qt_metacall(QMetaObject::InvokeMetaMethod, 92, _a);
}

inline void IPmacNC::GetToolGuageOffset(int Control, int coord, int tool, bool bMulti, int ax, bool bMetric, double& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&tool, (void*)&bMulti, (void*)&ax, (void*)&bMetric, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 93, _a);
}

inline void IPmacNC::GetToolHolderNumber(int Control, int coord, int tool, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&tool, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 94, _a);
}

inline void IPmacNC::GetToolInfo(int Control, int coord, int& pCurrentTool, int& pNextTool, int& pHolder, int& pHolderTool)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pCurrentTool, (void*)&pNextTool, (void*)&pHolder, (void*)&pHolderTool};
    qt_metacall(QMetaObject::InvokeMetaMethod, 95, _a);
}

inline void IPmacNC::GetToolOffset(int Control, int coord, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 96, _a);
}

inline void IPmacNC::GetTotalCuttingTime(int Control, int& pDays, int& pHours, int& pMinutes, int& pSeconds)
{
    void *_a[] = {0, (void*)&Control, (void*)&pDays, (void*)&pHours, (void*)&pMinutes, (void*)&pSeconds};
    qt_metacall(QMetaObject::InvokeMetaMethod, 97, _a);
}

inline void IPmacNC::GetTypeToolOffset(int Control, int coord, int tool, const QString& chAxis, PCOMMSERVERLib::NCTOOLOFSTYPE type, bool bMetric, double& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&tool, (void*)&chAxis, (void*)&type, (void*)&bMetric, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 98, _a);
}

inline void IPmacNC::GetVectorVelocity(int Control, int coord, double& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 99, _a);
}

inline void IPmacNC::GetWorkOffset(int Control, int coord, NCCOORDTYPE& t, int& pExtendedVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&t, (void*)&pExtendedVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 100, _a);
}

inline bool IPmacNC::HomeInProgress(int Control)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 101, _a);
    return qax_result;
}

inline bool IPmacNC::HomeInit(int Control)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 102, _a);
    return qax_result;
}

inline int IPmacNC::HomeMotorMask(int Control)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 103, _a);
    return qax_result;
}

inline bool IPmacNC::IsDisplayed(int Control, int coord, int motor)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord, (void*)&motor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 104, _a);
    return qax_result;
}

inline bool IPmacNC::IsOpen(int Control)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 105, _a);
    return qax_result;
}

inline bool IPmacNC::IsSpindle(int Control, int coord, int motor)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord, (void*)&motor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 106, _a);
    return qax_result;
}

inline NCJOGSELECT IPmacNC::JogSelect(int Control)
{
    NCJOGSELECT qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 107, _a);
    return qax_result;
}

inline void IPmacNC::LoadMdiBuffer(int Control, int coord, int& hDlg, int idControl, int nRepeat)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&hDlg, (void*)&idControl, (void*)&nRepeat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 108, _a);
}

inline void IPmacNC::LoadParametricVars(int Control)
{
    void *_a[] = {0, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 109, _a);
}

inline bool IPmacNC::MachineLock(int Control)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 110, _a);
    return qax_result;
}

inline NCMACHINETYPE IPmacNC::MachineType(int Control)
{
    NCMACHINETYPE qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 111, _a);
    return qax_result;
}

inline int IPmacNC::NextToolNumber(int Control, int coord)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 112, _a);
    return qax_result;
}

inline int IPmacNC::NumCoordSystems(int Control)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 113, _a);
    return qax_result;
}

inline void IPmacNC::OffsetsUpdate(int Control, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 114, _a);
}

inline void IPmacNC::OffsetsUpdateClear(int Control, int clearMask)
{
    void *_a[] = {0, (void*)&Control, (void*)&clearMask};
    qt_metacall(QMetaObject::InvokeMetaMethod, 115, _a);
}

inline void IPmacNC::Open(int Device, int Control, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Device, (void*)&Control, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 116, _a);
}

inline void IPmacNC::OpenFile(int Control, int dwCoord, const QString& szFilePath, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&dwCoord, (void*)&szFilePath, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 117, _a);
}

inline bool IPmacNC::OptionalStop(int Control)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 118, _a);
    return qax_result;
}

inline int IPmacNC::PartsCount(int Control)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 119, _a);
    return qax_result;
}

inline int IPmacNC::PartsRequired(int Control)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 120, _a);
    return qax_result;
}

inline int IPmacNC::PartsTotal(int Control)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 121, _a);
    return qax_result;
}

inline bool IPmacNC::ProgramLoaded(int Control, int coord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 122, _a);
    return qax_result;
}

inline double IPmacNC::RapidOverride(int Control, int coord)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 123, _a);
    return qax_result;
}

inline void IPmacNC::ReadErrorMsgBoxText(int Control, int index, int& pCount, QString& pText, QString& pTitle)
{
    void *_a[] = {0, (void*)&Control, (void*)&index, (void*)&pCount, (void*)&pText, (void*)&pTitle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 124, _a);
}

inline void IPmacNC::ReadMdiBuffer(int Control, int coord, int& hDlg, int idControl)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&hDlg, (void*)&idControl};
    qt_metacall(QMetaObject::InvokeMetaMethod, 125, _a);
}

inline void IPmacNC::ResetCycleTime(int Control)
{
    void *_a[] = {0, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 126, _a);
}

inline void IPmacNC::ResetMsgBoxError(int Control, int errRetVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&errRetVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 127, _a);
}

inline void IPmacNC::ResetPartsCount(int Control)
{
    void *_a[] = {0, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 128, _a);
}

inline void IPmacNC::ResetPartsTotal(int Control)
{
    void *_a[] = {0, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 129, _a);
}

inline void IPmacNC::SaveParametricVars(int Control)
{
    void *_a[] = {0, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 130, _a);
}

inline void IPmacNC::SearchLine(int Control, int coord, int Line, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&Line, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 131, _a);
}

inline void IPmacNC::SearchText(int Control, int coord, const QString& text, bool bMatchCase, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&text, (void*)&bMatchCase, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 132, _a);
}

inline void IPmacNC::SearchTextNext(int Control, int coord, const QString& text, bool bMatchCase, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&text, (void*)&bMatchCase, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 133, _a);
}

inline int IPmacNC::Semaphore(int Control, int coord)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 134, _a);
    return qax_result;
}

inline void IPmacNC::SetAxisFormat(int Control, int coord, int ax, bool bMetric, int len, int decPlaces)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&ax, (void*)&bMetric, (void*)&len, (void*)&decPlaces};
    qt_metacall(QMetaObject::InvokeMetaMethod, 135, _a);
}

inline void IPmacNC::SetAxisSelect(int Control, int coord, PCOMMSERVERLib::NCAXISSELECT rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 136, _a);
}

inline void IPmacNC::SetBlockDelete(int Control, bool rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 137, _a);
}

inline void IPmacNC::SetBufferMode(int Control, int coord, PCOMMSERVERLib::NCBUFFERMODE rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 138, _a);
}

inline void IPmacNC::SetBufferText(int Control, int coord, int repeat, bool bMDI, const QString& newVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&repeat, (void*)&bMDI, (void*)&newVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 139, _a);
}

inline void IPmacNC::SetCoolantSelect(int Control, PCOMMSERVERLib::NCCLNTSELECT rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 140, _a);
}

inline void IPmacNC::SetCoordSystem(int Control, int rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 141, _a);
}

inline void IPmacNC::SetCurrentErrorLevel(int Control, PCOMMSERVERLib::NCERRORMODE rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 142, _a);
}

inline void IPmacNC::SetCurrentToolHolderNumber(int Control, int coord, int rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 143, _a);
}

inline void IPmacNC::SetCurrentToolNumber(int Control, int coord, int rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 144, _a);
}

inline void IPmacNC::SetDistanceSelect(int Control, PCOMMSERVERLib::NCSPEEDSELECT rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 145, _a);
}

inline void IPmacNC::SetDryRun(int Control, int coord, bool rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 146, _a);
}

inline void IPmacNC::SetFeedrate(int Control, int coord, PCOMMSERVERLib::NCFEEDRATEMODE mode, double newVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&mode, (void*)&newVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 147, _a);
}

inline void IPmacNC::SetFeedrateOverride(int Control, int coord, double rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 148, _a);
}

inline void IPmacNC::SetHomeInit(int Control, bool rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 149, _a);
}

inline void IPmacNC::SetHomeMotorMask(int Control, int rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 150, _a);
}

inline void IPmacNC::SetIsDisplayed(int Control, int coord, int motor, bool rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&motor, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 151, _a);
}

inline void IPmacNC::SetIsSpindle(int Control, int coord, int motor, bool rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&motor, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 152, _a);
}

inline void IPmacNC::SetJogSelect(int Control, PCOMMSERVERLib::NCJOGSELECT rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 153, _a);
}

inline void IPmacNC::SetLatheSetXDiameter(int Control, int coord, bool bMetric, double newVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&bMetric, (void*)&newVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 154, _a);
}

inline void IPmacNC::SetMachineLock(int Control, bool rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 155, _a);
}

inline void IPmacNC::SetMachineMode(int Control, PCOMMSERVERLib::NCMODE mode)
{
    void *_a[] = {0, (void*)&Control, (void*)&mode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 156, _a);
}

inline void IPmacNC::SetMaxFeedrates(int Control, int coord, double MaxPerRev, double MaxPerMinute)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&MaxPerRev, (void*)&MaxPerMinute};
    qt_metacall(QMetaObject::InvokeMetaMethod, 157, _a);
}

inline void IPmacNC::SetNextToolNumber(int Control, int coord, int rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 158, _a);
}

inline void IPmacNC::SetOffsetValue(int Control, int coord, int axis, PCOMMSERVERLib::NCCOORDTYPE t, bool bMetric, bool bConfirm, double newVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&axis, (void*)&t, (void*)&bMetric, (void*)&bConfirm, (void*)&newVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 159, _a);
}

inline void IPmacNC::SetOptionalStop(int Control, bool rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 160, _a);
}

inline void IPmacNC::SetOrigin(int Control, int coord, bool bOrginAll, PCOMMSERVERLib::NCADDRESS adr, bool bClear, double Val, bool metric)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&bOrginAll, (void*)&adr, (void*)&bClear, (void*)&Val, (void*)&metric};
    qt_metacall(QMetaObject::InvokeMetaMethod, 161, _a);
}

inline void IPmacNC::SetParametricDouble(int Control, int coord, const QString& region, int index, double newVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&region, (void*)&index, (void*)&newVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 162, _a);
}

inline void IPmacNC::SetPartsCount(int Control, int rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 163, _a);
}

inline void IPmacNC::SetPartsRequired(int Control, int rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 164, _a);
}

inline void IPmacNC::SetPartsTotal(int Control, int rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 165, _a);
}

inline void IPmacNC::SetRapidOverride(int Control, int coord, double rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 166, _a);
}

inline void IPmacNC::SetRegistryBool(int Control, const QString& section, const QString& name, bool bVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&section, (void*)&name, (void*)&bVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 167, _a);
}

inline void IPmacNC::SetRegistryDouble(int Control, const QString& section, const QString& name, double Val, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&section, (void*)&name, (void*)&Val, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 168, _a);
}

inline void IPmacNC::SetRegistryLong(int Control, const QString& section, const QString& name, int lVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&section, (void*)&name, (void*)&lVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 169, _a);
}

inline void IPmacNC::SetRegistryString(int Control, const QString& section, const QString& name, const QString& Val, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&section, (void*)&name, (void*)&Val, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 170, _a);
}

inline void IPmacNC::SetSemaphore(int Control, int coord, int rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 171, _a);
}

inline void IPmacNC::SetSingleBlock(int Control, bool rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 172, _a);
}

inline void IPmacNC::SetSpeedSelect(int Control, PCOMMSERVERLib::NCSPEEDSELECT rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 173, _a);
}

inline void IPmacNC::SetSpindleAtSpeed(int Control, bool rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 174, _a);
}

inline void IPmacNC::SetSpindleAtZero(int Control, bool rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 175, _a);
}

inline void IPmacNC::SetSpindleCSS(int Control, double rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 176, _a);
}

inline void IPmacNC::SetSpindleCSSMode(int Control, bool rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 177, _a);
}

inline void IPmacNC::SetSpindleCSSUnits(int Control, double rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 178, _a);
}

inline void IPmacNC::SetSpindleCountsPerRev(int Control, double rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 179, _a);
}

inline void IPmacNC::SetSpindleDetect(int Control, bool rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 180, _a);
}

inline void IPmacNC::SetSpindleFPR(int Control, bool rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 181, _a);
}

inline void IPmacNC::SetSpindleGearRatio(int Control, double rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 182, _a);
}

inline void IPmacNC::SetSpindleMaxRPM(int Control, int rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 183, _a);
}

inline void IPmacNC::SetSpindleOverride(int Control, int coord, int rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 184, _a);
}

inline void IPmacNC::SetSpindleRPM(int Control, int rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 185, _a);
}

inline void IPmacNC::SetSpindleSelect(int Control, PCOMMSERVERLib::NCSPINDLESELECT rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 186, _a);
}

inline void IPmacNC::SetThreadLead(int Control, int coord, double rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 187, _a);
}

inline void IPmacNC::SetTimebaseMode(int Control, int coord, PCOMMSERVERLib::NCTIMEBASEMODE rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 188, _a);
}

inline void IPmacNC::SetTitle(int Control, const QString& rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 189, _a);
}

inline void IPmacNC::SetToolDirection(int Control, int coord, int tool, PCOMMSERVERLib::NCTOOLDIRECTION rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&tool, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 190, _a);
}

inline void IPmacNC::SetToolGuageOffset(int Control, int coord, int tool, bool bMulti, int ax, bool bMetric, double newVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&tool, (void*)&bMulti, (void*)&ax, (void*)&bMetric, (void*)&newVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 191, _a);
}

inline void IPmacNC::SetToolHolderNumber(int Control, int coord, int tool, int holder)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&tool, (void*)&holder};
    qt_metacall(QMetaObject::InvokeMetaMethod, 192, _a);
}

inline void IPmacNC::SetToolInSpindle(int Control, int coord, int rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 193, _a);
}

inline void IPmacNC::SetTypeToolOffset(int Control, int coord, int tool, const QString& chAxis, PCOMMSERVERLib::NCTOOLOFSTYPE type, bool bMetric, bool bConfirm, double newVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&tool, (void*)&chAxis, (void*)&type, (void*)&bMetric, (void*)&bConfirm, (void*)&newVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 194, _a);
}

inline bool IPmacNC::SingleBlock(int Control)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 195, _a);
    return qax_result;
}

inline NCSPEEDSELECT IPmacNC::SpeedSelect(int Control)
{
    NCSPEEDSELECT qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 196, _a);
    return qax_result;
}

inline bool IPmacNC::SpindleAtSpeed(int Control)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 197, _a);
    return qax_result;
}

inline bool IPmacNC::SpindleAtZero(int Control)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 198, _a);
    return qax_result;
}

inline double IPmacNC::SpindleCSS(int Control)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 199, _a);
    return qax_result;
}

inline bool IPmacNC::SpindleCSSMode(int Control)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 200, _a);
    return qax_result;
}

inline double IPmacNC::SpindleCSSUnits(int Control)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 201, _a);
    return qax_result;
}

inline int IPmacNC::SpindleCmdRPM(int Control)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 202, _a);
    return qax_result;
}

inline double IPmacNC::SpindleCountsPerRev(int Control)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 203, _a);
    return qax_result;
}

inline bool IPmacNC::SpindleDetect(int Control)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 204, _a);
    return qax_result;
}

inline bool IPmacNC::SpindleFPR(int Control)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 205, _a);
    return qax_result;
}

inline double IPmacNC::SpindleGearRatio(int Control)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 206, _a);
    return qax_result;
}

inline int IPmacNC::SpindleMaxRPM(int Control)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 207, _a);
    return qax_result;
}

inline int IPmacNC::SpindleOverride(int Control, int coord)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 208, _a);
    return qax_result;
}

inline int IPmacNC::SpindleRPM(int Control)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 209, _a);
    return qax_result;
}

inline NCSPINDLESELECT IPmacNC::SpindleSelect(int Control)
{
    NCSPINDLESELECT qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 210, _a);
    return qax_result;
}

inline void IPmacNC::StartDataCollection(int Control, int CollectionMSec, int BufferSize, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&CollectionMSec, (void*)&BufferSize, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 211, _a);
}

inline void IPmacNC::StopDataCollection(int Control)
{
    void *_a[] = {0, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 212, _a);
}

inline double IPmacNC::ThreadLead(int Control, int coord)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 213, _a);
    return qax_result;
}

inline NCTIMEBASEMODE IPmacNC::TimebaseMode(int Control, int coord)
{
    NCTIMEBASEMODE qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 214, _a);
    return qax_result;
}

inline QString IPmacNC::Title(int Control)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 215, _a);
    return qax_result;
}

inline NCTOOLDIRECTION IPmacNC::ToolDirection(int Control, int coord, int tool)
{
    NCTOOLDIRECTION qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord, (void*)&tool};
    qt_metacall(QMetaObject::InvokeMetaMethod, 216, _a);
    return qax_result;
}

inline int IPmacNC::ToolInSpindle(int Control, int coord)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 217, _a);
    return qax_result;
}

inline void IPmacNC::UpdateAllMotors(int Control)
{
    void *_a[] = {0, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 218, _a);
}

inline void IPmacNC::ZeroAllToolOffsets(int Control, int coord)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 219, _a);
}

inline void IPmacNC::ZeroAllTypeToolOffsets(int Control, int coord, PCOMMSERVERLib::NCTOOLOFSTYPE type)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 220, _a);
}

inline void IPmacNC::ZeroShift(int Control, int coord, bool bShiftAll, PCOMMSERVERLib::NCADDRESS adr, bool bClear, double Val, bool bMetric)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&bShiftAll, (void*)&adr, (void*)&bClear, (void*)&Val, (void*)&bMetric};
    qt_metacall(QMetaObject::InvokeMetaMethod, 221, _a);
}

inline void IPmacNC::command(int Control, int id, int iv, double fv, const QString& bStr, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&id, (void*)&iv, (void*)&fv, (void*)&bStr, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 222, _a);
}

inline NCMODE IPmacNC::mode(int Control)
{
    NCMODE qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 223, _a);
    return qax_result;
}

inline void IPmacNC::setMode(int Control, PCOMMSERVERLib::NCMODE rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 224, _a);
}


inline void PmacNC::AddErrorRecord(int Control, int errnum, PCOMMSERVERLib::NCERRORMODE em, PCOMMSERVERLib::NCERRORTYPE et, int Line, int ax, const QString& Msg)
{
    void *_a[] = {0, (void*)&Control, (void*)&errnum, (void*)&em, (void*)&et, (void*)&Line, (void*)&ax, (void*)&Msg};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void PmacNC::AutoSetToolOffset(int Control, int coord, int tool, int axis)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&tool, (void*)&axis};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void PmacNC::AutoSetWorkOffset(int Control, int coord, int axis, PCOMMSERVERLib::NCCOORDTYPE t, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&axis, (void*)&t, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline NCAXISSELECT PmacNC::AxisSelect(int Control, int coord)
{
    NCAXISSELECT qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline bool PmacNC::BlockDelete(int Control)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline int PmacNC::BlocksPerSecond(int Control, int coord)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
    return qax_result;
}

inline NCBUFFERMODE PmacNC::BufferMode(int Control, int coord)
{
    NCBUFFERMODE qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline void PmacNC::ClearOffsetValue(int Control, int coord, int axis, PCOMMSERVERLib::NCCOORDTYPE t, bool bMetric, double newVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&axis, (void*)&t, (void*)&bMetric, (void*)&newVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}

inline void PmacNC::ClearTextBuffer(int Control, int coord)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline void PmacNC::Close(int Control)
{
    void *_a[] = {0, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline void PmacNC::CloseFile(int Control, int dwCoord, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&dwCoord, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
}

inline NCCLNTSELECT PmacNC::CoolantSelect(int Control)
{
    NCCLNTSELECT qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
    return qax_result;
}

inline int PmacNC::CoordSystem(int Control)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
    return qax_result;
}

inline int PmacNC::CurrentErrorCount(int Control)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
    return qax_result;
}

inline NCERRORMODE PmacNC::CurrentErrorLevel(int Control)
{
    NCERRORMODE qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
    return qax_result;
}

inline int PmacNC::CurrentToolHolderNumber(int Control, int coord)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
    return qax_result;
}

inline int PmacNC::CurrentToolNumber(int Control, int coord)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
    return qax_result;
}

inline void PmacNC::DataCollect(int Control, int coord, QList<NCDATA>*& pvArray, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pvArray, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
}

inline bool PmacNC::DataCollectionEnabled(int Control)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
    return qax_result;
}

inline int PmacNC::DataCollectionResolution(int Control)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
    return qax_result;
}

inline int PmacNC::DeviceNumber(int Control)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
    return qax_result;
}

inline NCSPEEDSELECT PmacNC::DistanceSelect(int Control)
{
    NCSPEEDSELECT qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 64, _a);
    return qax_result;
}

inline bool PmacNC::DryRun(int Control, int coord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
    return qax_result;
}

inline double PmacNC::FeedrateOverride(int Control, int coord)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 66, _a);
    return qax_result;
}

inline void PmacNC::GetActiveGCode(int Control, int coord, int group, double& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&group, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 67, _a);
}

inline void PmacNC::GetActiveGCodeStr(int Control, int coord, int group, QString& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&group, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 68, _a);
}

inline void PmacNC::GetAllAxisPos(int Control, int coord, PCOMMSERVERLib::NCPOSTYPE t, QStringList& pvAdrArray, QVariantList*& pvPosArray, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&t, (void*)&pvAdrArray, (void*)&pvPosArray, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
}

inline void PmacNC::GetAllAxisPosStr(int Control, int coord, PCOMMSERVERLib::NCPOSTYPE t, bool bCoord, QStringList& pvArray, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&t, (void*)&bCoord, (void*)&pvArray, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 70, _a);
}

inline void PmacNC::GetAxisEnabled(int Control, int coord, int axis, bool& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&axis, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 71, _a);
}

inline void PmacNC::GetAxisFormat(int Control, int coord, int ax, bool bMetric, int& pLen, int& pDecPlaces)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&ax, (void*)&bMetric, (void*)&pLen, (void*)&pDecPlaces};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}

inline void PmacNC::GetAxisFormatStr(int Control, int coord, int ax, bool bMetric, QString& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&ax, (void*)&bMetric, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
}

inline void PmacNC::GetAxisMotor(int Control, int coord, int axis, int& pMotor, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&axis, (void*)&pMotor, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
}

inline void PmacNC::GetBufferOpen(int Control, bool& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
}

inline void PmacNC::GetBufferRemaining(int Control, int coord, int& pRemain, int& pParsed)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pRemain, (void*)&pParsed};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
}

inline void PmacNC::GetBufferText(int Control, int coord, bool bMDI, QString& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&bMDI, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
}

inline void PmacNC::GetCommandLong(int Control, int num, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&num, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
}

inline void PmacNC::GetCompOffset(int Control, int coord, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 79, _a);
}

inline void PmacNC::GetCurrentGValue(int Control, int coord, int group, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&group, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 80, _a);
}

inline void PmacNC::GetCurrentLabel(int Control, int coord, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 81, _a);
}

inline void PmacNC::GetCycleCuttingTime(int Control, int& pHours, int& pMinutes, int& pSeconds)
{
    void *_a[] = {0, (void*)&Control, (void*)&pHours, (void*)&pMinutes, (void*)&pSeconds};
    qt_metacall(QMetaObject::InvokeMetaMethod, 82, _a);
}

inline void PmacNC::GetCycleTime(int Control, int& pHours, int& pMinutes, int& Seconds)
{
    void *_a[] = {0, (void*)&Control, (void*)&pHours, (void*)&pMinutes, (void*)&Seconds};
    qt_metacall(QMetaObject::InvokeMetaMethod, 83, _a);
}

inline void PmacNC::GetFeedrate(int Control, int coord, NCFEEDRATEMODE& pMode, double& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pMode, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 84, _a);
}

inline void PmacNC::GetFirstError(int Control, QString& pHeader, QString& pMessage, QString& pCode, QString& pFilename, int& pCount, int& pChanged)
{
    void *_a[] = {0, (void*)&Control, (void*)&pHeader, (void*)&pMessage, (void*)&pCode, (void*)&pFilename, (void*)&pCount, (void*)&pChanged};
    qt_metacall(QMetaObject::InvokeMetaMethod, 85, _a);
}

inline void PmacNC::GetHandleStep(int Control, int coord, double& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 86, _a);
}

inline void PmacNC::GetInposition(int Control, int coord, bool& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 87, _a);
}

inline void PmacNC::GetInputLong(int Control, int num, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&num, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 88, _a);
}

inline void PmacNC::GetJogStep(int Control, int coord, double& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 89, _a);
}

inline void PmacNC::GetLatheSetXDiameter(int Control, int coord, bool bMetric, double& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&bMetric, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 90, _a);
}

inline void PmacNC::GetMachineMode(int Control, NCMODE& pMode)
{
    void *_a[] = {0, (void*)&Control, (void*)&pMode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 91, _a);
}

inline void PmacNC::GetMaxFeedrates(int Control, int coord, double& pMaxPerRev, double& pMaxPerMinute)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pMaxPerRev, (void*)&pMaxPerMinute};
    qt_metacall(QMetaObject::InvokeMetaMethod, 92, _a);
}

inline void PmacNC::GetMetricInput(int Control, int coord, bool& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 93, _a);
}

inline void PmacNC::GetMotorAxis(int Control, int coord, int motor, int& pAxis, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&motor, (void*)&pAxis, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 94, _a);
}

inline void PmacNC::GetMotorPos(int Control, int coord, int motor, PCOMMSERVERLib::NCPOSTYPE t, QString& pAdr, double& pPos, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&motor, (void*)&t, (void*)&pAdr, (void*)&pPos, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 95, _a);
}

inline void PmacNC::GetMotorPosStr(int Control, int coord, int motor, PCOMMSERVERLib::NCPOSTYPE t, bool bCombined, QString& pAdr, QString& pPos, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&motor, (void*)&t, (void*)&bCombined, (void*)&pAdr, (void*)&pPos, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 96, _a);
}

inline void PmacNC::GetMotorUnitsStr(int Control, int coord, int motor, QString& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&motor, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 97, _a);
}

inline void PmacNC::GetNextError(int Control, QString& pHeader, QString& pMessage, QString& pCode, QString& pFilename, bool& pbMore)
{
    void *_a[] = {0, (void*)&Control, (void*)&pHeader, (void*)&pMessage, (void*)&pCode, (void*)&pFilename, (void*)&pbMore};
    qt_metacall(QMetaObject::InvokeMetaMethod, 98, _a);
}

inline void PmacNC::GetNumDisplayAxisTotal(int Control, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 99, _a);
}

inline void PmacNC::GetNumDisplayedAxis(int Control, int coord, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 100, _a);
}

inline void PmacNC::GetNumOfTools(int Control, int coord, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 101, _a);
}

inline void PmacNC::GetOffsetValue(int Control, int coord, int axis, PCOMMSERVERLib::NCCOORDTYPE t, bool bMetric, double& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&axis, (void*)&t, (void*)&bMetric, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 102, _a);
}

inline void PmacNC::GetOperatingTime(int Control, int& pDays, int& pHours, int& pMinutes, int& pSeconds)
{
    void *_a[] = {0, (void*)&Control, (void*)&pDays, (void*)&pHours, (void*)&pMinutes, (void*)&pSeconds};
    qt_metacall(QMetaObject::InvokeMetaMethod, 103, _a);
}

inline void PmacNC::GetOutputLong(int Control, int num, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&num, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 104, _a);
}

inline void PmacNC::GetParametricDouble(int Control, int coord, const QString& region, int index, double& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&region, (void*)&index, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 105, _a);
}

inline void PmacNC::GetPartTime(int Control, int& pHours, int& pMinutes, int& pSeconds)
{
    void *_a[] = {0, (void*)&Control, (void*)&pHours, (void*)&pMinutes, (void*)&pSeconds};
    qt_metacall(QMetaObject::InvokeMetaMethod, 106, _a);
}

inline void PmacNC::GetProcessorClocks(double& pIO, double& pLA, double& pParse, double& pFormat, double& pWrite)
{
    void *_a[] = {0, (void*)&pIO, (void*)&pLA, (void*)&pParse, (void*)&pFormat, (void*)&pWrite};
    qt_metacall(QMetaObject::InvokeMetaMethod, 107, _a);
}

inline void PmacNC::GetProgramLine(int Control, int coord, int lineNumber, QString& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&lineNumber, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 108, _a);
}

inline void PmacNC::GetProgramLines(int Control, int coord, int start, int count, QVariant& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&start, (void*)&count, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 109, _a);
}

inline void PmacNC::GetProgramMode(int Control, int coord, DEVPROGRAMMODE& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 110, _a);
}

inline void PmacNC::GetProgramMotionMode(int Control, int coord, DEVMOTIONMODE& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 111, _a);
}

inline void PmacNC::GetProgramName(int Control, int coord, bool bMain, QString& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&bMain, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 112, _a);
}

inline void PmacNC::GetProgramNumber(int Control, int coord, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 113, _a);
}

inline void PmacNC::GetProgramPath(int Control, int coord, bool bMain, QString& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&bMain, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 114, _a);
}

inline void PmacNC::GetProgramStatus(int Control, int coord, int& pProgID, int& pNumLines, int& pLine, int& pParseLine, int& pRepeat, int& pCount, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pProgID, (void*)&pNumLines, (void*)&pLine, (void*)&pParseLine, (void*)&pRepeat, (void*)&pCount, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 115, _a);
}

inline void PmacNC::GetRegistryBool(int Control, const QString& section, const QString& name, bool def, bool& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&section, (void*)&name, (void*)&def, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 116, _a);
}

inline void PmacNC::GetRegistryDouble(int Control, const QString& section, const QString& name, double def, double& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&section, (void*)&name, (void*)&def, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 117, _a);
}

inline void PmacNC::GetRegistryLong(int Control, const QString& section, const QString& name, int def, int& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&section, (void*)&name, (void*)&def, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 118, _a);
}

inline void PmacNC::GetRegistryString(int Control, const QString& section, const QString& name, const QString& def, QString& pVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&section, (void*)&name, (void*)&def, (void*)&pVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 119, _a);
}

inline void PmacNC::GetRunningTime(int Control, int& pDays, int& pHours, int& pMinutes, int& pSeconds)
{
    void *_a[] = {0, (void*)&Control, (void*)&pDays, (void*)&pHours, (void*)&pMinutes, (void*)&pSeconds};
    qt_metacall(QMetaObject::InvokeMetaMethod, 120, _a);
}

inline void PmacNC::GetSelectedAxisChar(int Control, int& pAxChar)
{
    void *_a[] = {0, (void*)&Control, (void*)&pAxChar};
    qt_metacall(QMetaObject::InvokeMetaMethod, 121, _a);
}

inline void PmacNC::GetSelectedAxisMotionMode(int Control, DEVMOTIONMODE& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 122, _a);
}

inline void PmacNC::GetSelectedBufferMode(int Control, NCBUFFERMODE& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 123, _a);
}

inline void PmacNC::GetSpindleActRPM(int Control, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 124, _a);
}

inline void PmacNC::GetStatusLong(int Control, int num, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&num, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 125, _a);
}

inline void PmacNC::GetToolData(int Control, int coord, int tool, QVariant& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&tool, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 126, _a);
}

inline void PmacNC::GetToolDataStruct(int Control, int coord, int tool, NCTOOL*& pStruct)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&tool, (void*)&pStruct};
    qt_metacall(QMetaObject::InvokeMetaMethod, 127, _a);
}

inline void PmacNC::GetToolGuageOffset(int Control, int coord, int tool, bool bMulti, int ax, bool bMetric, double& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&tool, (void*)&bMulti, (void*)&ax, (void*)&bMetric, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 128, _a);
}

inline void PmacNC::GetToolHolderNumber(int Control, int coord, int tool, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&tool, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 129, _a);
}

inline void PmacNC::GetToolInfo(int Control, int coord, int& pCurrentTool, int& pNextTool, int& pHolder, int& pHolderTool)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pCurrentTool, (void*)&pNextTool, (void*)&pHolder, (void*)&pHolderTool};
    qt_metacall(QMetaObject::InvokeMetaMethod, 130, _a);
}

inline void PmacNC::GetToolOffset(int Control, int coord, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 131, _a);
}

inline void PmacNC::GetTotalCuttingTime(int Control, int& pDays, int& pHours, int& pMinutes, int& pSeconds)
{
    void *_a[] = {0, (void*)&Control, (void*)&pDays, (void*)&pHours, (void*)&pMinutes, (void*)&pSeconds};
    qt_metacall(QMetaObject::InvokeMetaMethod, 132, _a);
}

inline void PmacNC::GetTypeToolOffset(int Control, int coord, int tool, const QString& chAxis, PCOMMSERVERLib::NCTOOLOFSTYPE type, bool bMetric, double& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&tool, (void*)&chAxis, (void*)&type, (void*)&bMetric, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 133, _a);
}

inline void PmacNC::GetVectorVelocity(int Control, int coord, double& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 134, _a);
}

inline void PmacNC::GetWorkOffset(int Control, int coord, NCCOORDTYPE& t, int& pExtendedVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&t, (void*)&pExtendedVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 135, _a);
}

inline bool PmacNC::HomeInProgress(int Control)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 136, _a);
    return qax_result;
}

inline bool PmacNC::HomeInit(int Control)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 137, _a);
    return qax_result;
}

inline int PmacNC::HomeMotorMask(int Control)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 138, _a);
    return qax_result;
}

inline bool PmacNC::IsDisplayed(int Control, int coord, int motor)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord, (void*)&motor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 139, _a);
    return qax_result;
}

inline bool PmacNC::IsOpen(int Control)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 140, _a);
    return qax_result;
}

inline bool PmacNC::IsSpindle(int Control, int coord, int motor)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord, (void*)&motor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 141, _a);
    return qax_result;
}

inline NCJOGSELECT PmacNC::JogSelect(int Control)
{
    NCJOGSELECT qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 142, _a);
    return qax_result;
}

inline void PmacNC::LoadMdiBuffer(int Control, int coord, int& hDlg, int idControl, int nRepeat)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&hDlg, (void*)&idControl, (void*)&nRepeat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 143, _a);
}

inline void PmacNC::LoadParametricVars(int Control)
{
    void *_a[] = {0, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 144, _a);
}

inline bool PmacNC::MachineLock(int Control)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 145, _a);
    return qax_result;
}

inline NCMACHINETYPE PmacNC::MachineType(int Control)
{
    NCMACHINETYPE qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 146, _a);
    return qax_result;
}

inline int PmacNC::NextToolNumber(int Control, int coord)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 147, _a);
    return qax_result;
}

inline int PmacNC::NumCoordSystems(int Control)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 148, _a);
    return qax_result;
}

inline void PmacNC::OffsetsUpdate(int Control, int& pVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&pVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 149, _a);
}

inline void PmacNC::OffsetsUpdateClear(int Control, int clearMask)
{
    void *_a[] = {0, (void*)&Control, (void*)&clearMask};
    qt_metacall(QMetaObject::InvokeMetaMethod, 150, _a);
}

inline void PmacNC::Open(int Device, int Control, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Device, (void*)&Control, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 151, _a);
}

inline void PmacNC::OpenFile(int Control, int dwCoord, const QString& szFilePath, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&dwCoord, (void*)&szFilePath, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 152, _a);
}

inline bool PmacNC::OptionalStop(int Control)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 153, _a);
    return qax_result;
}

inline int PmacNC::PartsCount(int Control)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 154, _a);
    return qax_result;
}

inline int PmacNC::PartsRequired(int Control)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 155, _a);
    return qax_result;
}

inline int PmacNC::PartsTotal(int Control)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 156, _a);
    return qax_result;
}

inline bool PmacNC::ProgramLoaded(int Control, int coord)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 157, _a);
    return qax_result;
}

inline double PmacNC::RapidOverride(int Control, int coord)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 158, _a);
    return qax_result;
}

inline void PmacNC::ReadErrorMsgBoxText(int Control, int index, int& pCount, QString& pText, QString& pTitle)
{
    void *_a[] = {0, (void*)&Control, (void*)&index, (void*)&pCount, (void*)&pText, (void*)&pTitle};
    qt_metacall(QMetaObject::InvokeMetaMethod, 159, _a);
}

inline void PmacNC::ReadMdiBuffer(int Control, int coord, int& hDlg, int idControl)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&hDlg, (void*)&idControl};
    qt_metacall(QMetaObject::InvokeMetaMethod, 160, _a);
}

inline void PmacNC::ResetCycleTime(int Control)
{
    void *_a[] = {0, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 161, _a);
}

inline void PmacNC::ResetMsgBoxError(int Control, int errRetVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&errRetVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 162, _a);
}

inline void PmacNC::ResetPartsCount(int Control)
{
    void *_a[] = {0, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 163, _a);
}

inline void PmacNC::ResetPartsTotal(int Control)
{
    void *_a[] = {0, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 164, _a);
}

inline void PmacNC::SaveParametricVars(int Control)
{
    void *_a[] = {0, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 165, _a);
}

inline void PmacNC::SearchLine(int Control, int coord, int Line, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&Line, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 166, _a);
}

inline void PmacNC::SearchText(int Control, int coord, const QString& text, bool bMatchCase, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&text, (void*)&bMatchCase, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 167, _a);
}

inline void PmacNC::SearchTextNext(int Control, int coord, const QString& text, bool bMatchCase, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&text, (void*)&bMatchCase, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 168, _a);
}

inline int PmacNC::Semaphore(int Control, int coord)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 169, _a);
    return qax_result;
}

inline void PmacNC::SetAxisFormat(int Control, int coord, int ax, bool bMetric, int len, int decPlaces)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&ax, (void*)&bMetric, (void*)&len, (void*)&decPlaces};
    qt_metacall(QMetaObject::InvokeMetaMethod, 170, _a);
}

inline void PmacNC::SetAxisSelect(int Control, int coord, PCOMMSERVERLib::NCAXISSELECT rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 171, _a);
}

inline void PmacNC::SetBlockDelete(int Control, bool rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 172, _a);
}

inline void PmacNC::SetBufferMode(int Control, int coord, PCOMMSERVERLib::NCBUFFERMODE rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 173, _a);
}

inline void PmacNC::SetBufferText(int Control, int coord, int repeat, bool bMDI, const QString& newVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&repeat, (void*)&bMDI, (void*)&newVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 174, _a);
}

inline void PmacNC::SetCoolantSelect(int Control, PCOMMSERVERLib::NCCLNTSELECT rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 175, _a);
}

inline void PmacNC::SetCoordSystem(int Control, int rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 176, _a);
}

inline void PmacNC::SetCurrentErrorLevel(int Control, PCOMMSERVERLib::NCERRORMODE rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 177, _a);
}

inline void PmacNC::SetCurrentToolHolderNumber(int Control, int coord, int rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 178, _a);
}

inline void PmacNC::SetCurrentToolNumber(int Control, int coord, int rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 179, _a);
}

inline void PmacNC::SetDistanceSelect(int Control, PCOMMSERVERLib::NCSPEEDSELECT rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 180, _a);
}

inline void PmacNC::SetDryRun(int Control, int coord, bool rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 181, _a);
}

inline void PmacNC::SetFeedrate(int Control, int coord, PCOMMSERVERLib::NCFEEDRATEMODE mode, double newVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&mode, (void*)&newVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 182, _a);
}

inline void PmacNC::SetFeedrateOverride(int Control, int coord, double rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 183, _a);
}

inline void PmacNC::SetHomeInit(int Control, bool rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 184, _a);
}

inline void PmacNC::SetHomeMotorMask(int Control, int rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 185, _a);
}

inline void PmacNC::SetIsDisplayed(int Control, int coord, int motor, bool rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&motor, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 186, _a);
}

inline void PmacNC::SetIsSpindle(int Control, int coord, int motor, bool rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&motor, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 187, _a);
}

inline void PmacNC::SetJogSelect(int Control, PCOMMSERVERLib::NCJOGSELECT rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 188, _a);
}

inline void PmacNC::SetLatheSetXDiameter(int Control, int coord, bool bMetric, double newVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&bMetric, (void*)&newVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 189, _a);
}

inline void PmacNC::SetMachineLock(int Control, bool rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 190, _a);
}

inline void PmacNC::SetMachineMode(int Control, PCOMMSERVERLib::NCMODE mode)
{
    void *_a[] = {0, (void*)&Control, (void*)&mode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 191, _a);
}

inline void PmacNC::SetMaxFeedrates(int Control, int coord, double MaxPerRev, double MaxPerMinute)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&MaxPerRev, (void*)&MaxPerMinute};
    qt_metacall(QMetaObject::InvokeMetaMethod, 192, _a);
}

inline void PmacNC::SetNextToolNumber(int Control, int coord, int rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 193, _a);
}

inline void PmacNC::SetOffsetValue(int Control, int coord, int axis, PCOMMSERVERLib::NCCOORDTYPE t, bool bMetric, bool bConfirm, double newVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&axis, (void*)&t, (void*)&bMetric, (void*)&bConfirm, (void*)&newVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 194, _a);
}

inline void PmacNC::SetOptionalStop(int Control, bool rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 195, _a);
}

inline void PmacNC::SetOrigin(int Control, int coord, bool bOrginAll, PCOMMSERVERLib::NCADDRESS adr, bool bClear, double Val, bool metric)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&bOrginAll, (void*)&adr, (void*)&bClear, (void*)&Val, (void*)&metric};
    qt_metacall(QMetaObject::InvokeMetaMethod, 196, _a);
}

inline void PmacNC::SetParametricDouble(int Control, int coord, const QString& region, int index, double newVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&region, (void*)&index, (void*)&newVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 197, _a);
}

inline void PmacNC::SetPartsCount(int Control, int rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 198, _a);
}

inline void PmacNC::SetPartsRequired(int Control, int rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 199, _a);
}

inline void PmacNC::SetPartsTotal(int Control, int rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 200, _a);
}

inline void PmacNC::SetRapidOverride(int Control, int coord, double rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 201, _a);
}

inline void PmacNC::SetRegistryBool(int Control, const QString& section, const QString& name, bool bVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&section, (void*)&name, (void*)&bVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 202, _a);
}

inline void PmacNC::SetRegistryDouble(int Control, const QString& section, const QString& name, double Val, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&section, (void*)&name, (void*)&Val, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 203, _a);
}

inline void PmacNC::SetRegistryLong(int Control, const QString& section, const QString& name, int lVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&section, (void*)&name, (void*)&lVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 204, _a);
}

inline void PmacNC::SetRegistryString(int Control, const QString& section, const QString& name, const QString& Val, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&section, (void*)&name, (void*)&Val, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 205, _a);
}

inline void PmacNC::SetSemaphore(int Control, int coord, int rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 206, _a);
}

inline void PmacNC::SetSingleBlock(int Control, bool rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 207, _a);
}

inline void PmacNC::SetSpeedSelect(int Control, PCOMMSERVERLib::NCSPEEDSELECT rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 208, _a);
}

inline void PmacNC::SetSpindleAtSpeed(int Control, bool rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 209, _a);
}

inline void PmacNC::SetSpindleAtZero(int Control, bool rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 210, _a);
}

inline void PmacNC::SetSpindleCSS(int Control, double rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 211, _a);
}

inline void PmacNC::SetSpindleCSSMode(int Control, bool rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 212, _a);
}

inline void PmacNC::SetSpindleCSSUnits(int Control, double rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 213, _a);
}

inline void PmacNC::SetSpindleCountsPerRev(int Control, double rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 214, _a);
}

inline void PmacNC::SetSpindleDetect(int Control, bool rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 215, _a);
}

inline void PmacNC::SetSpindleFPR(int Control, bool rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 216, _a);
}

inline void PmacNC::SetSpindleGearRatio(int Control, double rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 217, _a);
}

inline void PmacNC::SetSpindleMaxRPM(int Control, int rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 218, _a);
}

inline void PmacNC::SetSpindleOverride(int Control, int coord, int rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 219, _a);
}

inline void PmacNC::SetSpindleRPM(int Control, int rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 220, _a);
}

inline void PmacNC::SetSpindleSelect(int Control, PCOMMSERVERLib::NCSPINDLESELECT rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 221, _a);
}

inline void PmacNC::SetThreadLead(int Control, int coord, double rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 222, _a);
}

inline void PmacNC::SetTimebaseMode(int Control, int coord, PCOMMSERVERLib::NCTIMEBASEMODE rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 223, _a);
}

inline void PmacNC::SetTitle(int Control, const QString& rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 224, _a);
}

inline void PmacNC::SetToolDirection(int Control, int coord, int tool, PCOMMSERVERLib::NCTOOLDIRECTION rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&tool, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 225, _a);
}

inline void PmacNC::SetToolGuageOffset(int Control, int coord, int tool, bool bMulti, int ax, bool bMetric, double newVal)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&tool, (void*)&bMulti, (void*)&ax, (void*)&bMetric, (void*)&newVal};
    qt_metacall(QMetaObject::InvokeMetaMethod, 226, _a);
}

inline void PmacNC::SetToolHolderNumber(int Control, int coord, int tool, int holder)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&tool, (void*)&holder};
    qt_metacall(QMetaObject::InvokeMetaMethod, 227, _a);
}

inline void PmacNC::SetToolInSpindle(int Control, int coord, int rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 228, _a);
}

inline void PmacNC::SetTypeToolOffset(int Control, int coord, int tool, const QString& chAxis, PCOMMSERVERLib::NCTOOLOFSTYPE type, bool bMetric, bool bConfirm, double newVal, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&tool, (void*)&chAxis, (void*)&type, (void*)&bMetric, (void*)&bConfirm, (void*)&newVal, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 229, _a);
}

inline bool PmacNC::SingleBlock(int Control)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 230, _a);
    return qax_result;
}

inline NCSPEEDSELECT PmacNC::SpeedSelect(int Control)
{
    NCSPEEDSELECT qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 231, _a);
    return qax_result;
}

inline bool PmacNC::SpindleAtSpeed(int Control)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 232, _a);
    return qax_result;
}

inline bool PmacNC::SpindleAtZero(int Control)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 233, _a);
    return qax_result;
}

inline double PmacNC::SpindleCSS(int Control)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 234, _a);
    return qax_result;
}

inline bool PmacNC::SpindleCSSMode(int Control)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 235, _a);
    return qax_result;
}

inline double PmacNC::SpindleCSSUnits(int Control)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 236, _a);
    return qax_result;
}

inline int PmacNC::SpindleCmdRPM(int Control)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 237, _a);
    return qax_result;
}

inline double PmacNC::SpindleCountsPerRev(int Control)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 238, _a);
    return qax_result;
}

inline bool PmacNC::SpindleDetect(int Control)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 239, _a);
    return qax_result;
}

inline bool PmacNC::SpindleFPR(int Control)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 240, _a);
    return qax_result;
}

inline double PmacNC::SpindleGearRatio(int Control)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 241, _a);
    return qax_result;
}

inline int PmacNC::SpindleMaxRPM(int Control)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 242, _a);
    return qax_result;
}

inline int PmacNC::SpindleOverride(int Control, int coord)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 243, _a);
    return qax_result;
}

inline int PmacNC::SpindleRPM(int Control)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 244, _a);
    return qax_result;
}

inline NCSPINDLESELECT PmacNC::SpindleSelect(int Control)
{
    NCSPINDLESELECT qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 245, _a);
    return qax_result;
}

inline void PmacNC::StartDataCollection(int Control, int CollectionMSec, int BufferSize, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&CollectionMSec, (void*)&BufferSize, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 246, _a);
}

inline void PmacNC::StopDataCollection(int Control)
{
    void *_a[] = {0, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 247, _a);
}

inline double PmacNC::ThreadLead(int Control, int coord)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 248, _a);
    return qax_result;
}

inline NCTIMEBASEMODE PmacNC::TimebaseMode(int Control, int coord)
{
    NCTIMEBASEMODE qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 249, _a);
    return qax_result;
}

inline QString PmacNC::Title(int Control)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 250, _a);
    return qax_result;
}

inline NCTOOLDIRECTION PmacNC::ToolDirection(int Control, int coord, int tool)
{
    NCTOOLDIRECTION qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord, (void*)&tool};
    qt_metacall(QMetaObject::InvokeMetaMethod, 251, _a);
    return qax_result;
}

inline int PmacNC::ToolInSpindle(int Control, int coord)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 252, _a);
    return qax_result;
}

inline void PmacNC::UpdateAllMotors(int Control)
{
    void *_a[] = {0, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 253, _a);
}

inline void PmacNC::ZeroAllToolOffsets(int Control, int coord)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord};
    qt_metacall(QMetaObject::InvokeMetaMethod, 254, _a);
}

inline void PmacNC::ZeroAllTypeToolOffsets(int Control, int coord, PCOMMSERVERLib::NCTOOLOFSTYPE type)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&type};
    qt_metacall(QMetaObject::InvokeMetaMethod, 255, _a);
}

inline void PmacNC::ZeroShift(int Control, int coord, bool bShiftAll, PCOMMSERVERLib::NCADDRESS adr, bool bClear, double Val, bool bMetric)
{
    void *_a[] = {0, (void*)&Control, (void*)&coord, (void*)&bShiftAll, (void*)&adr, (void*)&bClear, (void*)&Val, (void*)&bMetric};
    qt_metacall(QMetaObject::InvokeMetaMethod, 256, _a);
}

inline void PmacNC::command(int Control, int id, int iv, double fv, const QString& bStr, bool& pbSuccess)
{
    void *_a[] = {0, (void*)&Control, (void*)&id, (void*)&iv, (void*)&fv, (void*)&bStr, (void*)&pbSuccess};
    qt_metacall(QMetaObject::InvokeMetaMethod, 257, _a);
}

inline NCMODE PmacNC::mode(int Control)
{
    NCMODE qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Control};
    qt_metacall(QMetaObject::InvokeMetaMethod, 258, _a);
    return qax_result;
}

inline void PmacNC::setMode(int Control, PCOMMSERVERLib::NCMODE rhs)
{
    void *_a[] = {0, (void*)&Control, (void*)&rhs};
    qt_metacall(QMetaObject::InvokeMetaMethod, 259, _a);
}



#endif

}

QT_BEGIN_NAMESPACE

namespace QtMetaTypePrivate {
template<>
struct QMetaTypeFunctionHelper<PCOMMSERVERLib::IPmacDevice, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<PCOMMSERVERLib::IPmacDevice*>(t)->PCOMMSERVERLib::IPmacDevice::~IPmacDevice();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) PCOMMSERVERLib::IPmacDevice;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const PCOMMSERVERLib::IPmacDevice*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<PCOMMSERVERLib::IPmacDevice*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<PCOMMSERVERLib::PmacDevice, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<PCOMMSERVERLib::PmacDevice*>(t)->PCOMMSERVERLib::PmacDevice::~PmacDevice();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) PCOMMSERVERLib::PmacDevice;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const PCOMMSERVERLib::PmacDevice*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<PCOMMSERVERLib::PmacDevice*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<PCOMMSERVERLib::IPmacNC, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<PCOMMSERVERLib::IPmacNC*>(t)->PCOMMSERVERLib::IPmacNC::~IPmacNC();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) PCOMMSERVERLib::IPmacNC;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const PCOMMSERVERLib::IPmacNC*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<PCOMMSERVERLib::IPmacNC*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<PCOMMSERVERLib::PmacNC, /* Accepted */ true> {
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<PCOMMSERVERLib::PmacNC*>(t)->PCOMMSERVERLib::PmacNC::~PmacNC();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) PCOMMSERVERLib::PmacNC;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const PCOMMSERVERLib::PmacNC*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<PCOMMSERVERLib::PmacNC*>(t); }
#endif // QT_NO_DATASTREAM
};

} // namespace QtMetaTypePrivate
QT_END_NAMESPACE

#endif

